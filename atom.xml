<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>naive的博客</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-10-17T08:16:48.730Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>naive</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker日志和监控</title>
    <link href="http://yoursite.com/2021/10/16/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E6%97%A5%E5%BF%97%E5%92%8C%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2021/10/16/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E6%97%A5%E5%BF%97%E5%92%8C%E7%9B%91%E6%8E%A7/</id>
    <published>2021-10-16T15:05:45.000Z</published>
    <updated>2021-10-17T08:16:48.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Docker日志"><a href="#一、Docker日志" class="headerlink" title="一、Docker日志"></a>一、Docker日志</h2><p>当前Docker对运行在它内部应用的日志管理较薄弱，每个运行在容器内应用的日志输出统一保存在宿主机的<code>/var/log</code>目录下，文件夹以<code>容器ID</code>命名。当前Docker仅将应用的<code>stdout</code>和<code>stderr</code>两个日志输出通过通道<strong>重定向到/var/log</strong>下。Docker以J<strong>SON消息记录每一行日志</strong>，这将导致文件增长过快，从而超过主机磁盘限额。此外，日志没有自动切分功能，docker logs命令返回的日志记录也过于冗长。<br>目前处理Docker日志的主流方案，按照日志处理工具安装的位置主要分为3种。</p><ul><li><strong>在容器内收集</strong>。除了正在运行的应用程序外，每个容器设置<strong>一个日志收集进程</strong>。这种方案需要定制Docker镜像，典型代表为<code>baseimage-dockerR</code>项目，它使用runitR连同syslog提供了这方面的日志收集方案示例。</li><li><strong>在容器外收集</strong>。在宿主机上<strong>运行一个单独收集日志的代理</strong>，收集所有容器的日志。容器有一个从该宿主机挂载的volume卷，它们把日志记录在挂载卷中，由代理进程接收。当然，也可以使用代理直接处理存储在/var/log目录下的容器日志，该方案的典型代表为<code>Fluentd</code>项目。</li><li><strong>在专用容器中收集</strong>。这是直接在宿主机上运行代理收集日志的变种方案。该收集代理同样运行在一个容器中，并且该容器的卷使用<code>docker run</code>的<code>volumes-from</code>选项被绑定给所有应用程序容器。这种方案的实现细节可以参考Docker and Logstash一文。</li></ul><h2 id="二、Docker监控"><a href="#二、Docker监控" class="headerlink" title="二、Docker监控"></a>二、Docker监控</h2><h3 id="Docker容器监控维度"><a href="#Docker容器监控维度" class="headerlink" title="Docker容器监控维度"></a>Docker容器监控维度</h3><h4 id="1-主机维度"><a href="#1-主机维度" class="headerlink" title="1.主机维度"></a>1.主机维度</h4><p>对于Docker的容器监控，主要以容器级别的监控指标为主。我们可以监控主机的以下相关信息:</p><ul><li>主机的CPU情况和使用量</li><li>主机的内存情况和使用量</li><li>主机上的本地镜像情况</li><li>主机上的容器运行情况</li></ul><h4 id="2-镜像维度"><a href="#2-镜像维度" class="headerlink" title="2.镜像维度"></a>2.镜像维度</h4><p>作为容器的基础，还需要对主机上的镜像信息进行监控。镜像的相关信息一般为静态信息，可以反映出主机上用于构建容器的镜像的基础情况，以便从底层来掌握和优化主机上的容器。我们可以监控镜像的以下相关信息:</p><ul><li><p>镜像的基本信息：包括镜像的总数量、ID、名称、版本、大小等。</p></li><li><p>镜像与容器的对应关系</p></li><li><p>镜像构建的历史信息（层级的依赖信息）</p></li></ul><h4 id="3-容器维度"><a href="#3-容器维度" class="headerlink" title="3.容器维度"></a>3.容器维度</h4><p>使用者需要对容器的各类信息进行实时监控，以保证应用的正常运行。Docker在底层使用了Linux内核提供的资源机制—–<code>namespace</code>和<code>cgroups</code>，以此来支持容器的运行。通过这些机制，可以很方便地获取容器的各项监控指标。</p><ul><li>容器的基本信息</li><li>容器的运行状态</li><li>容器的用量信息</li></ul><p>容器的基本信息包括容器的<strong>总数量、ID、名称、镜像、启动命令、端口</strong>等信息。容器监控时可以依据容器的运行状态，即<strong>运行中、暂停、停止及异常退出</strong>，来统计各状态的容器的数量，并实时反馈各个容器的运行状态。容器的用量信息则是用户最关心的,也是监控中最为复杂的部分，它可以统计容器的<strong>CPU使用率、内存使用量、块设备IO使用量、网络使用情况</strong>等资源的使用情况。这一部分监控数据大多数都来源于Cgroup下面的限制文件，</p><h3 id="容器监控命令"><a href="#容器监控命令" class="headerlink" title="容器监控命令"></a>容器监控命令</h3><h4 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h4><p>可以查看当前主机上的容器信息，包括容器ID、镜像名、容器启动执行命令、创建时间、状态、端口信息和容器名。该命令默认<strong>只列出当前正在运行的容器的信息</strong>，用户可以通过使用<code>-a</code>参数来列出包括已停止的所有容器的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS        PORTS                                       NAMES</span><br><span class="line">e96786091371   redis:latest   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   41 hours ago   Up 41 hours   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   myredis</span><br></pre></td></tr></table></figure><p>docker ps一般用于查找容器ID</p><h4 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h4><p>用户通过使用<code>docker images</code>命令，可以查看当前主机上的镜像信息，包括镜像所属的库、标签、ID、创建时间和实际大小。该命令默认只会列出所有顶层镜像的信息，但用户可以通过-a参数来查看所有中间层的镜像的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED      SIZE</span><br><span class="line">redis        latest    7faaec683238   4 days ago   113MB</span><br></pre></td></tr></table></figure><h4 id="docker-stats"><a href="#docker-stats" class="headerlink" title="docker stats"></a>docker stats</h4><p>统计容器状态的信息，同时它还有配套的API ( <code>GET /containers/(id)/stats</code> )，可供开发人员调用。使用该命令，用户可以实时监控启动中的容器的运行情况，包括<strong>CPU、内存、块设备I/O和网络I/O</strong>，这些信息都会定期刷新以显示最新的运行情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker stats myredis </span><br><span class="line"></span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O         PIDS</span><br><span class="line">e96786091371   myredis   0.11%     9.711MiB / 1.795GiB   0.53%     689kB / 3.47MB   2.97MB / 1.21MB   6</span><br><span class="line"></span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O         PIDS</span><br><span class="line">e96786091371   myredis   0.11%     9.711MiB / 1.795GiB   0.53%     689kB / 3.47MB   2.97MB / 1.21MB   6</span><br><span class="line"></span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O         PIDS</span><br><span class="line">e96786091371   myredis   0.10%     9.711MiB / 1.795GiB   0.53%     689kB / 3.47MB   2.97MB / 1.21MB   6</span><br></pre></td></tr></table></figure><p>通过<code>stats API</code>可以查看更多详细信息</p><h4 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h4><p>查看镜像或容器的底层详细信息，了解镜像或容器的完整构建信息，包括基础配置、主机配置、网络设置、状态信息等。同时，如果需要查看其特定信息，可以通过<code>-f</code>参数来设定输出格式。</p><h4 id="docker-top"><a href="#docker-top" class="headerlink" title="docker top"></a>docker top</h4><p>查看容器中进程的运行情况。可以使用户在没有通过/bin/bash交互时，查看容器的进程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker top myredis </span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">polkitd             5849                5831                0                   Oct15               ?                   00:02:29            redis-server *:6379</span><br><span class="line">root                10089               5831                0                   Oct15               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><h4 id="docker-port"><a href="#docker-port" class="headerlink" title="docker port"></a>docker port</h4><p>查看容器与主机之间的端口映射关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker port myredis </span><br><span class="line">6379/tcp -&gt; 0.0.0.0:6379</span><br><span class="line">6379/tcp -&gt; :::6379</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Docker日志&quot;&gt;&lt;a href=&quot;#一、Docker日志&quot; class=&quot;headerlink&quot; title=&quot;一、Docker日志&quot;&gt;&lt;/a&gt;一、Docker日志&lt;/h2&gt;&lt;p&gt;当前Docker对运行在它内部应用的日志管理较薄弱，每个运行在容器内应用的日志输出统一保存在宿主机的&lt;code&gt;/var/log&lt;/code&gt;目录下，文件夹以&lt;code&gt;容器ID&lt;/code&gt;命名。当前Docker仅将应用的&lt;code&gt;stdout&lt;/code&gt;和&lt;code&gt;stderr&lt;/code&gt;两个日志输出通过通道&lt;strong&gt;重定向到/var/log&lt;/strong&gt;下。Docker以J&lt;strong&gt;SON消息记录每一行日志&lt;/strong&gt;，这将导致文件增长过快，从而超过主机磁盘限额。此外，日志没有自动切分功能，docker logs命令返回的日志记录也过于冗长。&lt;br&gt;目前处理Docker日志的主流方案，按照日志处理工具安装的位置主要分为3种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在容器内收集&lt;/strong&gt;。除了正在运行的应用程序外，每个容器设置&lt;strong&gt;一个日志收集进程&lt;/strong&gt;。这种方案需要定制Docker镜像，典型代表为&lt;code&gt;baseimage-dockerR&lt;/code&gt;项目，它使用runitR连同syslog提供了这方面的日志收集方案示例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在容器外收集&lt;/strong&gt;。在宿主机上&lt;strong&gt;运行一个单独收集日志的代理&lt;/strong&gt;，收集所有容器的日志。容器有一个从该宿主机挂载的volume卷，它们把日志记录在挂载卷中，由代理进程接收。当然，也可以使用代理直接处理存储在/var/log目录下的容器日志，该方案的典型代表为&lt;code&gt;Fluentd&lt;/code&gt;项目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在专用容器中收集&lt;/strong&gt;。这是直接在宿主机上运行代理收集日志的变种方案。该收集代理同样运行在一个容器中，并且该容器的卷使用&lt;code&gt;docker run&lt;/code&gt;的&lt;code&gt;volumes-from&lt;/code&gt;选项被绑定给所有应用程序容器。这种方案的实现细节可以参考Docker and Logstash一文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、Docker监控&quot;&gt;&lt;a href=&quot;#二、Docker监控&quot; class=&quot;headerlink&quot; title=&quot;二、Docker监控&quot;&gt;&lt;/a&gt;二、Docker监控&lt;/h2&gt;&lt;h3 id=&quot;Docker容器监控维度&quot;&gt;&lt;a href=&quot;#Docker容器监控维度&quot; class=&quot;headerlink&quot; title=&quot;Docker容器监控维度&quot;&gt;&lt;/a&gt;Docker容器监控维度&lt;/h3&gt;&lt;h4 id=&quot;1-主机维度&quot;&gt;&lt;a href=&quot;#1-主机维度&quot; class=&quot;headerlink&quot; title=&quot;1.主机维度&quot;&gt;&lt;/a&gt;1.主机维度&lt;/h4&gt;&lt;p&gt;对于Docker的容器监控，主要以容器级别的监控指标为主。我们可以监控主机的以下相关信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机的CPU情况和使用量&lt;/li&gt;
&lt;li&gt;主机的内存情况和使用量&lt;/li&gt;
&lt;li&gt;主机上的本地镜像情况&lt;/li&gt;
&lt;li&gt;主机上的容器运行情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-镜像维度&quot;&gt;&lt;a href=&quot;#2-镜像维度&quot; class=&quot;headerlink&quot; title=&quot;2.镜像维度&quot;&gt;&lt;/a&gt;2.镜像维度&lt;/h4&gt;&lt;p&gt;作为容器的基础，还需要对主机上的镜像信息进行监控。镜像的相关信息一般为静态信息，可以反映出主机上用于构建容器的镜像的基础情况，以便从底层来掌握和优化主机上的容器。我们可以监控镜像的以下相关信息:&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker数据卷</title>
    <link href="http://yoursite.com/2021/10/16/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <id>http://yoursite.com/2021/10/16/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E6%95%B0%E6%8D%AE%E5%8D%B7/</id>
    <published>2021-10-16T07:24:22.000Z</published>
    <updated>2021-10-16T14:58:49.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、docker数据卷"><a href="#一、docker数据卷" class="headerlink" title="一、docker数据卷"></a>一、docker数据卷</h2><p>Docker镜像是由一系列的只读层组合而来的,当启动一个容器时, Docker加载镜像的所有只读层，并在最上层加入一个读写层。这个设计使得Docker可以提高镜像构建、存储和分发的效率，节省了时间和存储空间，然而也存在如下问题。</p><ul><li>容器中的文件在宿主机上存在形式复杂，不能在宿主机上很方便地对容器中的文件进行访问。</li><li>多个容器间的数据无法共享。</li><li>删除容器时，容器的数据丢失。</li></ul><p>docker引入了数据集（volume）来解决这些问题。volume是存在于一个或多个容器中特点文件或文件夹，这个目录独立于联合文件系统的形式在宿主机存在，并为数据的共享与持久化提供便利：</p><ul><li>volume在容器<strong>创建时就会初始化</strong>，在容器运行时就可以使用其中的文件。</li><li>volume能在不同的容器之间<strong>共享和重用</strong>。</li><li>对volume中数据的<strong>操作会马上生效</strong>。</li><li>对volume中数据的操作<strong>不会影响到镜像本身</strong>。</li><li>volume的生存周期独立于容器的生存周期，即使删除容器，volume仍然会存在，没有任何容器使用的volume也不会被Docker删除。</li></ul><p>Docker提供了<code>volumedriver</code>接口,通过实现该接口,可以为Docker容器提供不同的volume存储支持。当前官方默认实现了local这种volumedriver，它使用宿主机的文件系统为Docker容器提供volume。</p><h2 id="二、数据卷使用方式"><a href="#二、数据卷使用方式" class="headerlink" title="二、数据卷使用方式"></a>二、数据卷使用方式</h2><p>添加volume，类似于Linux的mount操作。用户将一个文件夹作为volume挂载到容器上，可以方便地添加数据到容器，供其中的进程使用。</p><p>docker1.9引入了<code>docker volume</code>。通过这个命令创建、查看、删除。</p><h3 id="1-创建volume"><a href="#1-创建volume" class="headerlink" title="1.创建volume"></a>1.创建volume</h3><p>用户可以使用<code>docker volume create</code>创建一个volume</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name vol</span><br></pre></td></tr></table></figure><blockquote><p>Docker当前并未对volume的大小提供配额管理，用户在创建volume时也无法指定volume的大小。在用户使用Docker创建volume时，由于采用的是默认的local volumedriver，所以volume的文件系统默认使用宿主机的文件系统，如果用户需要创建其他文件系统的volume，则需要使用其他的volumedriver。</p></blockquote><p>创建容器时。可以使用-v为容器添加volume</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -v /data ubuntu /bin/bash</span><br><span class="line">$ sudo docker run -d -v vol_simple: /data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>Docker在创建volume的时候会在宿主机<code>/var/lib/docker/volume/</code>中创建一个以volume ID为名的目录，并将volume中的内容存储在名为_data的目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> docker volume inspect vol_simple</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span> : <span class="string">&quot;vol_simple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span> : <span class="string">&quot;/var/lib/docker/volumes/vol_simplel_data&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-挂载volume"><a href="#2-挂载volume" class="headerlink" title="2.挂载volume"></a>2.挂载volume</h3><p>用户可以将自行创建或者由Docker创建的volume挂载到容器中,也可以将宿主机上的目录或者文件作为volume挂载到容器中。下面分别介绍这两种挂载方式。</p><p>用户可以使用如下命令创建volume，并将其创建的volume挂载到容器中的/data目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name vol_simple</span><br><span class="line">docker run -d -v vol_simple: /data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>如果用户不执行第一条命令而直接执行第二条命令的话，Docker会代替用户来创建一个名为vol_simple的volume，并将其挂载到容器中的/data目录下。</p><p>用户也可以使用如下命令创建一个<strong>随机ID的volume</strong>，并将其挂载到/data目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>以上命令都是将自行创建或者由Docker创建的volume挂载到容器中。Docker同时也允许我们将宿主机上的目录挂载到容器中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /host/dir:/container/dir ubuntu /bin/bash</span><br><span class="line">docker run -it --name vol_file -v /host/file:/container/file ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p><code>/host/dir</code>文件夹中所有文件都可以在容器的<code>/container/dir</code>文件夹下被访问，并且容器中文件夹下内容会被隐藏。也可以用挂载单个文件，文件夹使用<strong>绝对路径</strong>。</p><p>可以使用<code>:ro</code>指定该volume为只读。可以在volume挂载时使用Z和z来指定该volume是否可以共享。Docker中默认的是<code>z</code>，即<strong>共享该volume</strong>。用户也可以在挂载时使用Z来标注该volume为私有数据卷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#私有</span></span><br><span class="line">docker run -it --name vol_unshared -v /host/dir:/container/dir:Z ubuntu /bin/bash</span><br><span class="line"><span class="comment">#只读</span></span><br><span class="line">docker run -it --name vol_read_only -v /host/dir:/container/dir:ro ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>使用多个<code>-v</code>标签为容器添加多个volume</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name vol_mult -v /data1 -v /data2 -v /host/dir:/container/dir ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h3 id="3-Dockerfile添加volume"><a href="#3-Dockerfile添加volume" class="headerlink" title="3.Dockerfile添加volume"></a>3.Dockerfile添加volume</h3><p> 使用<code>VOLUME</code>指令向容器添加volume。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br><span class="line"><span class="keyword">vOLUME</span><span class="bash"> [ <span class="string">&quot;/data1&quot;</span>, <span class="string">&quot;/data2&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>在使用docker build命令生成镜像并且以该镜像启动容器时会挂载一个volume到/data。与上文中vol_simple例子类似，如果镜像中存在/data文件夹,<strong>这个文件夹中的内容将全部被复制到宿主机中对应的文件夹中</strong>，并且根据容器中的文件设置合适的权限和所有者。</p><p>需要注意的是,在Dockerfile中使用VOLUME指令之后的代码,如果尝试对这个volume进行修改，这些修改都不会生效。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在创建volume后，尝试在其中添加一些初始化的文件并改变文件所有权W。</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd foo</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch /data/file</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R foo:foo /data</span></span><br></pre></td></tr></table></figure><p>创建镜像并启动容器后，该容器中存在用户foo，并且能看到在/data挂载的volume，但是/data文件夹内并没有文件file，更别说file的所有者并没有被改变为foo。这是由于Dockerfile中除了FROM指令的每一行都是<strong>基于上一行生成的临时镜像运行一个容器</strong>，执行一条指令并执行类似<code>docker commit</code>的命令得到一个新的镜像，这条类似docker commit的命令<strong>不会对挂载的volume进行保存</strong>。所以上面的Dockerfile最后两行执行时，都会<strong>在一个临时的容器上挂载/data</strong>，并对这个临时的volume进行操作，但是这一行指令执行并提交后，这个临时的volume没有被保存，我们通过最后生成的镜像创建的容器所挂载的volume是没有操作过的。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对volume初始化改变所有这</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd foo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /data &amp;&amp; touch /data/file</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R foo:foo ldata</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#与RUN指令在镜像构建过程中执行不同，CND指令和ENTRVPOINT指令是在容器启动时执行，使用如下Dockerfile也可以达到对volume初始化的目的。</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd foo</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> touch /data/file &amp;&amp; chown -R foo:foo /data</span></span><br></pre></td></tr></table></figure><h3 id="4-共享volume"><a href="#4-共享volume" class="headerlink" title="4.共享volume"></a>4.共享volume</h3><p>在使用<code>docker run或</code>docker create<code>创建新容器时，可以使用</code>–volumes-from`标签使得容器与已有的容器共享volume。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新创建的容器vol_use与之前创建的容器vol_simple共享volume，这个volume目的目录也是/data。如果被共享的容器有多个volume(如上文中出现的vol_mult )，新容器也将有多个volume,并且其挂载的目的目录也与vol_mult中的相同。</span></span><br><span class="line">docker run --rm -it --name vol_use --volumes-from vol_simple ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用用多个--volumes-from标签，使得容器与多个已有容器共享volume。</span></span><br><span class="line">docker run --rm -it --name vol_use_mult --volumes-from vol_1 --volumes-from vol_2 ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>一个容器挂载了一个volume，即使这个容器停止运行，<strong>该volume仍然存在</strong>，其他容器也可以使用–volumes-from与这个容器共享volume。如果有一些数据，比如配置文件、数据文件等，要在多个容器之间共享，一种常见的做法是创建一个数据容器，其他的容器与之共享volume。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vol_data -v /data ubuntu <span class="built_in">echo</span> <span class="string">&quot;This is a data-only container&quot;</span></span><br><span class="line">docker run -it --name vol_share1 --volumes-from vol_data ubuntu /bin/bash</span><br><span class="line">docker run -it --name vol_share2 --volumes-from vol_data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>首先创建了一个挂载了volume的数据容器<code>vol_data</code>，这个容器仅仅输出了一条提示后就停止运行以避免浪费资源。接下来的两个容器<code>vol_share1</code>和<code>vol_sharez</code>与这个数据容器共享这个volume。这样就<strong>将两个需要共享数据的容器进行了较好的解耦</strong>，避免了容器之间因为共享数据而产生相互依赖。</p><h3 id="5-删除volume"><a href="#5-删除volume" class="headerlink" title="5.删除volume"></a>5.删除volume</h3><p>如果创建容器时从容器中挂载了volume，在<code>/var/lib/docker/volumes</code>下会生成与volume对应的目录，使用<code>docker rm</code>删除容器并<strong>不会删除与volume对应的目录</strong>，这些目录会占据不必要的存储空间，即使可以手动删除，因为有些随机生成的目录名称是无意义的随机字符串，要知道它们是否与未被删除的容器对应也十分麻烦。所以在删除容器时需要对容器的volume妥善处理。在删除容器时一并删除volume有以下3种方法。</p><ul><li>使用<code>docker volume rm &lt;volume_name&gt;</code>删除volume。</li><li>使用<code>docker rm -v &lt;container_name&gt;</code>删除容器。</li><li>在运行容器时使用<code>docker run --rm</code>，<code>--rm</code>标签<strong>会在容器停止运行时删除容器以及容器所挂载的volume。</strong></li></ul><blockquote><p>在使用docker volume rm删除volume时，只有当<strong>没有任何容器使用该volume</strong>的时候，该volume才能成功删除。另外两种方法只会对挂载在该容器上的<strong>未命名的volume进行删除</strong>，而会对用户指定名字的volume进行保留。</p><p>如果volume是在创建容器时从宿主机中挂载的,无论对容器进行任何操作都不会导致其在宿主机中被删除，如果不需要这些文件，只能手动删除它们。</p></blockquote><h3 id="6-备份、恢复或迁移volume"><a href="#6-备份、恢复或迁移volume" class="headerlink" title="6.备份、恢复或迁移volume"></a>6.备份、恢复或迁移volume</h3><p>一个方法是使用docker inspect命令查找到/data在宿主机上对应的文件夹位置，然后复制其中的内容或是使用tar进行打包;同样地，如果需要恢复某个volume中的数据，可以查找到volume对应的文件夹，将数据复制进这个文件夹或是使用tar从存档文件中恢复。这些做法可行但并不值得推荐。</p><p>推荐一个用<code>--volumes-from</code>实现的volume的备份与恢复方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vol_simple容器包含了我们希望备份的一个volume，这行命令启动了另外一个临时的容器，这个容器挂载了两个volume，第一个volume来自于vol_simple容器的共享，也就是需要备份的volume，第二个volume将宿主机的当前目录挂载到容器的/backup下。容器运行后将要备份的内容(l/data文件夹）备份到/backup/data.tar，然后删除容器，备份后的data.tar就留在了当前目录。</span></span><br><span class="line"></span><br><span class="line">docker run --rm --volumes-from vol_simple -v $(<span class="built_in">pwd</span>):/backup ubuntu tar cvf /backup/data.tar /data</span><br></pre></td></tr></table></figure><p>恢复volume可以使用以下方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先运行了一个新容器作为数据恢复的目标。第二行指令启动了一个临时容器，这个容器挂载了两个volume，第一个volume与要恢复的volume共享，第二个volume将宿主机的当前目录挂载到容器的/backup下。由于之前备份的data.tar在当前目录下,那么它在容器中的/backup也能访问到，容器启动后将这个存档文件中的/data恢复到根目录下，然后删除容器，恢复后的数据就在vol_bck的volume中了。</span></span><br><span class="line"></span><br><span class="line">docker run -it --name vol_bck -v /data ubuntu /bin/bash</span><br><span class="line">docker run --rm --volumes-from vol_bck -v $(<span class="built_in">pwd</span>): /backup ubuntu tar xvf /backup/data.tar -C /</span><br></pre></td></tr></table></figure><h2 id="三、数据卷原理"><a href="#三、数据卷原理" class="headerlink" title="三、数据卷原理"></a>三、数据卷原理</h2><p>Docker的volume的本质是容器中一个特殊的目录。在容器的创建过程中，Docker会将宿主机上的<strong>指定目录(一个以volume ID为名称的目录，或者指定的宿主机目录)挂载到容器中指定的目录上</strong>，这里使用的挂载方法是<strong>绑定挂载( bind mount )</strong>，故挂载完成后的宿主机目录和容器内的目标目录表现一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户执行docker run -v /data busybox /bin/sh指定容器里的/data目录为一个volume,实际上相当于在创建容器的过程中在容器里执行如下代码:</span></span><br><span class="line"><span class="comment">#将宿主机上的volume_id目录绑定挂载到rootfs中指定的挂载点/data上</span></span><br><span class="line">mount(“/var/lib/docker/volumes/volume_id/_data”, “rootfs/data”, “none”, NS_BIND，NULL)</span><br><span class="line"><span class="comment">#而如果用户执行的是docker run -v /var/log:/data busybox /bin/sh的话，则实际对应了:</span></span><br><span class="line"><span class="comment">#将宿主机上的/var/log目录绑定挂载到rootfs中指定的挂载点/data上</span></span><br><span class="line">mount( <span class="string">&quot;/var/log”, “rootfs/data”, “none”, MS_BIND，NULL)</span></span><br></pre></td></tr></table></figure><p>在处理完所有的mount操作之后（真正需要Docker容器挂载的除了volume目录还包括rootfs，init-layer里的内容，/proc设备等)，Docker只需要通过<code>chdir</code>和<code>pivot_root</code>切换进程的根目录到<code>rootfs</code>中，这样容器内部进程就只能看见以<code>rootfs</code>为根的文件内容以及被mount到rootfs之下的各项目录了。例如，下面的data目录就是生成出来的volume挂载点了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@in_the_container:/ ls</span><br><span class="line">bin boot data dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usrvar</span><br></pre></td></tr></table></figure><p>Docker daemon在为容器挂载目录的过程中着重处理的事情就是<strong>是如何组装出合适的mount指令</strong>，而在源码中，挂载点这个结构体中则包含了组装mount命令所有需要的信息。</p><h4 id="1-创建volume-1"><a href="#1-创建volume-1" class="headerlink" title="1.创建volume"></a>1.创建volume</h4><p>volume的来源只有两种，即用户通过<strong>命令行指定的绑定挂载</strong>和从其他容器共享。<br>Docker首先需要根据用户指定的volume类型，判断并新建对应的挂载点。Docker在创建volume的过程中主要进行了如下操作。</p><p>volume的创建依照容器启动的过程可以分为两个阶段。第一阶段为容器创建阶段，Docker<strong>根据两种不同的volume来源组装挂载点列表</strong>。第二阶段为容器启动阶段，<strong>libcontainer使用组装好的挂载点列表进行mount操作</strong>，完成volume的创建。</p><p>Docker会负责维护一个<strong>本地的volume列表</strong>，该列表中存储了所有本地有名字的volume，列表的键为volume的名字，值为volume的存储路径和驱动名称。如果用户指定了volume的名字，那么Docker会在volume列表中查找<strong>是否已经有对应的volume</strong>。若Docker没有在volume列表中找到对应的volume，Docker<strong>会创建一个以此名字命名的volume</strong>，并将该volume加入到Docker维护的volume列表中，然后创建一个新的挂载点。如果找到了对应的volume，则将其中的信息复制到新创建的挂载点中（主要信息为volume的源地址)。</p><p>Docker为每一个容器都维护着如下所示的挂载点组成的列表,在这个挂载点中填写上述宿主机上源目录路径、容器内挂载位置、读写权限等信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MountPoint <span class="keyword">struct</span> &#123;</span><br><span class="line">Source<span class="keyword">string</span><span class="comment">//源目录</span></span><br><span class="line">Destination<span class="keyword">string</span><span class="comment">//目的目录</span></span><br><span class="line">    Rw<span class="keyword">bool</span><span class="comment">//是否可写</span></span><br><span class="line">Name<span class="keyword">string</span> <span class="comment">// volume的名字</span></span><br><span class="line">    Driver<span class="keyword">string</span><span class="comment">// volume driver的名字</span></span><br><span class="line">VolumeVolume<span class="comment">//该挂载点所对应的本地volume信息</span></span><br><span class="line">Mode<span class="keyword">string</span><span class="comment">//挂载的模式</span></span><br><span class="line">Propagation<span class="keyword">string</span><span class="comment">//挂载的拓展选项</span></span><br><span class="line">Named<span class="keyword">bool</span><span class="comment">//该挂载点是否被命名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于共享的volume，Docker从输入参数中解析出<strong>volume容器ID</strong>是否可读”两个变量。接着根据容器ID查找到对应的容器对象Container，然后根据该对象中volumes数组复制并创建新的挂载点,并加入到上面提到的挂载点列表中。</p><p>不同参数所感的主要字段</p><table><thead><tr><th>成员</th><th>-v vol_simple:/containerdir</th><th>-v /containerdir</th><th>-v /hostdir:/containerdir:ro</th></tr></thead><tbody><tr><td>Source</td><td>/var/lib/docker/volumes/vol_simple/_data</td><td>/var/lib/docker/volumes/随机ID/_data</td><td>/hostdir</td></tr><tr><td>Destination</td><td>/containerdir</td><td>/containerdir</td><td>/containerdir</td></tr><tr><td>Rw</td><td>true</td><td>true</td><td>false</td></tr><tr><td>Name</td><td>vol_simple</td><td>随机ID</td><td>nill</td></tr><tr><td>Named</td><td>true</td><td>true</td><td>true</td></tr></tbody></table><h4 id="2-删除volume"><a href="#2-删除volume" class="headerlink" title="2.删除volume"></a>2.删除volume</h4><ul><li>使用<code>docker volume rm</code>删除volume时，Docker首先会检查<strong>是否还有容器在使用这个volume</strong>，如果这个volume还被其他容器所使用,则返回错误信息,并终止删除。如果没有容器在使用这个volume,那么Docker会将这个volume在宿主机上<strong>对应的目录删除</strong>，并删除其维护的本地volume列表中的相关信息。</li><li>使用<code>docker run --rm</code>和<code>docker rm -v</code>进行volume删除时，其volume的删除过程与第一种类似，不过需要注意的是，这种<strong>删除的方式会过滤掉挂载点中Named字段为true的volume</strong>，也就是说这种方式<strong>并不会对命名的volume进行删除</strong>。</li></ul><h4 id="3-volume相关配置文件"><a href="#3-volume相关配置文件" class="headerlink" title="3.volume相关配置文件"></a>3.volume相关配置文件</h4><p>Docker的每个容器在<code>/var/lib/docker/containers</code>文件夹下有一个以容器ID命名的子文件夹，这个子文件夹中的<code>config.json</code>文件是这个容器的配置文件，可以从中看到这个容器所使用的<code>volumeID</code>以及它们的可写情况。如果你要查看volume的具体信息，你可以在<code>/var/lib/docker/volumes</code>文件夹下找与volume ID或者volume名字命名的子文件夹，这个子文件夹中的<code>_data</code>目录存储了该volume中的所有内容。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、docker数据卷&quot;&gt;&lt;a href=&quot;#一、docker数据卷&quot; class=&quot;headerlink&quot; title=&quot;一、docker数据卷&quot;&gt;&lt;/a&gt;一、docker数据卷&lt;/h2&gt;&lt;p&gt;Docker镜像是由一系列的只读层组合而来的,当启动一个容器时, Docker加载镜像的所有只读层，并在最上层加入一个读写层。这个设计使得Docker可以提高镜像构建、存储和分发的效率，节省了时间和存储空间，然而也存在如下问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器中的文件在宿主机上存在形式复杂，不能在宿主机上很方便地对容器中的文件进行访问。&lt;/li&gt;
&lt;li&gt;多个容器间的数据无法共享。&lt;/li&gt;
&lt;li&gt;删除容器时，容器的数据丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;docker引入了数据集（volume）来解决这些问题。volume是存在于一个或多个容器中特点文件或文件夹，这个目录独立于联合文件系统的形式在宿主机存在，并为数据的共享与持久化提供便利：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;volume在容器&lt;strong&gt;创建时就会初始化&lt;/strong&gt;，在容器运行时就可以使用其中的文件。&lt;/li&gt;
&lt;li&gt;volume能在不同的容器之间&lt;strong&gt;共享和重用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对volume中数据的&lt;strong&gt;操作会马上生效&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对volume中数据的操作&lt;strong&gt;不会影响到镜像本身&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;volume的生存周期独立于容器的生存周期，即使删除容器，volume仍然会存在，没有任何容器使用的volume也不会被Docker删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker提供了&lt;code&gt;volumedriver&lt;/code&gt;接口,通过实现该接口,可以为Docker容器提供不同的volume存储支持。当前官方默认实现了local这种volumedriver，它使用宿主机的文件系统为Docker容器提供volume。&lt;/p&gt;
&lt;h2 id=&quot;二、数据卷使用方式&quot;&gt;&lt;a href=&quot;#二、数据卷使用方式&quot; class=&quot;headerlink&quot; title=&quot;二、数据卷使用方式&quot;&gt;&lt;/a&gt;二、数据卷使用方式&lt;/h2&gt;&lt;p&gt;添加volume，类似于Linux的mount操作。用户将一个文件夹作为volume挂载到容器上，可以方便地添加数据到容器，供其中的进程使用。&lt;/p&gt;
&lt;p&gt;docker1.9引入了&lt;code&gt;docker volume&lt;/code&gt;。通过这个命令创建、查看、删除。&lt;/p&gt;
&lt;h3 id=&quot;1-创建volume&quot;&gt;&lt;a href=&quot;#1-创建volume&quot; class=&quot;headerlink&quot; title=&quot;1.创建volume&quot;&gt;&lt;/a&gt;1.创建volume&lt;/h3&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像</title>
    <link href="http://yoursite.com/2021/10/13/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2021/10/13/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E9%95%9C%E5%83%8F/</id>
    <published>2021-10-13T12:42:20.000Z</published>
    <updated>2021-10-16T07:22:33.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是Docker镜像"><a href="#一、什么是Docker镜像" class="headerlink" title="一、什么是Docker镜像"></a>一、什么是Docker镜像</h2><p>Docker镜像是一个<strong>只读的Docker容器模板</strong>，含有启动Docker容器所需的文件系统结构及其内容，是启动一个Docker容器的基础。Docker镜像的<strong>文件内容以及一些运行Docker容器的配置文件</strong>组成了Docker容器的静态文件系统运行环境―—<code>rootfs</code>。Docker镜像是Docker容器的静态视角，Docker容器是Docker镜像的运行状态。</p><h3 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h3><p>rootfs是Docker容器在启动时内部进程可见的文件系统，即Docker容器的根目录。<strong>rootfs通常包含一个操作系统运行所需的文件系统</strong>，例如可能包含典型的类Unix操作系统中的目录系统，如/dev、/proc、/bin、/etc、/lib、/usr、/tmp及运行Docker容器所需的配置文件、工具等。</p><p>传统的Linux操作系统内核启动时，首先挂载一个<strong>只读( read-only)</strong>的rootfs，当系统检测其完整性之后，再将其切换为<strong>读写( read-write)</strong>模式。而在Docker架构中，当Docker daemon为Docker容器挂载rootfs时，沿用了Linux内核启动时的方法，即将rootfs设为只读模式。在挂载完毕之后，利用<strong>联合挂载( union mount)</strong>技术在已有的只读rootfs上再挂载一个读写层。这样，<strong>可读写层处于Docker容器文件系统的最顶层，其下可能联合挂载多个只读层</strong>，只有在Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读写层，并隐藏只读层中的老版本文件。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><h4 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h4><p>Docker镜像是采用分层的方式构建的，每个镜像都由一系列的“镜像层”组成。分层结构是Docker镜像如此轻量的重要原因，当需要修改容器镜像内的某个文件时，<strong>只对处于最上方的读写层进行变动</strong>，不覆写下层已有文件系统的内容，已有文件在只读层中的原始版本仍然存在，但会<strong>被读写层中的新版文件所隐藏</strong>。当使用docker commit提交这个修改过的容器文件系统为一个新的镜像时，<strong>保存的内容仅为最上层读写文件系统中被更新过的文件</strong>。分层达到了<strong>在不同镜像之间共享镜像层的效果</strong>。</p><h4 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h4><p>Docker镜像使用了<strong>写时复制( copy-on-write）</strong>策略，在多个容器之间<strong>共享镜像</strong>，每个容器在启动的时候并不需要单独复制一份镜像文件，而是<strong>将所有镜像层以只读的方式挂载到一个挂载点</strong>，再在上面覆盖一个<strong>可读写的容器层</strong>。在未更改文件内容时，所有容器共享同一份数据，只有在Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读写层，并隐藏只读层中的老版本文件。写时复制配合分层机制<strong>减少了镜像对磁盘空间的占用和容器启动时间。</strong></p><h4 id="内容寻址"><a href="#内容寻址" class="headerlink" title="内容寻址"></a>内容寻址</h4><ul><li>根据<strong>文件内容索引</strong>镜像和镜像层。</li><li>对镜像层的内容<strong>计算校验和</strong>，生成一个内容哈希值，作为唯一标识。</li><li>提高了镜像的安全性，在pull、push、load和save操作后<strong>检测数据的完整性。</strong></li><li>一定程度上减少了ID冲突并且增强了镜像共享。不同构建的镜像层，拥有相同内容哈希，也能被不同的镜像共享。</li></ul><h4 id="联合挂载"><a href="#联合挂载" class="headerlink" title="联合挂载"></a>联合挂载</h4><p><strong>联合文件系统</strong>。在一个挂载点挂载多个文件系统，将挂载点原目录和被挂载内容整合，最终可见的文件系统将会包含整合后的各层文件和目录。联合挂载是用于<strong>将多个镜像层的文件系统挂载到一个挂载点来实现一个统一文件系统视图</strong>的途径，是<strong>下层存储驱动(如aufs、overlay等）实现分层合并的方式</strong>。所以严格来说，联合挂载并不是Docker镜像的必需技术，比如我们在使用Device Mapper存储驱动时,其实是使用了快照技术来达到分层的效果，没有联合挂载这一概念。</p><h3 id="Docker镜像存储方式"><a href="#Docker镜像存储方式" class="headerlink" title="Docker镜像存储方式"></a>Docker镜像存储方式</h3><p>从图中我们可以看到，除了<code>echo hello</code>进程所在的<code>cgroups</code>和<code>namespace</code>环境之外，容器文件系统其实是一个<strong>相对独立的组织</strong>。<strong>可读写部分( read-write layer以及volumes )</strong>、<strong>init-layer</strong>、<strong>只读层( read-only layer)</strong>这3部分结构共同组成了一个容器所需的下层文件系统，它们通过联合挂载的方式巧妙地表现为一层，使得容器进程对这些层的存在一点都不知道。</p><p><img src="/2021/10/13/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E9%95%9C%E5%83%8F/docker%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A8%E5%B1%80%E6%A6%82%E8%A7%88.png" alt="docker文件系统全局概览"></p><h2 id="二、Docker镜像关键概念"><a href="#二、Docker镜像关键概念" class="headerlink" title="二、Docker镜像关键概念"></a>二、Docker镜像关键概念</h2><h3 id="1-registry"><a href="#1-registry" class="headerlink" title="1.registry"></a>1.registry</h3><p>registry用以保存Docker镜像，其中还包括镜像层次结构和关于镜像的元数据。</p><p>用户可以在自己的数据中心搭建私有的registry，也可以使用Docker官方的公用registry服务，即<code>Docker Hub</code>。</p><h3 id="2-repository"><a href="#2-repository" class="headerlink" title="2.repository"></a>2.repository</h3><p>repository即由<strong>具有某个功能的Docker镜像的所有迭代版本构成的镜像组</strong>。registry由一系列经过命名的repository组成, repository通过命名规范对用户仓库和顶层仓库进行组织。用户仓库的命名由<strong>用户名和repository名两部分组成</strong>,中间以”/“隔开,即username/repository.name的形式，repository名通常表示镜像所具有的功能，如ansible/ubuntu14.04-ansible;而顶层仓库则只包含repository名的部分，如ubuntu。</p><h3 id="3-manifest"><a href="#3-manifest" class="headerlink" title="3.manifest"></a>3.manifest</h3><p><strong>manifest(描述文件</strong>）主要存在于registry中作为Docker镜像的<strong>元数据文件</strong>，在pull、push,save和load中作为镜像结构和基础信息的描述文件。在镜像被pull或者load到Docker宿主机时，manifest被转化为<strong>本地的镜像配置文件config</strong>。新版本（v2，schema 2 )的manifest list可以组合不同架构实现同名Docker镜像的manifest，用以支持多架构Docker镜像。</p><h3 id="4-image和layer"><a href="#4-image和layer" class="headerlink" title="4.image和layer"></a>4.image和layer</h3><p>Docker内部的<code>image</code>概念是用来存储一组镜像相关的元数据信息，主要包括<strong>镜像的架构（如amd64)、镜像默认配置信息、构建镜像的容器配置信息、包含所有镜像层信息的rootfs。</strong>Docker利用rootfs中的<code>diff_id</code>计算出内容寻址的索引 ( chainID)来获取layer相关信息，进而获取每一个镜像层的文件内容。<br><strong>layer(镜像层)</strong>是一个Docker用来管理镜像层的中间概念，前面提到镜像是由镜像层组成的，而单个镜像层可能被多个镜像共享，所以Docker将layer与image的概念分离。Docker镜像管理中的layer主要存放了镜像层的<strong>diff_id、size、cache-id和parent</strong>等内容，<strong>实际的文件内容则是由存储驱动来管理</strong>,并可以通过cache-id在本地索引到。</p><h2 id="三、Docker镜像的分发方法"><a href="#三、Docker镜像的分发方法" class="headerlink" title="三、Docker镜像的分发方法"></a>三、Docker镜像的分发方法</h2><p><code>docker push</code>和<code>docker pull</code>、或<code>docker save</code>和<code>docker load</code>命令进行分发。docker pull是通过Docker Hub的方式迁移，docker save是通过线下包分发的方式迁移。</p><p>对容器进行持久化和使用进行进行持久化区别：</p><ul><li><code>docker export</code>用于持久化<strong>容器</strong>，<code>docker push</code>和<code>docker save</code>用于持久化<strong>镜像</strong>。</li><li>将容器导出在导入（exported-imported）后的<strong>容器会丢失所有历史</strong>，而保存后在加载（saved-loaded）<strong>镜像没有丢失历史和层</strong>，后者可以通过docker tag实现历史层回滚。</li></ul><h3 id="docker-export导出容器"><a href="#docker-export导出容器" class="headerlink" title="docker export导出容器"></a>docker export导出容器</h3><p>Docker server接收到相应的HTTP请求后，会通过daemon实例调用<code>ContainerExport</code>方法来进行具体的操作，这个过程的主要步骤如下。</p><ol><li><p>根据命令行参数（容器名称）找到待导出的容器。</p></li><li><p>对该容器调用containerExport()函数导出容器中的所有数据，包括:</p><ul><li><p>挂载待导出容器的文件系统;</p></li><li><p>打包该容器<code>basefs</code> (即<code>graphdriver</code>上的挂载点)下的所有文件。以aufs为例，basefs对应的是<code>aufs/mnt</code>下对应容器ID的目录;</p></li><li><p>返回打包文档的结果并卸载该容器的文件系统。</p></li></ul></li><li><p>将导出的数据回写到HTTP请求应答中。</p></li></ol><h3 id="docker-save命令保存镜像"><a href="#docker-save命令保存镜像" class="headerlink" title="docker save命令保存镜像"></a>docker save命令保存镜像</h3><p>Docker client发来的请求由<code>getImagesGet Handler</code>进行处理，该Handler调用<code>ExportImage</code>函数进行具体的处理。</p><p><code>ExportImage</code>会根据imageStore、layerStore、referenceStore构建一个<code>imageExporter</code>，调用其<code>save</code>函数导出所有镜像。</p><p><code>save</code>函数负责查询到<strong>所有被要求export的镜像ID</strong>(（如果用户没有指定镜像标签，会指定默认标签latest)，并生成对应的镜像描述结构体。然后生成一个<code>saveSession</code>并调用其save函数来处理所有镜像的导出工作。<br>save函数会创建一个临时文件夹用于保存镜像json文件。然后<strong>循环遍历所有待导出的镜像</strong>，对每一个镜像执行<code>saveImage</code>函数来导出该镜像。另外，为了与老版本repository兼容，还会将被导出的<strong>repository的名称、标签及ID信息</strong>以JSON格式写入到名为<code>repositories</code>的文件中。而新版本中被导出的<strong>镜像配置文件名</strong>、<strong>repository的名称</strong>、<strong>标签以及镜像层描述信息</strong>则是写入到名为<code>manifest.json</code>的文件中。最后<strong>执行文件压缩</strong>并写入到输出流。</p><p><code>saveImage</code>函数首先根据镜像ID在imageStore中获取image结构体。其次是一个for循环，<strong>遍历该镜像RootFS中所有layer</strong>，对<strong>各个依赖layer进行export工作</strong>，即<strong>从顶层layer、其父layer及至baselayer</strong>：</p><ol><li>为每个<strong>被要求导出的镜像创建一个文件夹</strong>，以其镜像ID命名。</li><li>在该文件夹下<strong>创建VERSION文件</strong>，写入“1.0”。</li><li>在该文件夹下创建<code>json</code>文件，在该文件中写入镜像的<strong>元数据信息，包括镜像ID、父镜像ID以及对应的Docker容器ID</strong>等。</li><li>在该文件夹下创建<code>layer.tar</code>文件，<strong>压缩镜像的filesystem</strong>。该过程的核心函数为TarLayer<strong>,对存储镜像的diff路径中的文件进行打包。</strong></li><li>对该layer的父layer执行下一次循环。</li></ol><h2 id="四、Docker存储管理"><a href="#四、Docker存储管理" class="headerlink" title="四、Docker存储管理"></a>四、Docker存储管理</h2><h3 id="Docker镜像元数据管理"><a href="#Docker镜像元数据管理" class="headerlink" title="Docker镜像元数据管理"></a>Docker镜像元数据管理</h3><p>在设计上将镜像元数据与镜像文件的存储完全隔离开。在管理元数据时，采用从上到下<code>repository</code>、<code>image</code>、<code>layer</code>三个层次。由于Docker采用分层形式存储镜像，所以<code>repository</code>与<code>image</code>这两类元数据<strong>并无物理上的镜像文件</strong>与之对应，而layer这种元数据存在物理上的镜像层与之对应。</p><ol><li><p><strong>repository元数据</strong></p><p>repository在本地持久化文件存放与<code>/var/lib/docker/image/[some_graph_driver]/repositories.json</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/docker/image/aufs<span class="comment"># cat repositories.json | python -mjson.tool</span></span><br><span class="line"><span class="string">&quot;Repositories&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;busybox&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;busybox: latest&quot;</span> :</span><br><span class="line">       <span class="string">&quot;sha256:47bcc53f74dc94b1920fob34f6036096526296767650f223433fe65c35f149eb&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;fedora&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;fedora: latest&quot;</span> :</span><br><span class="line">    <span class="string">&quot;sha256:ddd5c9c1dof2a08c5d53958a2590495d4f8a6166e2c1331380178af425ac9f3c&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ubuntu&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;ubuntu: 14.04&quot;</span> :</span><br><span class="line">        <span class="string">&quot;sha256:90d5884b1ee07f7f791f51bab92933943c87357bcd2fa6beoe82c48411bbb653&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件存储了所有repository的名字、每个repository下所有<strong>版本镜像的名字以及对应的镜像ID。</strong>而<code>referenceStore</code>的作用是解析不同格式的repository名字，并管理repository与镜像ID的关系。</p></li><li><p><strong>image元数据</strong></p><p>包括镜像架构（如amd64）、操作系统（如Linux）、镜像默认配置、构建该镜像的容器ID、创建时间、创建该镜像的Docker版本、构建进行的历史信息以及rootfs组成。</p><p><strong>构建镜像的历史信息和rootfs</strong>组成部分除了具有描述镜像的作用外，还将镜像和构成该镜像的镜像层关联了起来。Docker会根据<strong>历史信息</strong>和rootfs中的<strong>diff_ids</strong>计算出<strong>构成该镜像的镜像层的存储索引chainID</strong>。</p><p><code>imageStore</code>则管理<strong>镜像ID与镜像元数据之间的映射关系以及元数据的持久化操作</strong>，持久化文件位于<code>/var/lib/docker/image/[graph_driver]/imagedb/content/sha256/[image_id]</code>中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat 7faaec68323851b2265bddb239bd9476c7d4e4335e9fd88cbfcc1df374dded2f </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们重点来看看rootfs信息，docker inspect下这个image，可以看到有个<code>RootFS</code>项，里面记录了一些sha256 哈希值，这又是什么呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[...</span><br><span class="line"><span class="string">&quot;RootFS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;layers&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Layers&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;sha256:e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:b43651130521eb89ffc3234909373dc42557557b3a6609b9fed183abaa0c4085&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:8b9770153666c1eef1bc685abfc407242d31e34f180ad0e36aff1a7feaeb3d9c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:6b01cc47a390133785a4dd0d161de0cb333fe72e541d1618829353410c4facef&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:0bd13b42de4de0a0d0cc3f1f162cd0d4b8cb4ee20cbea7302164fdc6894955fd&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sha256:146262eb38412d6eb44be1710bfe0f05d3493831f82b1c2be8dc8d9558c9f033&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line"> ...</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>后面的哈希值称为<code>diff_id</code>，其排列也是有顺序的，从上到下依次表示镜像层的最低层到最顶层。每层文件都存储<em>在</em><code>/var/lib/docker/overlay2/&lt;cache_id&gt;</code>目录下,docker 利用 <code>rootfs</code> 中的每个<code>diff_id</code> 和<strong>历史信息</strong>计算出与之对应的内容寻址的索引(<code>chainID</code>) ，而<code>chaiID</code>则关联了<code>cache_id</code>，进而关联到每一个镜像层的镜像文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff_id -&gt; chain_id -&gt; cache_id</span><br></pre></td></tr></table></figure><ul><li><p>cache_id: 可以在<code>/var/lib/docker/overlay2</code>中查看，也可以通过docker inpect 查看GraphDriver中的dir ID。</p></li><li><p>diff_id：通过docker inpect查看RootFS中的Layers项目</p></li><li><p>chain_id: 可以在<code>/var/lib/docker/image/overlay2/layerdb/sha256</code>查看</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本例中</span></span><br><span class="line"><span class="comment"># layer_id有：</span></span><br><span class="line"><span class="comment"># ls /var/lib/docker/overlay2</span></span><br><span class="line">049991c5c6099d5999c3d4c186cb3cc4ba568c31e6420fa72dff87d82b29fcb9</span><br><span class="line">0c11dee18f1e2556cec649be416d7b4221ddd6d224449b547ca983651edf4391</span><br><span class="line">35df5518615bb8c17558526dd1ce0ef2eab8d562129be3ec3b32831b1c41f827</span><br><span class="line">514dda44fa241d5bdc1cf5973a675161aebf77e7c47e9d20df0cb66a7fa8bf46</span><br><span class="line">93d168d9964b1a43c296b0dbc9caadefe079bccac58add92d07f883d16734610</span><br><span class="line">a20939fbb9a6e0bd5b185f293453748b67e89927b3ebad29a9e65acfbc684df4</span><br><span class="line">bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a</span><br><span class="line"></span><br><span class="line"><span class="comment"># diff_id有</span></span><br><span class="line"> <span class="string">&quot;sha256:e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e&quot;</span>,            <span class="string">&quot;sha256:b43651130521eb89ffc3234909373dc42557557b3a6609b9fed183abaa0c4085&quot;</span>,            <span class="string">&quot;sha256:8b9770153666c1eef1bc685abfc407242d31e34f180ad0e36aff1a7feaeb3d9c&quot;</span>,            <span class="string">&quot;sha256:6b01cc47a390133785a4dd0d161de0cb333fe72e541d1618829353410c4facef&quot;</span>,</span><br><span class="line"> <span class="string">&quot;sha256:0bd13b42de4de0a0d0cc3f1f162cd0d4b8cb4ee20cbea7302164fdc6894955fd&quot;</span>,</span><br><span class="line"> <span class="string">&quot;sha256:146262eb38412d6eb44be1710bfe0f05d3493831f82b1c2be8dc8d9558c9f033&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chain_id有</span></span><br><span class="line"><span class="comment"># ls /var/lib/docker/image/overlay2/layerdb/sha256</span></span><br><span class="line">l 24</span><br><span class="line">2649acad13241d9c8d81e49357bc66cce459b352ded7f423d70ede7bd3bb7b89</span><br><span class="line">64007bba5fc220df4d3da33cecdc2d55dd6a73528c138b0fa1acd79fd6a9c217</span><br><span class="line">b2cc2f1bf8b1cca8ba7c19e1697f7b73755903ad8f880b83673fd6a697aca935</span><br><span class="line">e6deb90762475cda72e21895911f830ed99fd1cc6d920d92873270be91235274</span><br><span class="line">e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e</span><br><span class="line">fbd1283ab782925be4d990bd4bebe9ad5e5cf9a525abfb6fa87465e072da9d31</span><br></pre></td></tr></table></figure></li></ol><p>   从diff_id到chain_id的算法为：</p><ul><li>如果该镜像层是最底层(没有父镜像层)，该层的 diff_id 便是 chain_id。</li><li>该镜像层的 chain_id 计算公式为 <code>chainID=sha256(父层chain_id+&quot; &quot;+本层diff_id)</code>，也就是根据父镜像层的 chain_id 加上一个空格和当前层的 diff_id，再计算 SHA256 校验码。</li></ul><ol start="3"><li><p><strong>layer元数据</strong></p><p>layer对应镜像层的概念，在Docker 1.10版本以前，镜像通过一个<code>graph</code>结构管理，每一个镜像层都拥有元数据，记录<strong>了该层的构建信息以及父镜像层ID</strong>，而<strong>最上面的镜像层会多记录一些信息作为整个镜像的元数据</strong>。graph则根据镜像ID（即最上层的镜像层ID)和每个镜像层记录的父镜像层ID维护了一个<strong>树状</strong>的镜像层结构。</p><p>在Docker 1.10版本后，镜像元数据管理巨大改变之一便是简化了镜像层的元数据，镜像层只包含一个<strong>具体的镜像层文件包</strong>。用户在Docker宿主机上下载了某个镜像层之后，Docker会在宿主机上基于镜像层文件包和image元数据，构建本地的layer元数据，包括<strong>diff、parent、size</strong>等。而将在宿主机上产生新的镜像层上传到registry时，与新镜像层相关的宿主机上的元数据也不会与镜像层一块打包上传。</p><p>Docker中定义了<code>Layer</code>和<code>RWLayper</code>两种接口，分别用来定义只读层和可读写层的一些操作，又定义了<code>roLayer</code>和<code>mountedLayer</code>，分别实现了上述两种接口。其中，<code>roLayer</code>用于描述不可改变的镜像层，<code>mountedLayer</code>用于描述可读写的容器层。</p><ul><li>roLayer 用于描述不可改变的镜像层，它的元数据位于 <code>/var/lib/docker/image/&lt;storage_driver&gt;/layerdb/sha256/&lt;chain_id&gt;</code></li><li>mountedLayer 用于描述可读写的容器层。它的元数据位于<code>/var/lib/docker/image/&lt;storage_driver&gt;/layerdb/mounts/&lt;container_id&gt;/</code></li></ul><p><code>roLayer</code>存储的内容主要有<strong>索引该镜像层的chainID</strong>、<strong>该镜像层的校验码diffID</strong>、<strong>父镜像层parent</strong>、<code>graphdriver</code>存储当前<strong>镜像层文件的cacheID</strong>、该<strong>镜像层的大小size</strong>等内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">tree -L 2</span><br><span class="line">.</span><br><span class="line">|-- 2649acad13241d9c8d81e49357bc66cce459b352ded7f423d70ede7bd3bb7b89</span><br><span class="line">|   |-- cache-id</span><br><span class="line">|   |-- diff</span><br><span class="line">|   |-- parent</span><br><span class="line">|   |-- size</span><br><span class="line">|   `-- tar-split.json.gz</span><br><span class="line">|-- 64007bba5fc220df4d3da33cecdc2d55dd6a73528c138b0fa1acd79fd6a9c217</span><br><span class="line">|   |-- cache-id</span><br><span class="line">|   |-- diff</span><br><span class="line">|   |-- parent</span><br><span class="line">|   |-- size</span><br><span class="line">|   `-- tar-split.json.gz</span><br><span class="line">|-- b2cc2f1bf8b1cca8ba7c19e1697f7b73755903ad8f880b83673fd6a697aca935</span><br><span class="line">|   |-- cache-id</span><br><span class="line">|   |-- diff</span><br><span class="line">|   |-- parent</span><br><span class="line">|   |-- size</span><br><span class="line">|   `-- tar-split.json.gz</span><br><span class="line">|-- e6deb90762475cda72e21895911f830ed99fd1cc6d920d92873270be91235274</span><br><span class="line">|   |-- cache-id</span><br><span class="line">|   |-- diff</span><br><span class="line">|   |-- parent</span><br><span class="line">|   |-- size</span><br><span class="line">|   `-- tar-split.json.gz</span><br><span class="line">|-- e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e</span><br><span class="line">|   |-- cache-id</span><br><span class="line">|   |-- diff</span><br><span class="line">|   |-- size</span><br><span class="line">|   `-- tar-split.json.gz</span><br><span class="line">`-- fbd1283ab782925be4d990bd4bebe9ad5e5cf9a525abfb6fa87465e072da9d31</span><br><span class="line">    |-- cache-id</span><br><span class="line">    |-- diff</span><br><span class="line">    |-- parent</span><br><span class="line">    |-- size</span><br><span class="line">    `-- tar-split.json.gz</span><br><span class="line"></span><br><span class="line">6 directories, 29 files</span><br></pre></td></tr></table></figure><p>可以看到每个文件夹的名字都是<code>chain_id</code>，每个文件夹下面有5个文件，分别是：</p><ul><li><code>cache-id</code>：cache-id是docker下载layer的时候在本地生成的一个<strong>随机uuid</strong>，指向真正存放layer文件的地方。</li><li><code>diff</code>：文件存放layer的diff_id。</li><li><code>parent</code>：parent文件存放当前layer的父layer的<code>diff_id</code>，注意：对于最底层的layer来说，由于没有父layer，所以没有这个文件，例如本例子中的<code>e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e</code> 。</li><li><code>size</code>：当前<strong>layer的大小</strong>，单位是字节。</li><li><code>tar-split.json.gz</code>：layer压缩包的split文件，通过这个文件可以还原layer的tar包，在docker save导出image的时候会用到</li></ul><p>通过<code>cat cache-id</code>就可以知道layer真正存放文件的位置。</p></li></ol><p>   <code>mountedLayer</code>存储的内容主要为索引某个容器的可读写层（也叫容器层）的<code>ID</code>(也对应容器的ID)</p><p>   查看该container的init层与容器层元数据</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/docker/image/[graph_driver]/layerdb/mounts/[container_id]/</span><br><span class="line">ls</span><br><span class="line">init-id  mount-id  parent</span><br><span class="line">cat init-id</span><br><span class="line">bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a-init</span><br><span class="line">cat mount-id</span><br><span class="line">bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a</span><br><span class="line">cat parent</span><br><span class="line">sha256:e6deb90762475cda72e21895911f830ed99fd1cc6d920d92873270be91235274</span><br></pre></td></tr></table></figure><ul><li><code>mount-id</code>：存储在/var/lib/docker/overlay2/的目录名称。</li><li><code>init-id</code>：initID是在mountID后加了一个-init，同时initID就是存储在/var/lib/docker/overlay2/的目录名称。</li><li>parent：容器所基于的<strong>镜像的最上层的chain_id</strong>。（注意这个parent和roLayer元数据的parent的不同之处）。</li></ul><h2 id="五、存储驱动"><a href="#五、存储驱动" class="headerlink" title="五、存储驱动"></a>五、存储驱动</h2><p>Docker为了支持镜像分层和写时复制，Docker提供了存储驱动的接口。存储驱动根据操作系统的支持提供了针对某种文件系统的初始化操作和镜像层的<strong>增、删、改、查和差异比较</strong>。目前的接口有aufs、btrfs、devicemapper、vfs、overlay、zfs。vfs不支持写时复制，是为使用volume提供存储驱动，只做简单文件挂载操作。</p><p><strong>存储驱动的功能与管理</strong></p><p>Docker中管理文件系统的驱动为<code>graphdriver</code>。其中定义了统一的接口对不同的文件系统进行管理，在Docker daemon启动时就会根据不同的文件系统选择合适的驱动。</p><p><strong>常用的存储驱动overlay</strong></p><p>OverlayFS是一种新型联合文件系统，允许用户<strong>将一个文件系统与另一个文件系统重叠（overlay）</strong>,在上层的文件系统中记录更改，下层文件系保持不变。</p><p>主要使用4类目录完成工作：被联合挂载的两个目录<code>lower</code>和<code>upper</code>，作为统一视图联合挂载点的<code>merged</code>目录，作为辅助功能的<code>work</code>目录。</p><p>作为upper和lower被联合挂载的统一视图，当同一路径的文件分别存在于2个目录时，位于upper中的文件会屏蔽下层lower的文件夹，同文件夹的文件则会合并。OverlayFS会执行一个copy_up将文件从下层复制到上层.</p><h3 id="overlay2的目录结构"><a href="#overlay2的目录结构" class="headerlink" title="overlay2的目录结构"></a>overlay2的目录结构</h3><p>overlay2是上最新的Docker CE版本18.06.0上的默认存储驱动.</p><img src="/2021/10/13/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E9%95%9C%E5%83%8F/overlay2.jpg" alt="overlay2" style="zoom:80%;"><p>通过redis镜像看<code>/var/lib/docker/overlay2</code></p><p><img src="/2021/10/13/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E9%95%9C%E5%83%8F/overlay2%E6%96%87%E4%BB%B6.png" alt="image-20211016133323087"></p><p>这个文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-9-centos l]<span class="comment"># ll</span></span><br><span class="line">total 32</span><br><span class="line">lrwxrwxrwx 1 root root 72 Oct 15 23:08 CTDTMMF65E3BMSWDBORDZWNKMZ -&gt; ../bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a/diff</span><br><span class="line">lrwxrwxrwx 1 root root 77 Oct 15 23:08 EIFKNFA4XWG2Y23M42BB3UOAR3 -&gt; ../bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a-init/diff</span><br><span class="line">lrwxrwxrwx 1 root root 72 Oct 15 22:57 L6L4ECZTQI2TRRFXXFMG7IS4HJ -&gt; ../a20939fbb9a6e0bd5b185f293453748b67e89927b3ebad29a9e65acfbc684df4/diff</span><br><span class="line">lrwxrwxrwx 1 root root 72 Oct 15 22:57 LX6ZEQ54QRUVOVLE36C5Q4R3HL -&gt; ../049991c5c6099d5999c3d4c186cb3cc4ba568c31e6420fa72dff87d82b29fcb9/diff</span><br><span class="line">lrwxrwxrwx 1 root root 72 Oct 15 22:57 SMLOMKRFYWOKNGUBP5WDV3SRSP -&gt; ../93d168d9964b1a43c296b0dbc9caadefe079bccac58add92d07f883d16734610/diff</span><br><span class="line">lrwxrwxrwx 1 root root 72 Oct 15 22:57 YQCFTHN4NK637K6MG6JPWJLK2T -&gt; ../35df5518615bb8c17558526dd1ce0ef2eab8d562129be3ec3b32831b1c41f827/diff</span><br><span class="line">lrwxrwxrwx 1 root root 72 Oct 15 22:57 ZUO6UAVQPN3PQDP2LMW4DBLHAX -&gt; ../514dda44fa241d5bdc1cf5973a675161aebf77e7c47e9d20df0cb66a7fa8bf46/diff</span><br><span class="line">lrwxrwxrwx 1 root root 72 Oct 15 22:57 ZZK7WDD5HNYHP3PKBTF54O666R -&gt; ../0c11dee18f1e2556cec649be416d7b4221ddd6d224449b547ca983651edf4391/diff</span><br></pre></td></tr></table></figure><p>全部都是到各层<code>diff</code>之间的软链接，以<code>CTDTMMF65E3BMSWDBORDZWNKMZ</code>为例子，观察一下这个链接目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-9-centos l]<span class="comment"># cd CTDTMMF65E3BMSWDBORDZWNKMZ/</span></span><br><span class="line">[root@VM-4-9-centos CTDTMMF65E3BMSWDBORDZWNKMZ]<span class="comment"># ll</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 3 root root 4096 Oct 15 23:08 etc</span><br></pre></td></tr></table></figure><p>只有一个<code>etc</code>目录，<code>再查看EIFKNFA4XWG2Y23M42BB3UOAR3</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-9-centos EIFKNFA4XWG2Y23M42BB3UOAR3]<span class="comment"># ll</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 4 root root 4096 Oct 15 23:08 dev</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 15 23:08 etc</span><br></pre></td></tr></table></figure><p>事实上，每层的<code>diff</code>即是文件系统在统一挂载时的挂载点，我们可以再进一步地<strong>观察最后一层</strong>，<code>ZZK7WDD5HNYHP3PKBTF54O666R</code>的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 bin</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct  3 17:15 boot</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 dev</span><br><span class="line">drwxr-xr-x 30 root root 4096 Oct 11 08:00 etc</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct  3 17:15 home</span><br><span class="line">drwxr-xr-x  8 root root 4096 Oct 11 08:00 lib</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 lib64</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 media</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 mnt</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 opt</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct  3 17:15 proc</span><br><span class="line">drwx------  2 root root 4096 Oct 11 08:00 root</span><br><span class="line">drwxr-xr-x  3 root root 4096 Oct 11 08:00 run</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 sbin</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct 11 08:00 srv</span><br><span class="line">drwxr-xr-x  2 root root 4096 Oct  3 17:15 sys</span><br><span class="line">drwxrwxrwt  2 root root 4096 Oct 11 08:00 tmp</span><br><span class="line">drwxr-xr-x 11 root root 4096 Oct 11 08:00 usr</span><br><span class="line">drwxr-xr-x 11 root root 4096 Oct 11 08:00 var</span><br></pre></td></tr></table></figure><p>可以发现这一层仿佛就是一个Centos了,这些文件是只读的，每层具体的文件存放在层标识符下的<code>diff</code>目录下。</p><p>进入到第二个目录<code>0c11dee18f1e2556cec649be416d7b4221ddd6d224449b547ca983651edf4391</code>目录下。查看目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-9-centos 0c11dee18f1e2556cec649be416d7b4221ddd6d224449b547ca983651edf4391]<span class="comment"># tree -L 2</span></span><br><span class="line">.</span><br><span class="line">|-- committed</span><br><span class="line">|-- diff</span><br><span class="line">|   |-- bin</span><br><span class="line">|   |-- boot</span><br><span class="line">|   |-- dev</span><br><span class="line">|   |-- etc</span><br><span class="line">|   |-- home</span><br><span class="line">|   |-- lib</span><br><span class="line">|   |-- lib64</span><br><span class="line">|   |-- media</span><br><span class="line">|   |-- mnt</span><br><span class="line">|   |-- opt</span><br><span class="line">|   |-- proc</span><br><span class="line">|   |-- root</span><br><span class="line">|   |-- run</span><br><span class="line">|   |-- sbin</span><br><span class="line">|   |-- srv</span><br><span class="line">|   |-- sys</span><br><span class="line">|   |-- tmp</span><br><span class="line">|   |-- usr</span><br><span class="line">|   `-- var</span><br><span class="line">`-- link</span><br><span class="line"></span><br><span class="line">20 directories, 2 files</span><br></pre></td></tr></table></figure><p>进入第一个目录<code>049991c5c6099d5999c3d4c186cb3cc4ba568c31e6420fa72dff87d82b29fcb9</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-9-centos 049991c5c6099d5999c3d4c186cb3cc4ba568c31e6420fa72dff87d82b29fcb9]<span class="comment"># tree -L 2</span></span><br><span class="line">.</span><br><span class="line">|-- committed</span><br><span class="line">|-- diff</span><br><span class="line">|   `-- data</span><br><span class="line">|-- link</span><br><span class="line">|-- lower</span><br><span class="line">`-- work</span><br><span class="line"></span><br><span class="line">[root@VM-4-9-centos 049991c5c6099d5999c3d4c186cb3cc4ba568c31e6420fa72dff87d82b29fcb9]<span class="comment">#   </span></span><br><span class="line">cat lower </span><br><span class="line">l/ZUO6UAVQPN3PQDP2LMW4DBLHAX:l/YQCFTHN4NK637K6MG6JPWJLK2T:l/L6L4ECZTQI2TRRFXXFMG7IS4HJ:l/ZZK7WDD5HNYHP3PKBTF54O666R</span><br><span class="line">[root@VM-4-9-centos 049991c5c6099d5999c3d4c186cb3cc4ba568c31e6420fa72dff87d82b29fcb9]<span class="comment">#  </span></span><br><span class="line">cat link </span><br><span class="line">LX6ZEQ54QRUVOVLE36C5Q4R3HL</span><br></pre></td></tr></table></figure><p><code>link</code>文件描述了该层标识符的精简版，而<code>lower</code>文件描述了层序的组织关系。</p><p>启动一个容器，查看挂载情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount | grep overlay</span><br><span class="line">overlay on / <span class="built_in">type</span> overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/EIFKNFA4XWG2Y23M42BB3UOAR3:/var/lib/docker/overlay2/l/SMLOMKRFYWOKNGUBP5WDV3SRSP:/var/lib/docker/overlay2/l/LX6ZEQ54QRUVOVLE36C5Q4R3HL:/var/lib/docker/overlay2/l/ZUO6UAVQPN3PQDP2LMW4DBLHAX:/var/lib/docker/overlay2/l/YQCFTHN4NK637K6MG6JPWJLK2T:/var/lib/docker/overlay2/l/L6L4ECZTQI2TRRFXXFMG7IS4HJ:/var/lib/docker/overlay2/l/ZZK7WDD5HNYHP3PKBTF54O666R,upperdir=/var/lib/docker/overlay2/bf88c56ff03c6eee19d8a2ece7c69c3</span><br></pre></td></tr></table></figure><p>而在overlay2文件夹中会有2层：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drwx--x--- 5 root root 4096 Oct 15 23:08 bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a</span><br><span class="line">drwx--x--- 4 root root 4096 Oct 15 23:08 bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a-init</span><br><span class="line"></span><br><span class="line"> CTDTMMF65E3BMSWDBORDZWNKMZ -&gt; ../bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a/diff</span><br><span class="line">lrwxrwxrwx 1 root root 77 Oct 15 23:08 EIFKNFA4XWG2Y23M42BB3UOAR3 -&gt; ../bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a-init/diff</span><br></pre></td></tr></table></figure><p>这一层是动态生成的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-9-centos bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a-init]<span class="comment"># tree -L 2</span></span><br><span class="line">.</span><br><span class="line">|-- committed</span><br><span class="line">|-- diff</span><br><span class="line">|   |-- dev</span><br><span class="line">|   `-- etc</span><br><span class="line">|-- link</span><br><span class="line">|-- lower</span><br><span class="line">`-- work</span><br><span class="line">    `-- work</span><br><span class="line"></span><br><span class="line">5 directories, 3 files</span><br></pre></td></tr></table></figure><p>主要是一些配置文件构成的层。</p><p>而不带init后缀的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- diff</span><br><span class="line">|   |-- etc</span><br><span class="line">|   `-- root</span><br><span class="line">|-- link</span><br><span class="line">|-- lower</span><br><span class="line">|-- merged</span><br><span class="line">|   |-- bin</span><br><span class="line">|   |-- boot</span><br><span class="line">|   |-- data</span><br><span class="line">|   |-- dev</span><br><span class="line">|   |-- etc</span><br><span class="line">|   |-- home</span><br><span class="line">|   |-- lib</span><br><span class="line">|   |-- lib64</span><br><span class="line">|   |-- media</span><br><span class="line">|   |-- mnt</span><br><span class="line">|   |-- opt</span><br><span class="line">|   |-- proc</span><br><span class="line">|   |-- root</span><br><span class="line">|   |-- run</span><br><span class="line">|   |-- sbin</span><br><span class="line">|   |-- srv</span><br><span class="line">|   |-- sys</span><br><span class="line">|   |-- tmp</span><br><span class="line">|   |-- usr</span><br><span class="line">|   `-- var</span><br><span class="line">`-- work</span><br><span class="line">    `-- work</span><br><span class="line">    </span><br><span class="line">cat lower </span><br><span class="line">l/EIFKNFA4XWG2Y23M42BB3UOAR3:l/SMLOMKRFYWOKNGUBP5WDV3SRSP:l/LX6ZEQ54QRUVOVLE36C5Q4R3HL:l/ZUO6UAVQPN3PQDP2LMW4DBLHAX:l/YQCFTHN4NK637K6MG6JPWJLK2T:l/L6L4ECZTQI2TRRFXXFMG7IS4HJ:l/ZZK7WDD5HNYHP3PKBTF54O666R</span><br></pre></td></tr></table></figure><p>这个目录结构与与底层的centos相像，标识符多了一个文件夹<code>merged</code>，而与底层的<code>0c11dee18f1e2556cec649be416d7b4221ddd6d224449b547ca983651edf4391</code>，的<code>diff</code>文件夹相似，它正是容器的可读可写层。回头来观察overlay2联合挂载情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount | grep overlay</span><br><span class="line">overlay on / <span class="built_in">type</span> overlay overlay on / <span class="built_in">type</span> overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/EIFKNFA4XWG2Y23M42BB3UOAR3:/var/lib/docker/overlay2/l/SMLOMKRFYWOKNGUBP5WDV3SRSP:/var/lib/docker/overlay2/l/LX6ZEQ54QRUVOVLE36C5Q4R3HL:/var/lib/docker/overlay2/l/ZUO6UAVQPN3PQDP2LMW4DBLHAX:/var/lib/docker/overlay2/l/YQCFTHN4NK637K6MG6JPWJLK2T:/var/lib/docker/overlay2/l/L6L4ECZTQI2TRRFXXFMG7IS4HJ:/var/lib/docker/overlay2/l/ZZK7WDD5HNYHP3PKBTF54O666R,upperdir=/var/lib/docker/overlay2/bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a/diff,workdir=/var/lib/docker/overlay2/bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a/work)</span><br></pre></td></tr></table></figure><p>overlay2将<code>lowerdir</code>、<code>upperdir</code>、<code>workdir</code>联合挂载，形成最终的<code>merged</code>挂载点，其中<code>lowerdir</code>是镜像只读层，<code>upperdir</code>是容器可读可写层，<code>workdir</code>是执行涉及修改<code>lowerdir</code>执行<code>copy_up</code>操作的中转层</p><p>在容器内创建一个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@e96786091371:/data<span class="comment"># cat /root/hello </span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>观测镜像的可读写层：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-9-centos root]<span class="comment"># pwd</span></span><br><span class="line">/var/lib/docker/overlay2/bf88c56ff03c6eee19d8a2ece7c69c3d903b56350f4bef83d5ae5918143c320a/diff/root</span><br><span class="line">[root@VM-4-9-centos root]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 6 Oct 15 23:30 hello</span><br></pre></td></tr></table></figure><p>可以发现，新创建的文件被存在了可读写层，而此时如果我们通过以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit CONTAINER_ID</span><br></pre></td></tr></table></figure><p>提交容器更改，则会将该容器的当前可读可写层转化为只读层，更新镜像。镜像大体上，可以认为是多个只读层通过某些特定的方式组织起来，而容器则是在其之上的一个可读写层，我们可以保存一个可读写层的更改，将它转化为一个只读层。</p><h4 id="overlay2和overlay1的区别："><a href="#overlay2和overlay1的区别：" class="headerlink" title="overlay2和overlay1的区别："></a>overlay2和overlay1的区别：</h4><ol><li><p>overlay实际上通过<strong>硬链接在层和层之间共享文件</strong>，而<strong>overlay2的每一层都是完全独立</strong>的，通过每层的 <code>lower</code>文件。如果容器启动的话，它会将多层lowerdir 挂载到它的rootfs。</p><p>linux系统会限制系统中硬链接的数量，如果用户下载了很多容器，那么docker就会在系统中到处创建硬链接，达到最大值后将无法创建新容器。</p></li><li><p>overlay2中<code>link</code>文件描述了该层标识符的精简版，在overlay2每层的内容都是不一样的，<code>diff</code>是文件系统的<strong>统一挂载点</strong>,<code>link</code>文件描述的是<strong>该层的标识符</strong>，<code>lower</code>文件描述了<strong>层与层之间的组织关系</strong>，overlay2是将底层多个lowerdir和upperdir和workdir联合挂载，形成最终的merged挂载点。</p></li><li><p>overlay2为什么比overlay不消耗inode，根本原因在于那些文件夹，每层的root目录内存放的都是<strong>完整的rootfs文件夹</strong>，但它们都是新建出来的，它们inode都不一样，所以在overlay下一个容器镜像层数越多，占用的inode就越多。</p></li></ol><p>参考：</p><p><a href="https://www.cnblogs.com/robinunix/p/12157910.html">https://www.cnblogs.com/robinunix/p/12157910.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/41958018">https://zhuanlan.zhihu.com/p/41958018</a></p><p><a href="https://zhuanlan.zhihu.com/p/374924046">https://zhuanlan.zhihu.com/p/374924046</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、什么是Docker镜像&quot;&gt;&lt;a href=&quot;#一、什么是Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Docker镜像&quot;&gt;&lt;/a&gt;一、什么是Docker镜像&lt;/h2&gt;&lt;p&gt;Docker镜像是一个&lt;strong&gt;只读的Docker容器模板&lt;/strong&gt;，含有启动Docker容器所需的文件系统结构及其内容，是启动一个Docker容器的基础。Docker镜像的&lt;strong&gt;文件内容以及一些运行Docker容器的配置文件&lt;/strong&gt;组成了Docker容器的静态文件系统运行环境―—&lt;code&gt;rootfs&lt;/code&gt;。Docker镜像是Docker容器的静态视角，Docker容器是Docker镜像的运行状态。&lt;/p&gt;
&lt;h3 id=&quot;rootfs&quot;&gt;&lt;a href=&quot;#rootfs&quot; class=&quot;headerlink&quot; title=&quot;rootfs&quot;&gt;&lt;/a&gt;rootfs&lt;/h3&gt;&lt;p&gt;rootfs是Docker容器在启动时内部进程可见的文件系统，即Docker容器的根目录。&lt;strong&gt;rootfs通常包含一个操作系统运行所需的文件系统&lt;/strong&gt;，例如可能包含典型的类Unix操作系统中的目录系统，如/dev、/proc、/bin、/etc、/lib、/usr、/tmp及运行Docker容器所需的配置文件、工具等。&lt;/p&gt;
&lt;p&gt;传统的Linux操作系统内核启动时，首先挂载一个&lt;strong&gt;只读( read-only)&lt;/strong&gt;的rootfs，当系统检测其完整性之后，再将其切换为&lt;strong&gt;读写( read-write)&lt;/strong&gt;模式。而在Docker架构中，当Docker daemon为Docker容器挂载rootfs时，沿用了Linux内核启动时的方法，即将rootfs设为只读模式。在挂载完毕之后，利用&lt;strong&gt;联合挂载( union mount)&lt;/strong&gt;技术在已有的只读rootfs上再挂载一个读写层。这样，&lt;strong&gt;可读写层处于Docker容器文件系统的最顶层，其下可能联合挂载多个只读层&lt;/strong&gt;，只有在Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读写层，并隐藏只读层中的老版本文件。&lt;/p&gt;
&lt;h3 id=&quot;主要特点&quot;&gt;&lt;a href=&quot;#主要特点&quot; class=&quot;headerlink&quot; title=&quot;主要特点&quot;&gt;&lt;/a&gt;主要特点&lt;/h3&gt;&lt;h4 id=&quot;分层&quot;&gt;&lt;a href=&quot;#分层&quot; class=&quot;headerlink&quot; title=&quot;分层&quot;&gt;&lt;/a&gt;分层&lt;/h4&gt;&lt;p&gt;Docker镜像是采用分层的方式构建的，每个镜像都由一系列的“镜像层”组成。分层结构是Docker镜像如此轻量的重要原因，当需要修改容器镜像内的某个文件时，&lt;strong&gt;只对处于最上方的读写层进行变动&lt;/strong&gt;，不覆写下层已有文件系统的内容，已有文件在只读层中的原始版本仍然存在，但会&lt;strong&gt;被读写层中的新版文件所隐藏&lt;/strong&gt;。当使用docker commit提交这个修改过的容器文件系统为一个新的镜像时，&lt;strong&gt;保存的内容仅为最上层读写文件系统中被更新过的文件&lt;/strong&gt;。分层达到了&lt;strong&gt;在不同镜像之间共享镜像层的效果&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;写时复制&quot;&gt;&lt;a href=&quot;#写时复制&quot; class=&quot;headerlink&quot; title=&quot;写时复制&quot;&gt;&lt;/a&gt;写时复制&lt;/h4&gt;&lt;p&gt;Docker镜像使用了&lt;strong&gt;写时复制( copy-on-write）&lt;/strong&gt;策略，在多个容器之间&lt;strong&gt;共享镜像&lt;/strong&gt;，每个容器在启动的时候并不需要单独复制一份镜像文件，而是&lt;strong&gt;将所有镜像层以只读的方式挂载到一个挂载点&lt;/strong&gt;，再在上面覆盖一个&lt;strong&gt;可读写的容器层&lt;/strong&gt;。在未更改文件内容时，所有容器共享同一份数据，只有在Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读写层，并隐藏只读层中的老版本文件。写时复制配合分层机制&lt;strong&gt;减少了镜像对磁盘空间的占用和容器启动时间。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker资源限制和底层技术</title>
    <link href="http://yoursite.com/2021/10/10/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6%E5%92%8C%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2021/10/10/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6%E5%92%8C%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/</id>
    <published>2021-10-10T12:14:47.000Z</published>
    <updated>2021-10-10T13:34:05.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、资源限制"><a href="#一、资源限制" class="headerlink" title="一、资源限制"></a>一、资源限制</h2><p>一个docker host. 上会运行若干容器，每个容器都需要CPU、内存和IO资源。对于KVM、VMware 等虚拟化技术，用户可以控制分配多少CPU、内存资源给每个虚拟机。对于容器，Docker 也提供了类似的机制避免某个容器因占用太多资源而影响其他容器乃至整个host<br>的性能。</p><h3 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h3><p>与操作系统类似，容器可使用的内存包括两部分:物理内存和 swap。Docker通过下面两组参数来控制容器内存的使用量。</p><ul><li><code>-m</code>或<code>--memory</code>:设置内存的使用限额，例如100MB，2GB。</li><li><code>--memory-swap</code>:设置内存+swap的使用限额。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许容器最多使用200MB内存和100MB的swap,默认为-1，对资源没有限制</span></span><br><span class="line">docker run -m 200M --memory-swap=300M ubuntu</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过progrium/stress镜像学习如何为容器分配内存，这个镜像可以用来对容器执行压力测试</span></span><br><span class="line">docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 280M</span><br><span class="line"><span class="comment"># --vm1:启动1个内存工作线程。</span></span><br><span class="line"><span class="comment"># --vm-bytes 280M:每个线程分配280MB内存。</span></span><br></pre></td></tr></table></figure><p>280MB在可分配的范围（300MB），所以工作线程能够正常工作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)分配280MB内存。</span><br><span class="line">(2)释放280MB内存。</span><br><span class="line">(3)再分配280MB内存。</span><br><span class="line">(4)再释放280MB内存。</span><br><span class="line">(5)一直循环.....</span><br></pre></td></tr></table></figure><p>如果工作线程分配超过300MB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 310M</span><br></pre></td></tr></table></figure><p>分配的内存超过限额，stress 线程报错，容器退出。</p><p>如果在启动容器时只指定-m而不指定-memoryswap, 那么-memory-swap <strong>默认为-m的两倍</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -m 200M ubuntu</span><br></pre></td></tr></table></figure><p>容器使用200MB的物理内存和200MB的swap。</p><h3 id="CPU限额"><a href="#CPU限额" class="headerlink" title="CPU限额"></a>CPU限额</h3><p><strong>默认设置下，所有容器可以平等地使用host CPU资源并且没有限制</strong>。</p><p><strong>Docker可以通过-c或–cpu-shares设置容器使用CPU的权重。如果不指定，默认值为1024。</strong></p><p>与内存限额不同，通过-c设置的cpu share 并不是CPU资源的绝对数量，而是一个相对的权重值。某个容器最终能分配到的CPU资源取决于它的cpu share占所有容器cpu share总和的比例。</p><p>通过cpu share可以设置容器使用CPU的优先级。</p><p>比如在host中启动了两个容器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name <span class="string">&quot;cont_A&quot;</span> -c 1024 ubuntu </span><br><span class="line">docker run --name <span class="string">&quot;cont_B&quot;</span> -c 512 ubuntu</span><br></pre></td></tr></table></figure><p><strong>containerA的cpu share是containerB 的两倍。当两个容器都需要CPU资源时，containerA可以得到的CPU是containerB 的两倍。</strong></p><p><strong>权重分配CPU只会发生在CPU资源紧张的情况下。如果containerA处于空闲状态，这时，为了充分利用CPU资源，containerB 也可以分配到全部可用的CPU.</strong></p><p>用progrium/stress 做实验。</p><ol><li><p>启动(container_ A, cpu share为1024</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name <span class="string">&quot;cont_A&quot;</span> -it -c 1024  progrium/stress --cpu 1</span><br></pre></td></tr></table></figure><p>–cpu用来<strong>设置工作线程的数量</strong>。因为当前host 只有1颗CPU,所以一个工作线程就能将CPU压满。如果host有多颗CPU,则需要相应增加–cpu的数量。</p></li><li><p>启动(container_B, cpu share为512</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name <span class="string">&quot;cont_B&quot;</span> -it -c 512  progrium/stress --cpu 1</span><br></pre></td></tr></table></figure></li><li><p>使用Top，查看CPU的使用情况：<strong>containerA消耗的CPU是containerB 的两倍。</strong></p></li><li><p>现在暂停containerA：containerB在containerA空闲的情况下能够用满整颗CPU。</p></li></ol><h3 id="Block-IO-带宽限额"><a href="#Block-IO-带宽限额" class="headerlink" title="Block IO 带宽限额"></a>Block IO 带宽限额</h3><p>Block IO可以限制容器是磁盘的读写，docker 可通过设置<strong>权重</strong>、限制<strong>bps</strong>和<strong>iops</strong> 的方式控制容器读写磁盘的带宽。</p><ol><li><p><strong>权重</strong></p><p>默认情况下，所有容器能平等地读写磁盘，可以通过设置<code>-blkio-weight</code>参数来改变容器block Io的优先级。<br><code>-blkio-weight</code>与–cpu-shares 类似，设置的是相对权重值，默认为<strong>500</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">containerA 读写磁盘的带宽是containerB 的两倍。</span><br><span class="line">docker run -it --name cont_A --blkip-weight 600 ubuntu</span><br><span class="line">docker run -it --name cont_B --blkip-weight 300 ubuntu</span><br></pre></td></tr></table></figure></li><li><p><strong>限制bps和iops</strong></p><p><strong>bps</strong>是 byte per second ，每秒读写的数量,<strong>iops</strong>是 io per second ，每秒IO的次数</p><ul><li><p><code>--device-read-bps</code>:限制读某个设备的bps.</p></li><li><p><code>--devce-write-bps</code>:限制写某个设备的bps.</p></li><li><p><code>--device- read-iops</code>:限制读某个设备的iops.</p></li><li><p><code>--device-write-iops</code>: 限制写某个设备的iops。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#限制容器写/dev/sda 的速率为30MB/s:</span></span><br><span class="line">docker run -it --device-write-bps /dev/sda:30MB ubuntu</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、底层技术"><a href="#二、底层技术" class="headerlink" title="二、底层技术"></a>二、底层技术</h2><p>cgroup和 namespace是最重要的两种技术。cgroup实现资源限额，namespace实现资源隔离。</p><h3 id="cgroup"><a href="#cgroup" class="headerlink" title="cgroup"></a>cgroup</h3><p>cgroup全称 <strong>Control Group</strong>。Linux操作系统通过cgroup可以设置进程使用CPU、内存和IO资源的限额。前面的—cpu-shares、-m、–device-write-bps实际上就是在配置cgroup。</p><p>cgroup可以在<code>/sys/fs/cgroup</code>找到。</p><p>如果创建cpu的限制，docker会在<code>/sys/fs/cgroup/cpu/docker</code>目录中为每一个容器创建一个cgroup目录，以容器的ID命名。这个目录中会包含所有cpu相关的cgroup配置。</p><p>同样的，<code>/sys/fs/cgroup/memory/docker</code>和<code>/sys/fs/cgroup/blkio/docker</code>中保存的是内存以及Block IO的配置。</p><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>在每个容器中，我们都可以看到文件系统、网卡等资源，这些资源看上去是容器自己的。拿网卡来说，每个容器都会认为自己有一块独立的网卡，即使host 上只有一块物理网卡。这种方式使得容器更像一个独立的计算机。</p><p>Linux实现这种方式的技术是namespace。namespace管理着host中全局唯一的资源，并可以让每个容器都觉得<strong>只有自己在使用它</strong>。namespace实现了容器间资源的隔离。</p><p>Linux使用了6种 namespace，分别对应6种资源:Mount、UTS、IPC、PID、Network和User。</p><table><thead><tr><th>namespace</th><th>隔离内容</th></tr></thead><tbody><tr><td>Mount</td><td>让容器拥有整个文件系统。容器有自己的/根目录，可以mount和umount</td></tr><tr><td>UTS</td><td>让容器有自己的主机名，默认是容器的短ID，用过-h或–hostname设置</td></tr><tr><td>IPC</td><td>让容器拥有自己的共享内存和信号量实现进程间通信</td></tr><tr><td>PID</td><td>容器在host中以进程形式运行，ps axf在主机中可以看到容器进程，所有进程都挂载dockerd下，每个容器内的PID都不同于host的中的PID</td></tr><tr><td>Network</td><td>容器拥有自己独立的网卡、IP、路由等资源</td></tr><tr><td>User</td><td>host 不能看到容器创建的用户</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、资源限制&quot;&gt;&lt;a href=&quot;#一、资源限制&quot; class=&quot;headerlink&quot; title=&quot;一、资源限制&quot;&gt;&lt;/a&gt;一、资源限制&lt;/h2&gt;&lt;p&gt;一个docker host. 上会运行若干容器，每个容器都需要CPU、内存和IO资源。对于KVM、VMware 等虚拟化技术，用户可以控制分配多少CPU、内存资源给每个虚拟机。对于容器，Docker 也提供了类似的机制避免某个容器因占用太多资源而影响其他容器乃至整个host&lt;br&gt;的性能。&lt;/p&gt;
&lt;h3 id=&quot;内存限制&quot;&gt;&lt;a href=&quot;#内存限制&quot; class=&quot;headerlink&quot; title=&quot;内存限制&quot;&gt;&lt;/a&gt;内存限制&lt;/h3&gt;&lt;p&gt;与操作系统类似，容器可使用的内存包括两部分:物理内存和 swap。Docker通过下面两组参数来控制容器内存的使用量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;或&lt;code&gt;--memory&lt;/code&gt;:设置内存的使用限额，例如100MB，2GB。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--memory-swap&lt;/code&gt;:设置内存+swap的使用限额。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 允许容器最多使用200MB内存和100MB的swap,默认为-1，对资源没有限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -m 200M --memory-swap=300M ubuntu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过progrium/stress镜像学习如何为容器分配内存，这个镜像可以用来对容器执行压力测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 280M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --vm1:启动1个内存工作线程。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --vm-bytes 280M:每个线程分配280MB内存。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;280MB在可分配的范围（300MB），所以工作线程能够正常工作：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1)分配280MB内存。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2)释放280MB内存。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3)再分配280MB内存。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(4)再释放280MB内存。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(5)一直循环.....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果工作线程分配超过300MB&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker网络</title>
    <link href="http://yoursite.com/2021/10/10/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2021/10/10/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E7%BD%91%E7%BB%9C/</id>
    <published>2021-10-10T12:14:47.000Z</published>
    <updated>2021-10-12T15:18:09.801Z</updated>
    
    <content type="html"><![CDATA[<p>Docker安装时会自动在 host 上创建三个网络，none、host、bridge我们可用docker network ls命令查看。</p><h2 id="一、Docker网络架构"><a href="#一、Docker网络架构" class="headerlink" title="一、Docker网络架构"></a>一、Docker网络架构</h2><p>Docker在1.9版本中引入了一整套的<code>docker network</code>子命令和跨主机网络支持。这允许用户可以根据他们应用的拓扑结构创建虚拟网络并将容器接人其所对应的网络。其实，早在Docker1.7版本中，网络部分代码就已经被抽离并单独成为了Docker的网络库，即<code>libnetwork</code>。在此之后，容器的网络模式也被抽象变成了统一接口的驱动。</p><p>为了标准化网络驱动的开发步骤和支持多种网络驱动，Docker公司在libnetwork中使用了<strong>CNM ( Container Network Model )</strong>。CNM定义了构建容器虚拟化网络的模型，同时还提供了可以用于开发多种网络驱动的标准化接口和组件。</p><p>libnetwork和Docker daemon和各个网络驱动关系：</p><img src="/2021/10/10/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E7%BD%91%E7%BB%9C/Docker网络虚拟化架构.png" alt="image-20211010223218172" style="zoom:67%;"><p>Docker daemon通过调用<strong>libnetwork对外提供的API</strong>完成网络的创建和管理等功能。libnetwork中则使用了<strong>CNM</strong>来完成网络功能的提供。而CNM中主要有<strong>沙盒( sandbox )、端点（ endpoint）和网络( network)</strong>这3种组件。libnetwork中内置的5种驱动则为libnetwork提供了不同类型的网络服务。下面分别对CNM中的3个核心组件和libnetwork中的5种内置驱动进行介绍。</p><p><strong>CNM的核心组件</strong>：</p><ul><li><strong>沙盒</strong>：一个沙盒包含了<strong>一个容器网络栈的信息</strong>。沙盒可以对<strong>容器的接口、路由和DNS设置等进行管理</strong>。沙盒的实现可以是Linux network namespace 、FreeBSD Jail或者类似的机制。一个沙盒可以有多个端点和多个网络。</li><li><strong>端点:</strong>一个端点可以加入一个沙盒和一个网络。端点的实现可以是<code>veth pair</code> , <code>Open vSwitch</code>内部端口或者相似的设备。一个端点只可以属于一个网络并且只属于一个沙盒。</li><li><strong>网络</strong>:一个网络是<strong>一组可以直接互相联通的端点</strong>。网络的实现可以是Linux bridge、VLAN。一个网络包含多个端点。</li></ul><p><strong>5种内置驱动</strong>：</p><ul><li><strong>bridge驱动</strong>。Docker的默认设置，这个驱动，libnetwork将创建出来的Docker容器连接到Docker网桥上作为最常规的模式, bridge模式已经可以满足Docker容器最基本的使用需求了。然而其与外界通信使用<strong>NAT</strong>,增加了通信的复杂性,在复杂场景下使用会有诸多限制。</li><li><strong>host驱动</strong>。libnetwork将不为Docker容器创建网络协议栈，即<strong>不会创建独立的network namespace</strong>。Docker容器中的进程处于宿主机的网络环境中，相当于Docker容器和宿主机共用同一个network namespace,使用宿主机的网卡、IP和端口等信息。但是，容器其他方面还是和宿主机隔离的。host模式很好地解决了容器与外界通信的地址转换问题，可以直接使用宿主机的IP进行通信，<strong>不存在虚拟化网络带来的额外性能负担</strong>。但是host驱动也<strong>降低了容器与容器之间、容器与宿主机之间网络层面的隔离性，引起网络资源的竞争与冲突</strong>。因此可以认为host驱动适用于对于容器集群规模不大的场景。</li><li><strong>overlay驱动</strong>。此驱动采用IETF标准的VXLAN方式，并且是VXLAN中被普遍认为最适合大规模的云计算虚拟化环境的SDN controller模式。在使用的过程中，需要一个额外的配置存储服务，例如Consul、etcd或ZooKeeper。还需要在启动Docker daemon的的时候额外添加参数来指定所使用的配置存储服务地址。</li><li><strong>remote驱动</strong>。这个驱动实际上并未做真正的网络服务实现，而是调用了<strong>用户自行实现的网络驱动插件</strong>，使libnetwork实现了驱动的可插件化，更好地满足了用户的多种需求。用户只要根据libnetwork提供的协议标准，实现其所要求的各个接口并向Docker daemon进行注册。</li><li><strong>null驱动</strong>。使用这种驱动的时候，Docker容器拥有自己的network namespace，但是并不为容器进行任何网络配置。也就是说，这个容器除了network namespace自带的<strong>loopback网卡</strong>外，没有其他任何网卡、IP、路由等信息，需要用户为Docker容器添加网卡、配置IP等。这种模式如果不进行特定的配置是无法正常使用的，但是优点也非常明显，它给了用户最大的自由度来自定义容器的网络环境。</li></ul><h2 id="二、bridge驱动"><a href="#二、bridge驱动" class="headerlink" title="二、bridge驱动"></a>二、bridge驱动</h2><h3 id="docker0网桥"><a href="#docker0网桥" class="headerlink" title="docker0网桥"></a>docker0网桥</h3><p>当Host在安装完docker之后，宿主机上通过ifconfig就会发现有一块docker0的网卡，宿主机上也会在内核路由表上添加一条到达相应网络的静态路由。</p><p>使用docker创建出的容器，可以看到它有2块网卡<strong>lo和eth0</strong>。lo的回环网卡，<code>eth0</code>是容器与外界通信的网卡，他的IP与宿主机上网桥docker0在同一个网段。</p><p>在控制台查看宿主机时，会发现有一块<code>veth</code>网卡，例如<code>veth043f86</code>,而<code>veth pair</code>成对出现，用来连接2个network namespace，所以另外一个就是<code>eth0</code>。容器的eth0与宿主机docker0相连，而veth也是与宿主机相连，<strong>docker0就是一个网桥</strong>。</p><img src="/2021/10/10/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E7%BD%91%E7%BB%9C/Docker网络bridge模式.png" alt="image-20211010225439264" style="zoom:67%;"><p>Docker bridge模式创建了<code>docker0</code>网桥，并以<code>veth pair</code>连接容器网络，容器中数据通过docker0网桥转发到<code>eth0</code>网卡中。</p><p>这里网桥的概念等同于交换机，为连在其上的设备转发数据帧。网桥上的<strong>veth网卡设备相当于交换机上的端口</strong>，可以将多个容器或虚拟机连接在其上，这些端口工作在二层，所以是不需要配置IP信息的。docker0网桥就为连在其上的容器转发数据帧,使得同一台宿主机上的Docker容器之间可以相互通信。读者应该注意到docker0既然是二层设备，其上怎么也配置了IP呢?docker0是普通的Linux网桥，它是可以在上面配置IP的，可以认为其内部<strong>有一个可以用于配置IP信息的网卡接口</strong>。在Docker的桥接网络模式中，docker0的IP地址作为连于之上的容器的默认网关地址存在。<br>在Linux中，可以使用<code>brctl</code>命令查看和管理网桥（需要安装bridge-utils软件包）如查看本机上的Linux网桥以及其上的端口:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  brctl show</span><br></pre></td></tr></table></figure><p>dockero网桥是在<strong>Docker daemon启动时自动创建的</strong>，其IP默认为172.17.0.1/16，之后创建的Docker容器都会在dockero子网的范围内选取一个未占用的IP使用，并连接到dockero网桥上。</p><h3 id="iptables规则"><a href="#iptables规则" class="headerlink" title="iptables规则"></a>iptables规则</h3><p>Docker安装完成后，将默认在宿主机系统上增加一些iptables规则，以用于Docker容器和容器之间以及和外界的通信，可以使用<code>iptables-save</code>命令查看。其中nat表上的POSTROUTING链有这么一条规则:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-APOSTROUTING -s 172.17.0.0/16 ! -o dockero -j MASQUERADE</span><br></pre></td></tr></table></figure><p>这条规则关系着Docker容器和外界的通信，含义是将源地址为172.17.0.0/16的数据包（即Docker容器发出的数据)，当不是从dockero网卡发出时做<strong>SNAT</strong>(源地址转换，将IP包的源地址替换为相应网卡的地址)。这样一来，从Docker容器访问外网的流量，在外部看来就是从宿主机上发出的，外部感觉不到Docker容器的存在。</p><p>Docker的forward规则默认允许<strong>所有的外部IP访问容器</strong>，可以通过在filter的DOCKER链上添加规则来对外部的IP访问做出限制，如只允许源IP为8.8.8.8的数据包访问容器，需要添加如下规则:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I DOCKER -i docker0 ! -s 8.8.8.8 -j DROP</span><br></pre></td></tr></table></figure><p>Docker容器之间互相通信也受到iptables规则现在。同一宿主机上Docker容器默认连在docker0网桥上，同属一个子网，同时Docker daemon会在filter的FORWARD链中添加一条ACCEPT规则(–icc=true)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br></pre></td></tr></table></figure><p>当Docker daemon启动参数–icc（是否允许容器互相通信）设置为false，规则就会设置为DROP，通信被禁止，想让2个容器通信就需要在docker run时使用–link选项。</p><p>在Docker容器和外界通信的过程中，还涉及了数据包在多个网卡间的转发(如从dockero网卡到宿主机etho的转发)这需要内核将ip-forward功能打开,即将ip_forward系统参数设为1。Dockerdaemon启动的时候默认会将其设为1 ( –ip-forward=true )，也可以通过以下命令手动设置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  <span class="built_in">echo</span> 1 &gt; / proc/sys/net/ipv4/ip_forward</span><br><span class="line">$  cat /proclsys/net/ipv4/ip_forward</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>Docker daemon启动参数：</p><ul><li><code>--iptables</code>:是否允许Docker daemon<strong>设置宿主机的iptables规则</strong>,默认为true。</li><li><code>--icc</code>:是否允许Docker容器间相互通信，默认为true。true或false改变的是FORWARD链中相应iptables规则的策略(ACCEPT、DROP)。由于操作的是iptables规则，所以需要<code>--iptables=true</code>才能生效。<br><code>--ip-forward</code>:是否将ip_forward参数设为<strong>1</strong>，默认为true，用于打开Linux内核的ip<strong>数据包转发功能</strong>。</li></ul><h3 id="Docker容器的DNS和主机名"><a href="#Docker容器的DNS和主机名" class="headerlink" title="Docker容器的DNS和主机名"></a>Docker容器的DNS和主机名</h3><p>同一个Docker镜像可以启动很多个Docker容器，它们的主机名并不一样，也即是说主<strong>机名并非是被写入镜像中的</strong>。实际上容器中/etc目录下有3个文件是容器<strong>启动后被虚拟文件覆盖掉</strong>的，分别是<code>/etc/hostname</code>、<code>/etc/hosts</code>、<code>/etc/resolv.conf</code>，通过在容器中运行mount命令可以查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$ mount</span><br><span class="line">/devldisk/by-uuid/1fec...ebdf on /etc/hostname <span class="built_in">type</span> ext4...</span><br><span class="line">/dev/disk/by-uuid/1fec...ebdf on /etc/hosts <span class="built_in">type</span> ext4 ...</span><br><span class="line">/dev/disk/by-uuid/1fec...ebdf on /etc/resolv.conf <span class="built_in">type</span> ext4 ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样能解决主机名的问题，同时也能让DNS及时更新(改变resolv.conf )。通过Docker提供的参数进行相关设置，参数配置方式如下。</p><ul><li><code>-h HOSTNAME</code> 或者<code>--hostname=HOSTNAME</code>:设置容器的主机名，此名称会写在<code>/etc/hostname</code>和<code>/etc/hosts</code>文件中，也会在容器的bash提示符中看到。但是在外部，容器的主机名是无法查看的，不会出现在其他容器的hosts文件中，即使使用docker ps命令也查看不到。此参数是<strong>docker run命令的参数</strong>，而非Docker daemon的启动参数。</li><li><code>--dns=IP_ADDRESS...</code>:为容器配置DNS，写在<code>/etc/resolv.conf</code>中。该参数既可以在Dockerdaemon启动的时候设置也可以在docker run时设置，默认为8.8.8.8和8.8.4.4。</li></ul><p>这3个文件不会被docker commit保存，重启容器会导致修改失效。</p><h2 id="三、Docker网络配置原理"><a href="#三、Docker网络配置原理" class="headerlink" title="三、Docker网络配置原理"></a>三、Docker网络配置原理</h2><p>Docker1.6之前，Docker网络分为2个部分：<code>Docker daemon</code>的网络配置和<code>libcontainer</code>网络配置。Docker daemon的网络指daemon启动时，在主机系统上所做的网络设置，可以<strong>被所有Docker容器所使用</strong>;libcontainer的网络配置则<strong>针对具体的容器</strong>，是在使用docker run命令启动容器时，根据传入的参数为容器做的网络配置工作。</p><p>Docker1.7之后将所有网络相关代码抽离，整合为单独的库<code>libnetwork</code>,通过插件形式允许用户自己根据自己需求实现自己的network driver。</p><h3 id="Docker-daemon网络配置原理"><a href="#Docker-daemon网络配置原理" class="headerlink" title="Docker daemon网络配置原理"></a>Docker daemon网络配置原理</h3><h4 id="1-网络相关的参数"><a href="#1-网络相关的参数" class="headerlink" title="1.网络相关的参数"></a>1.网络相关的参数</h4><p>Docker daemon启动时，都会初始化自己的网络环境，为Docker容器提供网络通信服务。所有网络相关参数配置在bridgeConfig中：</p><ul><li><code>EnableIptables</code>:默认值为true，对应于Docker daemon启动时的–iptables参数，作用为是否允许Docker daemon在宿主机上<strong>添加iptables规则</strong>。</li><li><code>EnableIpMasq</code>:默认为true，对应于Docker daemon启动时的–ip-masq参数，作用为是否为Docker容器<strong>通往外界的包做SNAT</strong>，此变量即控制是否添加那条规则。</li><li><code>DefaultIp</code>:对应–ip参数，默认值为“0.0.0.0”。这个变量的作用为:当启动容器做端口映射时，将<strong>DefaultIp作为默认使用的IP地址</strong>。</li><li>EnableIpForward 、 Iface ,IP 、 FixedCIDR, InterContainerCommunication分别对应–ip-forward、–bridge、–bip、 –fixed-cidr、–icc。</li></ul><h4 id="2-初始化过程"><a href="#2-初始化过程" class="headerlink" title="2.初始化过程"></a>2.初始化过程</h4><h5 id="网络参数校验"><a href="#网络参数校验" class="headerlink" title="网络参数校验"></a>网络参数校验</h5><p>解析参数，并赋予相应的变量。检查互斥配置。</p><h5 id="是否初始化bridge驱动"><a href="#是否初始化bridge驱动" class="headerlink" title="是否初始化bridge驱动"></a>是否初始化bridge驱动</h5><p>参数校验完成后，接着判断Iface和disableNetworkBridge的值是否相同，Iface保存的是<strong>网桥名称</strong>，disableNetworkBridge是一个<strong>字符串常量</strong>，值为none。因此，若用户通过传过来的参数将Iface设为none，则config.DisableBridge变量为true，否则为false。</p><p>接下来会调用libnetwork.New()生成网络控制器controller，这个控制器主要用于<strong>创建和管理Network</strong>。然后会通过null驱动和host驱动来进行默认的网络创建。</p><p>最后会<strong>根据DisableBridge的值来决定bridge驱动是否进行初始化</strong>。若DisableNetwork为false,则运行initBridgeDriver函数。initBridgeDriver函数就是完成默认的bridge驱动的初始化任务。</p><h5 id="处理网桥参数"><a href="#处理网桥参数" class="headerlink" title="处理网桥参数"></a>处理网桥参数</h5><p>已经知道Docker网桥默认为docker0，也可以通过–bridge参数指定自定义的网桥。处理用户自定义网桥的流程分为如下两步。</p><p>(1)将用户指定的网桥名称传入Iface，若Iface不为空，则将其传赋值给bridgeName。如果Iface为空，则将bridgeName指定为DefaultNetworkBridge。DefaultNetworkBridge是一个字符串常量，为docker0，即表示当用户<strong>没有传入网桥参数时，启用默认网桥docker0。</strong></p><p>(2)首先，寻找Docker网桥名是否在宿主机上有对应的显卡，如果存在则返回其IP等信息，否则则<strong>从系统预定义的IP列表中分配一个可用IP</strong>。如果用户没有使用–bip来指定Docker网桥的IP地址，那么上面得到的IP会被<strong>写入ipamV4Conf结构体</strong>中，此结构体用于保存关于Docker网桥上有关IPV4的相关信息，如果用户进行了指定则会将指定的IP信息写入ipamV4Conf结构体中。接下来,如果FixedCIDR参数不为空，则将用户传入的网络范围写入到ipamV4Conf结构体中。如果默认的网关不为空,则将其信息写人到ipamV4Conf结构体中。然后,如果FixedCIDRv6,则将用户指定的IPV6网络范围和相关的IPV6配置信息写入ipamV6Conf中。最后使用上述信息作为参数调用controller.NewNetwork()函数，并指定bridge驱动来创建Docker网桥。</p><h5 id="创建网桥设置队列"><a href="#创建网桥设置队列" class="headerlink" title="创建网桥设置队列"></a>创建网桥设置队列</h5><p>当需要Docker daemon创建网络时，则调用<code>controller.NewNetwork()</code>函数来通过<code>libnetwork</code>完成创建，实现过程的主要步骤:</p><ol><li>使用IP管理器的<strong>默认驱动创建IP管理器</strong>，并使用IP管理器从其自身维护的IP池中<strong>获取参数中指定的IP地址段</strong>。</li><li>在确保新的网络设置和已经存在的网络不冲突之后，<strong>创建与这个驱动（即bridge驱动)相符的配置结构体network。</strong>接下来根据配置中的网桥名寻找对应的网桥。如果网桥不存在，则将创建网桥的步骤加入设置队列。</li><li>定义关于<strong>网络隔离的iptables规则设置的函数</strong>，在接下来的步骤中加入到设置队列中，以确保不同网络之间相互隔离。</li><li>将IPV4配置到网桥上、IPV6配置、IPV6转发、开启本地回环接口的地址路由、开启iptables、IPV4和IPV6的网关信息配置、网络隔离的iptables规则设置和网桥网络过滤等步骤加入到设置队列中。</li><li>最后，运行设置队列中的所有步骤，主要<strong>通过netlink进行系统调</strong>用来完成Docker网桥的创建和配置工作。</li></ol><h5 id="更新相关配置信息"><a href="#更新相关配置信息" class="headerlink" title="更新相关配置信息"></a>更新相关配置信息</h5><p>完成上述操作后，libnetwork会将各种相关配置信息存储到Docker的LibKv数据仓库中，以备后续的查找和使用。</p><h3 id="libcontainer网络配置原理"><a href="#libcontainer网络配置原理" class="headerlink" title="libcontainer网络配置原理"></a>libcontainer网络配置原理</h3><p>Docker容器的网络就是在<strong>创建特定容器</strong>的时候，<strong>根据传入的参数为容器配置特定的网络环境</strong>，主要内容包括为容器配置网卡、IP、路由、DNS等一系列任务。Docker容器一般使用<code>docker run</code>命令来创建，其关于网络方面的参数有<code>--net</code>、<code>--dns</code>等。–net是一个非常重要的参数，用于指定容器的网络模式。</p><h4 id="1-命令行参数阶段"><a href="#1-命令行参数阶段" class="headerlink" title="1.命令行参数阶段"></a>1.命令行参数阶段</h4><p>docker run命令执行的时候，首先会创建一个DockerCli类型的变量来表示Docker客户端，然后根据具体命令调用相应函数完成请求，如run命令就是调用CmdRun函数完成的。实现功能有：</p><ul><li>解析docker run命令的参数，并存入相应的变量( config、hostConfig、networkingConfig、cmd等）中。</li><li>发送请求给Docker daemon，创建Docker容器对象，完成容器启动前的准备工作。</li><li>发送请求给Docker daemon，启动容器。</li></ul><p>Docker run命令中提供的关于容器配置的参数首先保存在了<code>Config</code> 、<code>HostConfig</code>以及<code>NetworkingConfig</code>这3个结构中。结构体定义都放在在<code>engine-api</code>项目中的types包中，<code>Config</code>保存的是<strong>不依赖于宿主机的信息</strong>，也就是可以迁移的信息，其他与<strong>宿主机关联的信息</strong>都保存在<code>HostConfig</code>中，在Docker将网络模块独立为一个项目后，将<strong>网络参数</strong>部分从原来的配置中抽出为<code>NetworkingConfig</code>。Config中保存有Hostname(容器主机名)、NetworkDisabled(是否关闭容器网络功能）、MacAddress (网卡MAC地址）等;HostConfig保存有Dns(容器的DNS)、NetworkMode(容器的网络模式);NetworkingConfig保存了一组端点参数与所属网络名的map，docker run与docker network connect的网络配置均会保存在该map中。以上配置项都有对应的命令行参数。</p><p>解析完docker run命令行参数以后，Docker客户端利用Docker daemon暴露的API接口，分别将创建容器与启动容器的请求发送至Docker daemon，完成容器的创建和启动。因此<strong>CmdRun函数</strong>除了解析并<strong>组装与网络相关的命令行参数</strong>外，不做网络方面的具体配置，具体的网络配置还是由Docker daemon来完成。</p><h4 id="2-创建容器阶段"><a href="#2-创建容器阶段" class="headerlink" title="2.创建容器阶段"></a>2.创建容器阶段</h4><p>当Docker客户端将创建容器的请求发送给Docker daemon后，Docker daemon开始创建容器,主要完成以下工作。</p><ul><li>校验hostConfig、Config与NetworkingConfig中的参数。</li><li>根据需要调整HostConfig的参数。</li><li>根据传入的容器配置和名称创建对应的容器。</li></ul><p>容器创建的<strong>最终返回一个Container对象</strong>，Container对象就是容器的数据结构表示，其中有-个名为<code>NetworkSettings</code>的属性，描述了容器的具体网络信息，其结构主要为：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>Bridge</td><td>容器所连接到的网桥</td></tr><tr><td>SandboxID</td><td>容器对应Sandbox的ID</td></tr><tr><td>HairpinMode</td><td>是否开启hairpin模式</td></tr><tr><td>Ports</td><td>容器映射的端口号</td></tr><tr><td>SandboxKey</td><td>Sandbox对应network namespace文件的路径</td></tr><tr><td>Networks</td><td>保存了容器端点配置与所属网络名的map</td></tr><tr><td>IsAnonymousEndpoint</td><td>容器是否未指定名字name</td></tr></tbody></table><p>除了IsAnonymousEndpoint，都是在启动阶段才能完全确定。</p><h4 id="3-启动容器阶段"><a href="#3-启动容器阶段" class="headerlink" title="3.启动容器阶段"></a>3.启动容器阶段</h4><p>容器创建完成之后, Docker客户端会发送启动容器请求。daemon首先获取到需要启动的容器,然后调用容器的Start函数去真正启动容器，其中与网络相关的主要：</p><ul><li><code>initializeNetwork</code>:初始化Container对象中与网络相关的属性;</li><li><code>populateCommand</code>:填充Docker Container内部需要执行的命令，Command中含有进程启动命令，还含有容器环境的配置信息，也包括网络配置;</li><li><code>container.waitForStart</code>:实现Docker Container内部进程的启动，进程启动之后，为进程创建网络环境等。</li></ul><h4 id="4-execdriver网络执行流程"><a href="#4-execdriver网络执行流程" class="headerlink" title="4.execdriver网络执行流程"></a>4.execdriver网络执行流程</h4><p><code>execdriver</code>是Docker daemon的执行驱动，用来启动容器内部进程的执行。<br>这里主要是配置表示命名空间的<code>namespaces</code>属性，<code>namespaces</code>列出了当启动容器进程时需要新创建的命名空间。network namespace的配置是通过调用<code>execdriver</code>的<code>createNetwork</code>函数实现的。该函数根据Docker容器的不同网络模式执行不同的动作，流程如下。</p><ol><li>根据execdriver.Command对象中的Network属性判断出采用不同的方式配置网络。</li><li>若Network.ContainerID不为空，则为container模式，则首先在处于活动状态的容器列表中查找被引用的容器，接着找到被引用容器中进程的network namespace路径。假如被引用容器的第一个进程在主机中的PID为12345，则network namespace的路径为/proc/12345/ns/net。然后将该路径放入到libcontainer.Config.Namespaces中。</li><li>若Network.NamespacePath不为空，对应host模式，则将Network.NamespacePath写入libcontainer.Config.Namespaces中。</li><li>其他情况下，表示目前暂时无法获得network namespace，则为libcontianer设置PreStart钩子函数，主要工作是遍历execdriver提供的preStart钩子函数并执行。前面daemon中调用Run函数时已经将setNetworkNamespaceKey函数封装为PreStart钩子函数了。</li></ol><p>createNetwork函数执行完后，就已经把network namespace信息或者能够配置network<br>namespace的钩子函数<strong>全部记录到libcontainer里</strong>了。然后容器就开始执行，所以接着进入libcontainer中继续跟踪容器的网络。</p><h4 id="5-libcontainer网络执行流程"><a href="#5-libcontainer网络执行流程" class="headerlink" title="5.libcontainer网络执行流程"></a>5.libcontainer网络执行流程</h4><p>在libnetwork被分离出来前，Docker网络的内核态配置是由libcontianer完成的，但在Docker容器启动的调用流程下，libcontainer只是<strong>负责触发libcontianer.Config .Hooks中的Prestart钩子函数来完成容器网络的底层配置</strong>，具体触发的地方位于<code>libcontainer/process_linux.go</code>文件中的<code>initProcess.start</code>方法中，在容器的init进程启动时调用。虽然随后的<code>createNetworkInterfaces</code>函数仍然存在并被调用了，但由于该函数是通过遍历<code>libcontainer.Config.Networks</code>数组内定义好的网络信息来配置网络的，而前面execdriver并未填充该数组,所以Docker容器启动流程下并不会在libcontainer中创建网络环境。暂时保留这部分只是为了兼容一些遗留代码。</p><p>这里讲解一下容器启动前触发的<code>Prestart</code>钩子函数<code>setNetworkNamespaceKey</code>，虽然该函数真正定义的地方是在<code>daemon/container_operations_unix.go</code>。 <code>setNetworkNamespaceKey</code>的主要工作是<strong>获取network namespace并与容器对应的sandbox关联</strong>起来。首先<strong>通过容器pid获取容器networknamespace文件的位置—/proc/[pid]/ns/net</strong>，再<strong>通过容器ID获取其对应的sandbox</strong>，最后<strong>调用sandbox的SetKey完成底层网络的创建</strong>。</p><h4 id="6-libnetwork实现内核态网络配置"><a href="#6-libnetwork实现内核态网络配置" class="headerlink" title="6.libnetwork实现内核态网络配置"></a>6.libnetwork实现内核态网络配置</h4><p>libnetwork对内核态网络的配置包括<strong>启动容器</strong>和<strong>libcontainer网络执行流程</strong>两个阶段。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker安装时会自动在 host 上创建三个网络，none、host、bridge我们可用docker network ls命令查看。&lt;/p&gt;
&lt;h2 id=&quot;一、Docker网络架构&quot;&gt;&lt;a href=&quot;#一、Docker网络架构&quot; class=&quot;headerlink&quot; title=&quot;一、Docker网络架构&quot;&gt;&lt;/a&gt;一、Docker网络架构&lt;/h2&gt;&lt;p&gt;Docker在1.9版本中引入了一整套的&lt;code&gt;docker network&lt;/code&gt;子命令和跨主机网络支持。这允许用户可以根据他们应用的拓扑结构创建虚拟网络并将容器接人其所对应的网络。其实，早在Docker1.7版本中，网络部分代码就已经被抽离并单独成为了Docker的网络库，即&lt;code&gt;libnetwork&lt;/code&gt;。在此之后，容器的网络模式也被抽象变成了统一接口的驱动。&lt;/p&gt;
&lt;p&gt;为了标准化网络驱动的开发步骤和支持多种网络驱动，Docker公司在libnetwork中使用了&lt;strong&gt;CNM ( Container Network Model )&lt;/strong&gt;。CNM定义了构建容器虚拟化网络的模型，同时还提供了可以用于开发多种网络驱动的标准化接口和组件。&lt;/p&gt;
&lt;p&gt;libnetwork和Docker daemon和各个网络驱动关系：&lt;/p&gt;
&lt;img src=&quot;/2021/10/10/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E7%BD%91%E7%BB%9C/Docker网络虚拟化架构.png&quot; alt=&quot;image-20211010223218172&quot; style=&quot;zoom:67%;&quot;&gt;

&lt;p&gt;Docker daemon通过调用&lt;strong&gt;libnetwork对外提供的API&lt;/strong&gt;完成网络的创建和管理等功能。libnetwork中则使用了&lt;strong&gt;CNM&lt;/strong&gt;来完成网络功能的提供。而CNM中主要有&lt;strong&gt;沙盒( sandbox )、端点（ endpoint）和网络( network)&lt;/strong&gt;这3种组件。libnetwork中内置的5种驱动则为libnetwork提供了不同类型的网络服务。下面分别对CNM中的3个核心组件和libnetwork中的5种内置驱动进行介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CNM的核心组件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沙盒&lt;/strong&gt;：一个沙盒包含了&lt;strong&gt;一个容器网络栈的信息&lt;/strong&gt;。沙盒可以对&lt;strong&gt;容器的接口、路由和DNS设置等进行管理&lt;/strong&gt;。沙盒的实现可以是Linux network namespace 、FreeBSD Jail或者类似的机制。一个沙盒可以有多个端点和多个网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端点:&lt;/strong&gt;一个端点可以加入一个沙盒和一个网络。端点的实现可以是&lt;code&gt;veth pair&lt;/code&gt; , &lt;code&gt;Open vSwitch&lt;/code&gt;内部端口或者相似的设备。一个端点只可以属于一个网络并且只属于一个沙盒。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络&lt;/strong&gt;:一个网络是&lt;strong&gt;一组可以直接互相联通的端点&lt;/strong&gt;。网络的实现可以是Linux bridge、VLAN。一个网络包含多个端点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5种内置驱动&lt;/strong&gt;：&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker基础</title>
    <link href="http://yoursite.com/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-07T15:19:01.000Z</published>
    <updated>2021-10-16T12:16:12.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、容器"><a href="#一、容器" class="headerlink" title="一、容器"></a>一、容器</h2><h3 id="容器解决的问题"><a href="#容器解决的问题" class="headerlink" title="容器解决的问题"></a>容器解决的问题</h3><p>开发人员通常使用多种服务（比如MQ、Cache、DB）构建和组装应用，而且可能会部署到不同环境。</p><ul><li>应用包含多种服务，这些服务有自己所依赖的库和软件包</li><li>存在多部署环境，服务在运行时可能需要动态迁移到不同环境中,开发环境-&gt;测试环境-&gt;生产环境。</li></ul><h3 id="容器的优势"><a href="#容器的优势" class="headerlink" title="容器的优势"></a>容器的优势</h3><p>对于开发人员:<strong>Build Once、Run Anywhere</strong>。<br>容器意味着环境隔离和可重复性。开发人员只需为应用创建一次运行环境，然后打包成容器便可在其他机器上运行。另外，容器环境与所在的 Host 环境是隔离的，就像虚拟机一样，但更快更简单。</p><p>对于运维人员:<strong>Configure Once、Run Anything</strong>。<br>只需要配置好标准的runtime环境，服务器就可以运行任何容器。这使得运维人员的工作变得更高效、一致和可重复。容器消除了开发、测试、生产环境的不一致性。</p><h2 id="二、Docker概念"><a href="#二、Docker概念" class="headerlink" title="二、Docker概念"></a>二、Docker概念</h2><h3 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a>docker架构</h3><p>Docker 采用的是 Client/Server架构。客户端向服务器发送请求，服务器负责构建、运行和分发容器。客户端和服务器可以运行在同一个 Host 上，客户端也可以通过socket或RESTAPI与远程的服务器通信。</p><p><img src="/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E5%9F%BA%E7%A1%80/docker%E5%9F%BA%E7%A1%80.svg" alt="img"></p><ul><li>Docker_Host：<ul><li>安装Docker的主机</li></ul></li><li>Docker Daemon：<ul><li>运行在Docker主机上的Docker后台进程，负责创建、运行、监控容器，构建存储镜像</li></ul></li><li>Client：<ul><li>操作Docker主机的客户端（命令行、UI等）</li></ul></li><li>Registry：<ul><li>镜像仓库</li><li>Docker Hub</li></ul></li><li>Images：<ul><li>镜像，带环境打包好的程序，可以直接启动运行。只读模板，通过它可以创建Docker容器</li></ul></li><li>Containers：<ul><li>容器就是docker镜像的运行实例，用户可以通过CLI或是API启动、停止、移动或删除容器。对于应用软件，镜像是软件生命周期的构建和打包阶段，而容器是启动和运行阶段。</li></ul></li></ul><h3 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h3><p>每一个镜像都是从基础镜像开始的</p><h4 id="base镜像"><a href="#base镜像" class="headerlink" title="base镜像"></a>base镜像</h4><p>base镜像有两层含义:</p><ul><li>不依赖其他镜像，从 <code>scratch</code>构建;</li><li>其他镜像可以以之为基础进行扩展。</li></ul><p>所以，能称作 base镜像的通常都是各种 Linux发行版的 Docker镜像，比如Ubuntu、Debian、CentOS等。</p><p>为什么一个centos的镜像只有200MB?</p><p>Linux内核由内核空间和用户空间构成:</p><img src="/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E5%9F%BA%E7%A1%80/Linux操作系统构成.png" style="zoom:67%;"><ol><li><p><strong>rootfs</strong> </p><p>内核空间是<code>kernel</code>，Linux 刚启动时会加载bootfs文件系统，之后 bootfs会被卸载掉。</p><p>用户空间的文件系统是 <code>rootfs</code>，包含我们熟悉的ldev、/proc、/bin等目录。<br>对于 base镜像来说，底层直接用Host 的 kernel，自己只需要提供<code>rootfs</code>就行了。<br>而对于一个精简的OS，rootfs可以很小，只需要包括最<strong>基本的命令、工具和程序库</strong>就可以了。</p></li><li><p><strong>base镜像提供的是最小安装的linux发行版</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> centos-7-docker.tar.xz /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/basg&quot;</span>]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>支持多种Linux OS</strong></p><p>ubuntu使用upstart管理服务，apt管理软件包；而CentOS7使用systemd和yum这些都是用户空间上的区别，Linux kernel差别不大。</p><img src="/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E5%9F%BA%E7%A1%80/多种OS.png" alt="image-20211008225305039" style="zoom:67%;"></li></ol><p>容器<strong>只能使用Host的kernel</strong>，并且不能修改。<br>所有容器都共用host 的 kernel，在容器中没办法对kernel升级。如果容器对kernel 版本有要求（比如应用只能在某个 kernel版本下运行)，则不建议用容器，这种场景虚拟机可能更合适。</p><h4 id="镜像的特点"><a href="#镜像的特点" class="headerlink" title="镜像的特点"></a>镜像的特点</h4><h5 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h5><p>新镜像是从base镜像一层一层叠加生成的。</p><p>好处就是<strong>共享资源</strong>，有多个镜像都是从相同的base镜像构建而来，那么Docker Host只需要在磁盘上保存一份base镜像，就可以为所有容器服务了，而且镜像的每一层都可以共享。</p><h5 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h5><p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层叫容器层，所有对容器的改动，无论是添加、删除、函数修改文件都只发送在容器层中。容器层下面所有的镜像层是可写的。</p><p>任何对于文件的操作都会记录在容器层，例如：修改文件时容器层会把在镜像层找到的文件拷贝到容器层然后进行修改，删除文件时则会在容器层内记录删除文件的条目。</p><p><img src="/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E5%9F%BA%E7%A1%80/%E8%AF%BB%E5%86%99%E5%B1%82png.png" alt="读写层png"></p><p>所以，镜像可以被多个容器共享。</p><h5 id="联合挂载"><a href="#联合挂载" class="headerlink" title="联合挂载"></a>联合挂载</h5><p>容器层会从上到下去下一层的镜像层中去获取文件</p><p>当容器启动时，一个新的可写层<code>writable</code>被加载到镜像的顶部，这一层通常被称为容器层<code>container</code>，容器层之下的都叫做镜像层。</p><p>典型的Linux在启动后，会将<code>rootfs</code>置为只读<code>readonly</code>并进行一些列检查，然后将其切换为可读写<code>readwrite</code>供用户使用。在Docker中起初也是将<code>rootfs</code>以只读的<code>readonly</code>的方式加载并检查，然后接下来利用<code>union mount</code>联合挂载将一个<code>readwrite</code>文件系统挂载在<code>readonly</code>的<code>rootfs</code>之上，并且允许再次将下层的文件系统设定为只读<code>readonly</code>，并向上叠加。这样一组只读<code>readonly</code>和一个可写<code>writeable</code>的结果就构成了一个容器<code>container</code>的运行目录，每个镜像被称为一层<code>layer</code>。</p><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p>centos安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.docker.com/engine/install/centos/</span><br></pre></td></tr></table></figure><h3 id="1-移除旧的docker"><a href="#1-移除旧的docker" class="headerlink" title="1.移除旧的docker"></a>1.移除旧的docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="2-配置yum源"><a href="#2-配置yum源" class="headerlink" title="2.配置yum源"></a>2.配置yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="3-安装docker"><a href="#3-安装docker" class="headerlink" title="3.安装docker"></a>3.安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是在安装k8s的时候使用</span></span><br><span class="line">yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7  containerd.io-1.4.6</span><br></pre></td></tr></table></figure><h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开机自启并启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br></pre></td></tr></table></figure><h3 id="5、配置加速"><a href="#5、配置加速" class="headerlink" title="5、配置加速"></a>5、配置加速</h3><p>这里额外添加了docker的生产环境核心配置cgroup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="四、docker基本命令"><a href="#四、docker基本命令" class="headerlink" title="四、docker基本命令"></a>四、docker基本命令</h2><p><img src="/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.png" alt="image-20211008204653350"></p><h3 id="1-寻找镜像"><a href="#1-寻找镜像" class="headerlink" title="1.寻找镜像"></a>1.寻找镜像</h3><p>去<code>docker hub</code>寻找镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx  <span class="comment">#下载最新版</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#镜像名:版本名（标签）</span></span><br><span class="line">docker pull nginx:1.20.1</span><br><span class="line"></span><br><span class="line">docker pull redis  <span class="comment">#下载最新</span></span><br><span class="line">docker pull redis:6.2.4</span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载来的镜像都在本地</span></span><br><span class="line">docker images  <span class="comment">#查看所有镜像</span></span><br><span class="line"></span><br><span class="line">redis = redis:latest</span><br><span class="line"><span class="comment">#删除镜像</span></span><br><span class="line">docker rmi 镜像名:版本号/镜像id</span><br></pre></td></tr></table></figure><h3 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2.启动容器"></a>2.启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#【docker run  设置项   镜像名  】 镜像启动运行的命令（镜像里面默认有的，一般不会写）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d：后台运行</span></span><br><span class="line"><span class="comment"># --restart=always: 开机自启</span></span><br><span class="line">docker run --name=mynginx   -d  --restart=always -p  88:80   nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 查看所有</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 删除停止的容器</span></span><br><span class="line">docker rm  容器id/名字</span><br><span class="line">docker rm -f mynginx   <span class="comment">#强制删除正在运行中的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止容器</span></span><br><span class="line">docker stop 容器id/名字</span><br><span class="line"><span class="comment">#再次启动</span></span><br><span class="line">docker start 容器id/名字</span><br><span class="line"></span><br><span class="line"><span class="comment">#应用开机自启</span></span><br><span class="line">docker update 容器id/名字 --restart=always</span><br></pre></td></tr></table></figure><h3 id="3、修改容器内容"><a href="#3、修改容器内容" class="headerlink" title="3、修改容器内容"></a>3、修改容器内容</h3><p>修改默认的index.html 页面</p><h4 id="1-进入容器修改"><a href="#1-进入容器修改" class="headerlink" title="1.进入容器修改"></a>1.进入容器修改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部的系统，修改容器内容</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id  /bin/bash</span><br></pre></td></tr></table></figure><h4 id="2、挂载数据到外部修改"><a href="#2、挂载数据到外部修改" class="headerlink" title="2、挂载数据到外部修改"></a>2、挂载数据到外部修改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=mynginx   \</span><br><span class="line">-d  --restart=always \</span><br><span class="line">-p  88:80 -v /data/html:/usr/share/nginx/html:ro  \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改页面只需要去 主机的 /data/html</span></span><br></pre></td></tr></table></figure><h3 id="4、提交修改"><a href="#4、提交修改" class="headerlink" title="4、提交修改"></a>4、提交修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">docker commit -a <span class="string">&quot;liuqi&quot;</span>  -m <span class="string">&quot;首页变化&quot;</span> 341d81f7504f mynginx:v1.0</span><br></pre></td></tr></table></figure><p>传输镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将镜像保存成压缩包</span></span><br><span class="line">docker save -o abc.tar mynginx:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 别的机器加载这个镜像</span></span><br><span class="line">docker load -i abc.tar</span><br></pre></td></tr></table></figure><h3 id="5、推送远程仓库"><a href="#5、推送远程仓库" class="headerlink" title="5、推送远程仓库"></a>5、推送远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag local-image:tagname new-repo:tagname</span><br><span class="line">docker push new-repo:tagname</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把旧镜像的名字，改成仓库要求的新版名字</span></span><br><span class="line">docker tag mynginx:v1.0 liuqi/mynginx:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录到docker hub</span></span><br><span class="line">docker login       </span><br><span class="line">docker <span class="built_in">logout</span>（推送完成镜像后退出）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">docker push liuqi/mynginx:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 别的机器下载</span></span><br><span class="line">docker pull liuqi/mynginx:v1.0</span><br></pre></td></tr></table></figure><h3 id="6、补充"><a href="#6、补充" class="headerlink" title="6、补充"></a>6、补充</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器名/id   排错</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 经常修改nginx配置文件</span></span><br><span class="line">docker run -d -p 80:80 \</span><br><span class="line"><span class="comment">#ro容器里面不可以修改 rw容器里面也可以修改</span></span><br><span class="line">-v /data/html:/usr/share/nginx/html:ro \</span><br><span class="line">-v /data/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--name mynginx-02 \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#把容器指定位置的东西复制出来 </span></span><br><span class="line">docker cp 5eff66eec7e1:/etc/nginx/nginx.conf  /data/conf/nginx.conf</span><br><span class="line"><span class="comment">#把外面的内容复制到容器里面</span></span><br><span class="line">docker cp  /data/conf/nginx.conf  5eff66eec7e1:/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h2 id="五、打包镜像Dockerfile"><a href="#五、打包镜像Dockerfile" class="headerlink" title="五、打包镜像Dockerfile"></a>五、打包镜像Dockerfile</h2><h3 id="镜像特点"><a href="#镜像特点" class="headerlink" title="镜像特点"></a>镜像特点</h3><h4 id="镜像的缓存特性"><a href="#镜像的缓存特性" class="headerlink" title="镜像的缓存特性"></a>镜像的缓存特性</h4><p>Docker会缓存已有镜像的镜像层，构建新镜像时，如果某镜像层已经存在，就直接使用，无须重新创建。</p><p>如果出现<code>Using cache</code>,就说明命中缓存。</p><p>如果我们希望在构建镜像时不使用缓存，可以在 docker build命令中加上<code>--no-cache</code>参数。Dockerfile 中每一个指令都会创建一个镜像层，<strong>上层是依赖于下层的</strong>。无论什么时候，只要某一层发生变化，其上面所有层的缓存都会失效。<br>也就是说，如果我们改变Dockerfile指令的执行顺序，或者修改或添加指令，都会使缓存失效。</p><h4 id="调试Dockerfile"><a href="#调试Dockerfile" class="headerlink" title="调试Dockerfile"></a>调试Dockerfile</h4><p>总结一下通过Dockerfile构建镜像的过程:</p><ul><li>从base镜像运行一个容器。</li><li>执行一条指令，对容器做修改。</li><li>执行类似 docker commit 的操作，生成一个新的镜像层。</li><li>Docker再基于刚刚提交的镜像运行一个新容器。</li><li>重复2~4步，直到Dockerfile中的所有指令执行完毕。</li></ul><p>从这个过程可以看出，如果 Dockerfile由于某种原因执行到某个指令失败了，我们也将能够得到<strong>前一个指令成功</strong>执行构建出的镜像，这对调试 Dockerfile非常有帮助。我们可以运行最新的这个镜像定位指令失败的原因。</p><p>通过<code>docker run -it 镜像id</code> 启动镜像的一个容器，定位问题。</p><h3 id="常用的Dockerfile命令"><a href="#常用的Dockerfile命令" class="headerlink" title="常用的Dockerfile命令"></a>常用的Dockerfile命令</h3><ol><li><p><code>FROM</code>:指定基础镜像。</p></li><li><p><code>MAINTAINER</code>:作者</p></li><li><p><code>COPY</code>：</p><p>将文件从build context复制到镜像。</p><p>COPY支持两种形式:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> src dest </span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;src&quot;</span>, <span class="string">&quot;dest&quot;</span>]。</span></span><br></pre></td></tr></table></figure><p>注意:src只能指定build context中的文件或目录。</p></li><li><p><code>ADD</code>:与COPY类似，从 build context 复制文件到镜像。不同的是，如果 src是归档文件(tar、zip、tgz、xz 等)，文件会被自动解压到dest。</p></li><li><p><code>ENV</code>:设置环境变量,环境变量可被后面的指令使用。例如:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> MY VERSION <span class="number">1.3</span> <span class="keyword">RUN</span><span class="bash"> apt-get install -y mypackage=<span class="variable">$MY</span> VERSION</span></span><br></pre></td></tr></table></figure></li><li><p><code>EXPOSE</code><br>指定容器中的<strong>进程会监听某个端口</strong>，Docker 可以将该端口暴露出来。我们会在容器网络部分详细讨论。</p></li><li><p><code>VOLUME</code><br>将文件或目录声明为volume。</p></li><li><p><code>WORKDIR</code><br>为后面的RUN、CMD、ENTRYPOINT、ADD或COPY指令<strong>设置镜像中的当前工作目录。</strong></p></li><li><p><code>RUN</code><br>在容器中运行指定的命令。</p></li><li><p><code>CMD</code><br>容器启动时运行指定的命令。</p><p>Dockerfile 中可以有多个CMD指令，但<strong>只有最后一个生效</strong>。CMD可以被docker run 之后的参数替换。</p></li><li><p><code>ENTRYPOINT</code><br>设置容器<strong>启动时运行的命令</strong>。<br>Dockerfile 中可以有多个ENTRYPOINT 指令，但<strong>只有最后一个生效</strong>。CMD或docker run之后的参数会被当作<strong>参数</strong>传递给ENTRYPOINT。</p></li></ol><h3 id="RUN-vs-CMD-vs-ENTRYPOINT"><a href="#RUN-vs-CMD-vs-ENTRYPOINT" class="headerlink" title="RUN vs CMD vs ENTRYPOINT"></a>RUN vs CMD vs ENTRYPOINT</h3><ul><li><code>RUN</code>: 执行命令并创建新的镜像层，RUN经常用于安装软件包</li><li><code>CMD</code>：设置容器启动后默认执行的命令和参数，但CMD会被docker run后面跟着的命令行参数替换。</li><li><code>ENTRYPOINT</code>：配置容器启动时运行的命令。</li></ul><h4 id="1-Shell和Exec"><a href="#1-Shell和Exec" class="headerlink" title="1.Shell和Exec"></a>1.Shell和Exec</h4><p><strong>shell格式</strong>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">instruction command</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install python3</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span></span></span><br></pre></td></tr></table></figure><p>命令执行时，shell底层会调用<code>/bin/sh -c [command]</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name Cloud Man <span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$name</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>Exec格式</strong>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">instruction [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;apt-get&quot;</span>,<span class="string">&quot;isntall&quot;</span>,<span class="string">&quot;python&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/echo&quot;</span>,<span class="string">&quot;Hello world&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/bin/echo&quot;</span>,<span class="string">&quot;Hello world&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>命令执行时，会直接调用[command]，不会被shell解析。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name Cloud Man <span class="keyword">ENTRYPOINT</span><span class="bash">[<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo Hello, <span class="variable">$name</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="2-RUN"><a href="#2-RUN" class="headerlink" title="2.RUN"></a>2.RUN</h4><p>通常用于安装用于和软件包。RUN命令在当前镜像的顶部执行命令，并创建新的镜像层。</p><h4 id="3-CMD"><a href="#3-CMD" class="headerlink" title="3.CMD"></a>3.CMD</h4><p>CMD指令允许用户指定容器的<strong>默认执行的命令</strong>。此命令会在容器启动且 docker run没有指定其他命令时运行。<br>如果docker run指定了其他命令，CMD指定的默认命令将被忽略。如果 Dockerfile 中有多个CMD指令，只有最后一个CMD有效。CMD有三种格式:</p><ul><li>Exec格式:<code>CMD[&quot; executable&quot; ,&quot;param1 &quot;,&quot;param2&quot;]</code>这是 CMD的推荐格式。</li><li><code>CMD[&quot;param1 &quot;,&quot;param2&quot;]</code>为 ENTRYPOINT<strong>提供额外的参数</strong>，此时ENTRYPONT必须使用 Exec格式。</li><li>Shell格式:<code>CMD command param1 param2</code></li></ul><p>第二种格式CMD [“param1”,”param2”]要与 Exec格式的 ENTRYPOINT 指令配合使用，其用途是为 ENTRYPOINT 设置默认的参数。</p><h4 id="4-ENTRYPOINT"><a href="#4-ENTRYPOINT" class="headerlink" title="4.ENTRYPOINT"></a>4.ENTRYPOINT</h4><p>ENTRYPOINT指令可让容器<strong>以应用程序或者服务的形式运行</strong>。</p><p>ENTRYPOINT看上去与CMD很像，它们都可以指定要执行的命令及其参数。不同的地方在于<strong>ENTRYPOINT不会被忽略</strong>，一定会被执行，即使运行 docker run时指定了其他命令。<br>ENTRYPOINT有两种格式:</p><ul><li>Exec格式:<code>ENTRYPOINT [&quot;executable&quot;, &quot;&quot;param1&quot;, &quot;param2&quot;&quot;]</code>这是ENTRYPOINT 的推荐格式。</li><li>Shell格式:<code>ENTRYPOINT command paraml param2</code>。</li></ul><p>ENTRYPOINT两种格式的效果差别很大。</p><p><strong>Exec 格式</strong>：</p><p>ENTRYPOINT的 Exec格式用于<strong>设置要执行的命令及其参数</strong>，同时可通过CMD 提供额外的参数。</p><p>ENTRYPOINT 中的<strong>参数始终会被使用</strong>，而CMD的额外参数可以在<strong>容器启动时动态替换掉</strong>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/bin/echo&quot;</span>, <span class="string">&quot;Hello&quot;</span>]CMD [ <span class="string">&quot;world&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker run -it[image]</span></span><br><span class="line"><span class="comment">#Hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker run -it [image] CloudMan</span></span><br><span class="line"><span class="comment">#Hello CloudMan</span></span><br></pre></td></tr></table></figure><p><strong>Shell模式</strong>会忽略如何CMD或docker run 提供的参数。</p><h3 id="打包一个web应用"><a href="#打包一个web应用" class="headerlink" title="打包一个web应用"></a>打包一个web应用</h3><h4 id="1-编写Dockerfile"><a href="#1-编写Dockerfile" class="headerlink" title="1.编写Dockerfile"></a>1.编写Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-slim</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=leifengyang</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/*.jar   /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="2-打包"><a href="#2-打包" class="headerlink" title="2.打包"></a>2.打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t java-demo:v1.0 .</span><br></pre></td></tr></table></figure><h2 id="六、服务的启动"><a href="#六、服务的启动" class="headerlink" title="六、服务的启动"></a>六、服务的启动</h2><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /data/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data \</span><br><span class="line">-d --name myredis \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">redis:latest  redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、容器&quot;&gt;&lt;a href=&quot;#一、容器&quot; class=&quot;headerlink&quot; title=&quot;一、容器&quot;&gt;&lt;/a&gt;一、容器&lt;/h2&gt;&lt;h3 id=&quot;容器解决的问题&quot;&gt;&lt;a href=&quot;#容器解决的问题&quot; class=&quot;headerlink&quot; title=&quot;容器解决的问题&quot;&gt;&lt;/a&gt;容器解决的问题&lt;/h3&gt;&lt;p&gt;开发人员通常使用多种服务（比如MQ、Cache、DB）构建和组装应用，而且可能会部署到不同环境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用包含多种服务，这些服务有自己所依赖的库和软件包&lt;/li&gt;
&lt;li&gt;存在多部署环境，服务在运行时可能需要动态迁移到不同环境中,开发环境-&amp;gt;测试环境-&amp;gt;生产环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;容器的优势&quot;&gt;&lt;a href=&quot;#容器的优势&quot; class=&quot;headerlink&quot; title=&quot;容器的优势&quot;&gt;&lt;/a&gt;容器的优势&lt;/h3&gt;&lt;p&gt;对于开发人员:&lt;strong&gt;Build Once、Run Anywhere&lt;/strong&gt;。&lt;br&gt;容器意味着环境隔离和可重复性。开发人员只需为应用创建一次运行环境，然后打包成容器便可在其他机器上运行。另外，容器环境与所在的 Host 环境是隔离的，就像虚拟机一样，但更快更简单。&lt;/p&gt;
&lt;p&gt;对于运维人员:&lt;strong&gt;Configure Once、Run Anything&lt;/strong&gt;。&lt;br&gt;只需要配置好标准的runtime环境，服务器就可以运行任何容器。这使得运维人员的工作变得更高效、一致和可重复。容器消除了开发、测试、生产环境的不一致性。&lt;/p&gt;
&lt;h2 id=&quot;二、Docker概念&quot;&gt;&lt;a href=&quot;#二、Docker概念&quot; class=&quot;headerlink&quot; title=&quot;二、Docker概念&quot;&gt;&lt;/a&gt;二、Docker概念&lt;/h2&gt;&lt;h3 id=&quot;docker架构&quot;&gt;&lt;a href=&quot;#docker架构&quot; class=&quot;headerlink&quot; title=&quot;docker架构&quot;&gt;&lt;/a&gt;docker架构&lt;/h3&gt;&lt;p&gt;Docker 采用的是 Client/Server架构。客户端向服务器发送请求，服务器负责构建、运行和分发容器。客户端和服务器可以运行在同一个 Host 上，客户端也可以通过socket或RESTAPI与远程的服务器通信。&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>云原生</title>
    <link href="http://yoursite.com/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    <id>http://yoursite.com/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/</id>
    <published>2021-10-07T10:21:55.000Z</published>
    <updated>2021-10-07T15:19:17.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是云原生"><a href="#一、什么是云原生" class="headerlink" title="一、什么是云原生"></a>一、什么是云原生</h2><p>原生指用任意编程语言开发的应用，这些应用叫原生应用，这些应用最终会部署到一个地方，这个地方可以是云。云原生就是原生应用上云的过程，并且一系列解决方案。</p><h2 id="二、云平台"><a href="#二、云平台" class="headerlink" title="二、云平台"></a>二、云平台</h2><p>云平台是相对于本地而言的，一个应用制作完成后需要放到服务器中运行。这个平台就是云平台</p><h3 id="1、公有云"><a href="#1、公有云" class="headerlink" title="1、公有云"></a>1、公有云</h3><blockquote><p>购买云服务商提供的公共服务器</p></blockquote><p>公有云是最常见的云计算部署类型。公有云资源（例如服务器和存储空间）由第三方云服务提供商拥有和运营，这些资源通过 Internet 提供。在公有云中，所有硬件、软件和其他支持性基础结构均为云提供商所拥有和管理。Microsoft Azure 是公有云的一个示例。</p><p>在公有云中，你与其他组织或云“租户”共享相同的硬件、存储和网络设备，并且你可以使用 Web 浏览器访问服务和管理帐户。公有云部署通常用于提供基于 Web 的电子邮件、网上办公应用、存储以及测试和开发环境。</p><p>公有云优势：</p><ul><li><p><strong>成本更低</strong>：无需购买硬件或软件，仅对使用的服务付费。</p></li><li><p><strong>无需维护</strong>：维护由服务提供商提供。</p></li><li><p><strong>近乎无限制的缩放性</strong>：提供按需资源，可满足业务需求。</p></li><li><p><strong>高可靠性</strong>：具备众多服务器，确保免受故障影响。</p></li><li><ul><li>可用性： N个9     全年的故障时间： 365<em>24*3600</em>(1-99.9999%)</li></ul></li></ul><h4 id="2、私有云"><a href="#2、私有云" class="headerlink" title="2、私有云"></a>2、私有云</h4><blockquote><p>自己搭建云平台，或者购买</p></blockquote><p>私有云由专供一个企业或组织使用的云计算资源构成。私有云可在物理上位于组织的现场数据中心，也可由第三方服务提供商托管。但是，在私有云中，服务和基础结构始终在私有网络上进行维护，硬件和软件专供组织使用。</p><p>这样，私有云可使组织更加方便地<strong>自定义资源</strong>，从而满足特定的 IT 需求。私有云的使用对象通常为政府机构、金融机构以及其他具备业务关键性运营且希望对环境拥有更大控制权的中型到大型组织。</p><p>私有云优势：</p><ul><li><strong>灵活性更强</strong>：组织可自定义云环境以满足特定业务需求。</li><li><strong>控制力更强</strong>：资源不与其他组织共享，因此能获得更高的控制力以及更高的隐私级别。</li><li><strong>可伸缩性更强</strong>：与本地基础结构相比，私有云通常具有更强的可伸缩性。</li></ul><blockquote><p>没有一种云计算类型适用于所有人。多种不同的云计算模型、类型和服务已得到发展，可以满足组织快速变化的技术需求。</p><p>部署云计算资源有三种不同的方法：公共云、私有云和混合云。采用的部署方法取决于业务需求。</p></blockquote><h3 id="三、充分利用云平台"><a href="#三、充分利用云平台" class="headerlink" title="三、充分利用云平台"></a>三、充分利用云平台</h3><p>云包含了IaaS,、PaaS和SaaS。</p><p><img src="/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F.png" alt="img"></p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>微服务解决的是我们软件开发中一直追求的<strong>低耦合+高内聚</strong>，微服务的本质是把一块大饼分成若干块低耦合的小饼，比如一块小饼专门负责接收外部的数据，一块小饼专门负责响应前台的操作，小饼可以进一步拆分，比如负责接收外部数据的小饼可以继续分成多块负责接收不同类型数据的小饼，这样每个小饼出问题了，其它小饼还能正常对外提供服务。</p><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>DevOps的意思就是<strong>开发和运维</strong>不再是分开的两个团队，而是你中有我，我中有你的一个团队。我们现在开发和运维已经是一个团队了，但是运维方面的知识和经验还需要持续提高。</p><h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><p> 持续交付的意思就是在不影响用户使用服务的前提下频繁把新功能发布给用户使用，要做到这点非常非常难。我们现在两周一个版本，每次上线之后都会给不同的用户造成不同程度的影响。</p><h3 id="容器化"><a href="#容器化" class="headerlink" title="容器化"></a>容器化</h3><p>容器化的好处在于运维的时候不需要再关心每个服务所使用的技术栈了，每个服务都被无差别地封装在容器里，可以被无差别地管理和维护，现在比较流行的工具是docker和k8s。</p><h3 id="Service-Mesh-服务网格"><a href="#Service-Mesh-服务网格" class="headerlink" title="Service Mesh(服务网格)"></a>Service Mesh(服务网格)</h3><p>Service Mesh是近年兴起的一个话题，在容器微服务的基础上，通过Service Mesh可以让用户更精细、更智能的去管理服务之间的通讯。ServiceMesh社区的旗舰项目lstio，当前的热度正在迅速的飙升。</p><p><strong>云原生=微服务+容器+持续交付+DevOps</strong></p><p>云是一切的基础，为上层应用的运行提供了<strong>计算、网络、存储</strong>等基础架构资源;<br>容器在云的基础架构和应用之间，集有了<strong>应用和基础架构资源</strong>;<br>应用层面，用户可以根据场景来选择微服务架构或者是无服务器架构;<br>在复杂的交互场景当中，通过服务网格，可以对服务组建的通讯进行管控;<br>通过DevOps构建一个<strong>应用架构不断迭代更新</strong>的正向循环。</p><p><strong>云原生的终极目的是为了提高开发效率，提升业务敏捷度、扩容性、可用性、资源利用率，降低成本</strong>。</p><p>平台设计理念</p><ul><li>易用：一键生成可运行镜像</li><li>易维护：服务宕机业务无感知</li><li>稳定：高可用</li><li>高效：降本增效</li><li>日志采集：不能丢失</li></ul><p>Docker + K8S + 注册中心/控制中心 + 服务管理平台 + 日志采集</p><p>可以根据需要采用必要的组件。</p><p>云平台架构组件概览</p><p><img src="/2021/10/07/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%8E%9F%E7%94%9F/%E4%BA%91%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84.png" alt="img"></p><h2 id="三、研发效率提升"><a href="#三、研发效率提升" class="headerlink" title="三、研发效率提升"></a>三、研发效率提升</h2><p>在传统的开发测试运维体系中，开发人员要自己编译，打包，上传，重启服务，查看日志，如果发现问题还要再重新来一遍，每个步骤都要手工操作极大的降低了效率，包括当前我们正在做的项目也是有诸多问题：</p><ul><li>在测试环境全靠手工</li><li>开发环境未做隔离，大家相互影响，测试的过程经常被打断</li><li>没有统一的代码控制规范，版本随便用，大家在同一分支上开发，新功能在旧的分支上继续开发等</li></ul><p>有了容器云可以直接打包成镜像进行测试，很好的隔离资源。</p><table><thead><tr><th></th><th>传统应用</th><th>云原生应用</th></tr></thead><tbody><tr><td>应用架构</td><td>单体式/紧密耦合</td><td>微服务/松耦合</td></tr><tr><td>应用构成</td><td>业务代码+中间件+数据库+运维功能</td><td>业务组件+平台</td></tr><tr><td>交付周期</td><td>长</td><td>短且持续</td></tr><tr><td>基础设施</td><td>以服务器为核心，不可移植</td><td>以容器平台为中心，可移植</td></tr><tr><td>运维模式</td><td>定期巡检+告警通知+人工操作</td><td>策略声明+失败自动恢复/回滚</td></tr><tr><td>扩容模式</td><td>提前采购冗余资源+手动扩展</td><td>自动编排，根据指标和策略来弹性伸缩</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、什么是云原生&quot;&gt;&lt;a href=&quot;#一、什么是云原生&quot; class=&quot;headerlink&quot; title=&quot;一、什么是云原生&quot;&gt;&lt;/a&gt;一、什么是云原生&lt;/h2&gt;&lt;p&gt;原生指用任意编程语言开发的应用，这些应用叫原生应用，这些应用最终会部署到一个地方，这个地方可以是云。云原生就是原生应用上云的过程，并且一系列解决方案。&lt;/p&gt;
&lt;h2 id=&quot;二、云平台&quot;&gt;&lt;a href=&quot;#二、云平台&quot; class=&quot;headerlink&quot; title=&quot;二、云平台&quot;&gt;&lt;/a&gt;二、云平台&lt;/h2&gt;&lt;p&gt;云平台是相对于本地而言的，一个应用制作完成后需要放到服务器中运行。这个平台就是云平台&lt;/p&gt;
&lt;h3 id=&quot;1、公有云&quot;&gt;&lt;a href=&quot;#1、公有云&quot; class=&quot;headerlink&quot; title=&quot;1、公有云&quot;&gt;&lt;/a&gt;1、公有云&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;购买云服务商提供的公共服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公有云是最常见的云计算部署类型。公有云资源（例如服务器和存储空间）由第三方云服务提供商拥有和运营，这些资源通过 Internet 提供。在公有云中，所有硬件、软件和其他支持性基础结构均为云提供商所拥有和管理。Microsoft Azure 是公有云的一个示例。&lt;/p&gt;
&lt;p&gt;在公有云中，你与其他组织或云“租户”共享相同的硬件、存储和网络设备，并且你可以使用 Web 浏览器访问服务和管理帐户。公有云部署通常用于提供基于 Web 的电子邮件、网上办公应用、存储以及测试和开发环境。&lt;/p&gt;
&lt;p&gt;公有云优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;成本更低&lt;/strong&gt;：无需购买硬件或软件，仅对使用的服务付费。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;无需维护&lt;/strong&gt;：维护由服务提供商提供。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;近乎无限制的缩放性&lt;/strong&gt;：提供按需资源，可满足业务需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;高可靠性&lt;/strong&gt;：具备众多服务器，确保免受故障影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;可用性： N个9     全年的故障时间： 365&lt;em&gt;24*3600&lt;/em&gt;(1-99.9999%)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2021/10/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/10/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-10-05T15:02:06.000Z</published>
    <updated>2021-10-06T09:29:46.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是正则表达式"><a href="#一、什么是正则表达式" class="headerlink" title="一、什么是正则表达式"></a>一、什么是正则表达式</h2><p><strong>模式模板（pattern template）</strong>，用它来过滤文本。如果数据匹配模式，它就会被接受并进一步处理；如果数据不匹配模式，它就会被滤掉。</p><p>正则表达式是通过正则表达式引擎（regular expression engine）实现的。在Linux中，有两种流行的正则表达式引擎：</p><ul><li>POSIX基础正则表达式（basic regular expression，BRE）引擎</li><li>POSIX扩展正则表达式（extended regular expression，ERE）引擎</li></ul><p>POSIX BRE引擎通常出现在依赖正则表达式进行文本过滤的编程语言中。它为常见模式提供了高级模式符号和特殊符号，比如匹配数字、单词以及按字母排序的字符。</p><h3 id="BRE-模式"><a href="#BRE-模式" class="headerlink" title="BRE 模式"></a>BRE 模式</h3><h4 id="1-纯文本"><a href="#1-纯文本" class="headerlink" title="1.纯文本"></a>1.纯文本</h4><p>正则表达式模式都区分大小写。这意味着它们只会匹配大小写也相符的模式。完整的正则表达式文本并未在数据流中出现，因此匹配失败，sed编辑器不会显示任何文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;The books are expensive&quot;</span> | sed -n <span class="string">&#x27;/book/p&#x27;</span> </span><br><span class="line">The books are expensive</span><br></pre></td></tr></table></figure><h4 id="2-特殊字符"><a href="#2-特殊字符" class="headerlink" title="2. 特殊字符"></a>2. 特殊字符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.*[]^$&#123;&#125;\+?|()</span><br></pre></td></tr></table></figure><p>要匹配特殊字符，必须转义反斜线（<code>\</code>）。</p><p>要使用正斜线，也需要进行转义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;\ is a special character&quot;</span> | sed -n <span class="string">&#x27;/\\/p&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;3 / 2&quot;</span> | sed -n <span class="string">&#x27;/\//p&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-锚字符"><a href="#3-锚字符" class="headerlink" title="3.锚字符"></a>3.锚字符</h4><p>只要模式出现在数据流中的任何地方，它就能匹配。</p><ol><li><p>锁定在<strong>行首</strong>:脱字符（<code>^</code>）,在每个由换行符决定的新数据行的行首检查模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Books are great&quot;</span> | sed -n <span class="string">&#x27;/^Book/p&#x27;</span> </span><br><span class="line">Books are great</span><br></pre></td></tr></table></figure><p>将脱字符放到模式开头之外的其他位置，那么它就跟普通字符一样，不再是特殊字符了</p></li><li><p>锁定在<strong>行尾</strong>:美元符（<code>$</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This is a good book&quot;</span> | sed -n <span class="string">&#x27;/book$/p&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>组合锚点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat data4 </span><br><span class="line">this is a <span class="built_in">test</span> of using both anchors </span><br><span class="line">I said this is a <span class="built_in">test</span> </span><br><span class="line">this is a <span class="built_in">test</span> </span><br><span class="line">I<span class="string">&#x27;m sure this is a test. </span></span><br><span class="line"><span class="string">$ sed -n &#x27;</span>/^</span><br><span class="line">this is a <span class="built_in">test</span>$/p<span class="string">&#x27; data4 </span></span><br><span class="line"><span class="string">this is a test</span></span><br></pre></td></tr></table></figure><p>将两个锚点直接组合在一起,样过滤出数据流中的<strong>空白行</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ed编辑器用删除命令d来删除匹配该正则表达式</span></span><br><span class="line">$ sed <span class="string">&#x27;/^$/d&#x27;</span> data5</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-点号字符"><a href="#4-点号字符" class="headerlink" title="4.点号字符"></a>4.点号字符</h4><p>匹配除换行符之外的任意单个字符。它必须匹配一个字符,在点号字符的位置没有字符，那么模式就不成立。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat data6 </span><br><span class="line">This is a <span class="built_in">test</span> of a line. </span><br><span class="line">The cat is sleeping. </span><br><span class="line">That is a very nice hat. </span><br><span class="line">This <span class="built_in">test</span> is at line four. </span><br><span class="line">at ten o<span class="string">&#x27;clock we&#x27;</span>ll go home. </span><br><span class="line">$ sed -n <span class="string">&#x27;/.at/p&#x27;</span> data6 </span><br><span class="line">The cat is sleeping. </span><br><span class="line">That is a very nice hat. </span><br><span class="line">This <span class="built_in">test</span> is at line four.</span><br></pre></td></tr></table></figure><p>在正则表达式中，空格也是字符，因此at前面的空格刚好匹配了该模式。</p><h4 id="5-字符组"><a href="#5-字符组" class="headerlink" title="5.字符组"></a>5.字符组</h4><p>要限定待匹配的具体字符呢？</p><p>使用方括号来定义一个字符组。方括号中包含所有你希望出现在该字符组中的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/[ch]at/p&#x27;</span> data6 </span><br><span class="line">The cat is sleeping. </span><br><span class="line">That is a very nice hat.</span><br></pre></td></tr></table></figure><p>可以在单个表达式中用多个字符组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Yes&quot;</span> | sed -n <span class="string">&#x27;/[Yy][Ee][Ss]/p&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="6-排除型字符组"><a href="#6-排除型字符组" class="headerlink" title="6.排除型字符组"></a>6.排除型字符组</h4><p>寻找组中没有的字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/[^ch]at/p&#x27;</span> data6</span><br></pre></td></tr></table></figure><p>正则表达式模式会匹配c或h之外的任何字符以及文本模式。由于空格字符属于这个范围，它通过了模式匹配。但即使是排除，字符组仍然<strong>必须匹配一个字符</strong></p><h4 id="7-区间"><a href="#7-区间" class="headerlink" title="7.区间"></a>7.区间</h4><p>用单破折线符号在字符组中表示字符区间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat data8 </span><br><span class="line">60633</span><br><span class="line">46201 </span><br><span class="line">223001 </span><br><span class="line">4353 </span><br><span class="line">22203</span><br><span class="line"><span class="comment">#指定数字区间来简化邮编的例子。</span></span><br><span class="line">$ sed -n <span class="string">&#x27;/^[0-9][0-9][0-9][0-9][0-9]$/p&#x27;</span> data8 </span><br><span class="line">60633 </span><br><span class="line">46201 </span><br><span class="line">45902</span><br></pre></td></tr></table></figure><p>还可以在单个字符组指定多个不连续的区间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许区间a~c、h~m中的字母出现在at文本前</span></span><br><span class="line">$ sed -n <span class="string">&#x27;/[a-ch-m]at/p&#x27;</span> data6 </span><br></pre></td></tr></table></figure><h4 id="8-特殊的字符组"><a href="#8-特殊的字符组" class="headerlink" title="8.特殊的字符组"></a>8.特殊的字符组</h4><p>用来匹配特定类型的字符。</p><table><thead><tr><th>组</th><th>描 述</th></tr></thead><tbody><tr><td>[[:alpha:]]</td><td>匹配任意字母字符，不管是大写还是小写</td></tr><tr><td>[[:alnum:]]</td><td>匹配任意字母数字字符0<del>9、A</del>Z或a~z</td></tr><tr><td>[[:blank:]]</td><td>匹配空格或制表符</td></tr><tr><td>[[:digit:]]</td><td>匹配0~9之间的数字</td></tr><tr><td>[[:lower:]]</td><td>匹配小写字母字符a~z</td></tr><tr><td>[[:print:]]</td><td>匹配任意可打印字符</td></tr><tr><td>[[:punct:]]</td><td>匹配标点符号</td></tr><tr><td>[[:space:]]</td><td>匹配任意空白字符：空格、制表符、NL、FF、VT和CR</td></tr><tr><td>[[:upper:]]</td><td>匹配任意大写字母字符A~Z</td></tr></tbody></table><h4 id="9-星号"><a href="#9-星号" class="headerlink" title="9.星号"></a>9.星号</h4><p>在字符后面放置星号表明该字符必须出现<strong>0次或多次</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;ik&quot;</span> | sed -n <span class="string">&#x27;/ie*k/p&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;iek&quot;</span> | sed -n <span class="string">&#x27;/ie*k/p&#x27;</span> </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;ieek&quot;</span> | sed -n <span class="string">&#x27;/ie*k/p&#x27;</span></span><br></pre></td></tr></table></figure><p>将<strong>点号特殊字符和星号特殊字符</strong>组合起来。匹配<strong>任意数量</strong>的<strong>任意字符</strong>。通常用在数据流中两个可能相邻或不相邻的文本字符串之间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;this is a regular pattern expression&quot;</span> | sed -n <span class="string">&#x27; </span></span><br><span class="line"><span class="string">&gt; /regular.*expression/p&#x27;</span></span><br></pre></td></tr></table></figure><p>可以使用这个模式轻松查找可能出现在数据流中文本行内任意位置的多个单词。</p><p>星号还能用在字符组上。它允许指定可能在文本中出现多次的字符组或字符区间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | sed -n <span class="string">&#x27;/b[ae]*t/p&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="扩展正则表达式"><a href="#扩展正则表达式" class="headerlink" title="扩展正则表达式"></a>扩展正则表达式</h3><p>gawk程序能够识别ERE模式，但sed编辑器不能。</p><h4 id="1-问号"><a href="#1-问号" class="headerlink" title="1.问号"></a>1.问号</h4><p>问号表明前面的字符可以出现<strong>0次</strong>或<strong>1次</strong></p><p>将问号和字符组一起使用。如果字符组中的字符出现了0次或1次，模式匹配就成立。但如果两个字符都出现了，或者其中一个字符出现了2次，模式匹配就不成立。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">bt </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bat&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">bat </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bot&quot;</span> | gawk <span class="string">&#x27;/b[ae]?t/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">$</span><br></pre></td></tr></table></figure><h4 id="2-加号"><a href="#2-加号" class="headerlink" title="2.加号"></a>2.加号</h4><p>加号表明前面的字符可以出现<strong>1次</strong>或<strong>多次</strong>，但必须至少出现1次。如果该字符没有出现，那么模式就不会匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk <span class="string">&#x27;/be+t/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">bet </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk <span class="string">&#x27;/be+t/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>同样适用于字符组，与星号和问号的使用方式相同。</p><h4 id="3-使用花括号"><a href="#3-使用花括号" class="headerlink" title="3.使用花括号"></a>3.使用花括号</h4><p>允许为可重复的正则表达式指定一个<strong>上限</strong>。这通常称为间隔（interval）。可以用两种格式来指定区间</p><ul><li><code>m</code>：正则表达式准确出现m次。</li><li><code>m, n</code>：正则表达式至少出现m次，至多n次。</li></ul><blockquote><p>gawk程序不会识别正则表达式间隔。必须指定gawk程序的–re- interval命令行选项才能识别正则表达式间隔。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bt&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">$ </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;bet&quot;</span> | gawk --re-interval <span class="string">&#x27;/be&#123;1,2&#125;t/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">bet</span><br></pre></td></tr></table></figure><h4 id="4-管道符号"><a href="#4-管道符号" class="headerlink" title="4.管道符号"></a>4.管道符号</h4><p>用逻辑OR方式指定正则表达式引擎要用的两个或多个模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr1|expr2|...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;The cat is asleep&quot;</span> | gawk <span class="string">&#x27;/cat|dog/&#123;print $0&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-表达式分组"><a href="#5-表达式分组" class="headerlink" title="5.表达式分组"></a>5.表达式分组</h4><p>用圆括号进行分组。当你将正则表达式模式分组时，该组会被视为一个标准字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Sat&quot;</span> | gawk <span class="string">&#x27;/Sat(urday)?/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">Sat </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Saturday&quot;</span> | gawk <span class="string">&#x27;/Sat(urday)?/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">Saturday</span><br></pre></td></tr></table></figure><p>将分组和管道符号一起使用来创建可能的模式匹配组是很常见的做法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;cat&quot;</span> | gawk <span class="string">&#x27;/(c|b)a(b|t)/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">cat </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;cab&quot;</span> | gawk <span class="string">&#x27;/(c|b)a(b|t)/&#123;print $0&#125;&#x27;</span> </span><br><span class="line">cab </span><br></pre></td></tr></table></figure><h2 id="二、正则表达式例子"><a href="#二、正则表达式例子" class="headerlink" title="二、正则表达式例子"></a>二、正则表达式例子</h2><h3 id="1-目录文件计数"><a href="#1-目录文件计数" class="headerlink" title="1.目录文件计数"></a>1.目录文件计数</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>对PATH环境变量中定义的目录里的可执行文件进行计数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span> </span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/ <span class="built_in">local</span>/games</span><br></pre></td></tr></table></figure><p>要获取可在脚本中使用的目录列表，就必须用空格来替换冒号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">&#x27;s/:/ /g&#x27;</span> </span><br><span class="line">/usr/<span class="built_in">local</span>/sbin /usr/<span class="built_in">local</span>/bin /usr/sbin /usr/bin /sbin /bin /usr/games /usr/<span class="built_in">local</span>/games</span><br></pre></td></tr></table></figure><p>以使用标准for语句中（参见第13章）来遍历每个目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mypath=$(<span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">&#x27;s/:/ /g&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> directory <span class="keyword">in</span> <span class="variable">$mypath</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">... </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># count number of files in your PATH </span></span><br><span class="line">mypath=$(<span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">&#x27;s/:/ /g&#x27;</span>) </span><br><span class="line">count=0 </span><br><span class="line"><span class="keyword">for</span> directory <span class="keyword">in</span> <span class="variable">$mypath</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> check=$(ls <span class="variable">$directory</span>) </span><br><span class="line"> <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$check</span> </span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$directory</span> - <span class="variable">$count</span>&quot;</span> </span><br><span class="line">count=0 </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2-验证美国电话号码"><a href="#2-验证美国电话号码" class="headerlink" title="2.验证美国电话号码"></a>2.验证美国电话号码</h3><p>美国电话号码有这几种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(123)456-7890 </span><br><span class="line">(123) 456-7890 </span><br><span class="line">123-456-7890 </span><br><span class="line">123.456.7890</span><br></pre></td></tr></table></figure><p>电话号码中可能有也可能没有左圆括号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\(?</span><br></pre></td></tr></table></figure><p>紧接着就是3位区号。在美国，区号以数字2开始（没有以数字0或1开始的区号），最大可到9。要匹配区号，可以用如下模式。这要求第一个字符是2~9的数字，后跟任意两位数字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2-9][0-9]&#123;2&#125;</span><br></pre></td></tr></table></figure><p>收尾的右圆括号可能存在，也可能不存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\)?</span><br></pre></td></tr></table></figure><p>在区号后，存在如下可能：有一个空格，没有空格，有一条单破折线或一个点。4种情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(| |-|\.)</span><br></pre></td></tr></table></figure><p>是3位电话交换机号码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0-9]&#123;3&#125;</span><br></pre></td></tr></table></figure><p>在电话交换机号码之后，你必须匹配一个空格、一条单破折线或一个点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( |-|\.)</span><br></pre></td></tr></table></figure><p>在字符串尾部匹配4位本地电话分机号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0-9]&#123;4&#125;$</span><br></pre></td></tr></table></figure><p><strong>完整模式</strong>如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\(?[2-9][0-9]&#123;2&#125;\)?(| |-|\.)[0-9]&#123;3&#125;( |-|\.)[0-9]&#123;4&#125;$</span><br></pre></td></tr></table></figure><p>只需要在gawk程序中创建一个使用该正则表达式的简单脚本，然后用这个脚本来过滤你的电话薄。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># script to filter out bad phone numbers </span></span><br><span class="line">gawk --re-interval <span class="string">&#x27;/^\(?[2-9][0-9]&#123;2&#125;\)?(| |-|\¬ </span></span><br><span class="line"><span class="string">[0-9]&#123;3&#125;( |-|\.)[0-9]&#123;4&#125;/&#123;print $0&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;317-555-1234&quot;</span> | ./isphone </span><br><span class="line">317-555-1234</span><br></pre></td></tr></table></figure><h4 id="3-解析邮件地址"><a href="#3-解析邮件地址" class="headerlink" title="3.解析邮件地址"></a>3.解析邮件地址</h4><p>邮件地址的基本格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username@hostname</span><br></pre></td></tr></table></figure><p><em>username</em>值可用字母数字字符以及以下特殊字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">点号</span><br><span class="line">单破折线</span><br><span class="line">加号</span><br><span class="line">划线</span><br></pre></td></tr></table></figure><p>的<em>hostname</em>部分由一个或多个域名和一个服务器名组成。只允许字母数字字符以及以下特殊字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">点号</span><br><span class="line">下划线</span><br></pre></td></tr></table></figure><p>用户名中可以有多个有效字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([a-zA-Z0-9_\-\.\+]+)@</span><br></pre></td></tr></table></figure><p>hostname模式使用同样的方法来匹配服务器名和子域名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([a-zA-Z0-9_\-\.]+)</span><br></pre></td></tr></table></figure><p>对于顶级域名，有一些特殊的规则。顶级域名只能是字母字符，必须不少于二个字符（国家或地区代码中使用），并且长度上不得超过五个字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\.([a-zA-Z]&#123;2,5&#125;)$</span><br></pre></td></tr></table></figure><p><strong>完整模式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([a-zA-Z0-9_\-\.\+]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]&#123;2,5&#125;)$</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、什么是正则表达式&quot;&gt;&lt;a href=&quot;#一、什么是正则表达式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是正则表达式&quot;&gt;&lt;/a&gt;一、什么是正则表达式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;模式模板（pattern template）&lt;/strong&gt;，用它来过滤文本。如果数据匹配模式，它就会被接受并进一步处理；如果数据不匹配模式，它就会被滤掉。&lt;/p&gt;
&lt;p&gt;正则表达式是通过正则表达式引擎（regular expression engine）实现的。在Linux中，有两种流行的正则表达式引擎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POSIX基础正则表达式（basic regular expression，BRE）引擎&lt;/li&gt;
&lt;li&gt;POSIX扩展正则表达式（extended regular expression，ERE）引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;POSIX BRE引擎通常出现在依赖正则表达式进行文本过滤的编程语言中。它为常见模式提供了高级模式符号和特殊符号，比如匹配数字、单词以及按字母排序的字符。&lt;/p&gt;
&lt;h3 id=&quot;BRE-模式&quot;&gt;&lt;a href=&quot;#BRE-模式&quot; class=&quot;headerlink&quot; title=&quot;BRE 模式&quot;&gt;&lt;/a&gt;BRE 模式&lt;/h3&gt;&lt;h4 id=&quot;1-纯文本&quot;&gt;&lt;a href=&quot;#1-纯文本&quot; class=&quot;headerlink&quot; title=&quot;1.纯文本&quot;&gt;&lt;/a&gt;1.纯文本&lt;/h4&gt;&lt;p&gt;正则表达式模式都区分大小写。这意味着它们只会匹配大小写也相符的模式。完整的正则表达式文本并未在数据流中出现，因此匹配失败，sed编辑器不会显示任何文本。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;The books are expensive&amp;quot;&lt;/span&gt; | sed -n &lt;span class=&quot;string&quot;&gt;&amp;#x27;/book/p&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The books are expensive&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-特殊字符&quot;&gt;&lt;a href=&quot;#2-特殊字符&quot; class=&quot;headerlink&quot; title=&quot;2. 特殊字符&quot;&gt;&lt;/a&gt;2. 特殊字符&lt;/h4&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
    <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux文本处理</title>
    <link href="http://yoursite.com/2021/09/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2021/09/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</id>
    <published>2021-09-27T15:36:39.000Z</published>
    <updated>2021-10-07T10:09:00.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初识sed和gawk"><a href="#一、初识sed和gawk" class="headerlink" title="一、初识sed和gawk"></a>一、初识sed和gawk</h2><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><h4 id="1-sed-编辑器"><a href="#1-sed-编辑器" class="headerlink" title="1.sed 编辑器"></a>1.sed 编辑器</h4><p><strong>流编辑器（stream editor）</strong>，流编辑器则会在编辑器处理数据之前基于预先提供的一组规则来编辑数据流。sed编辑器可以根据命令来处理数据流中的数据</p><p>(1) 一次从输入中读取一行数据。</p><p>(2) 根据所提供的编辑器命令匹配数据。</p><p>(3) 按照命令修改流中的数据。</p><p>(4) 将新的数据输出到STDOUT。</p><p>在流编辑器将所有命令与一行数据匹配完毕后，它会读取下一行数据并重复这个过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed options script file</span><br></pre></td></tr></table></figure><table><thead><tr><th>选 项</th><th>描 述</th></tr></thead><tbody><tr><td>-e script</td><td>在处理输入时，将script中指定的命令添加到已有的命令中</td></tr><tr><td>-f file</td><td>在处理输入时，将file中指定的命令添加到已有的命令中</td></tr><tr><td>-n</td><td>不产生命令输出，使用print命令来完成输出</td></tr></tbody></table><p>script参数指定了应用于流数据上的单个命令。如果需要用多个命令，要么使用-e选项在命令行中指定，要么使用-f选项在单独的文件中指定。有大量的命令可用来处理数据。</p><ol><li><p>在命令行定义编辑器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This is a test&quot;</span> | sed <span class="string">&#x27;s/test/big test/&#x27;</span> </span><br><span class="line">This is a big <span class="built_in">test</span></span><br><span class="line"><span class="comment">#s命令会用斜线间指定的第二个文本字符串来替换第一个文本字符串模式。在本例中是big test替换了test。</span></span><br><span class="line"></span><br><span class="line">$ sed <span class="string">&#x27;s/dog/cat/&#x27;</span> data1.txt</span><br><span class="line"><span class="comment">#sed编辑器并不会修改文本文件的数据。它只会将修改后的数据发送到STDOUT。如果你查看原来的文本文件，它仍然保留着原始数据。</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在命令行使用多个编辑器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">&#x27;s/brown/green/; s/dog/cat/&#x27;</span> data1.txt</span><br></pre></td></tr></table></figure><p>两个命令都作用到文件中的每行数据上。命令之间必须用<strong>分号</strong>隔开，并且在命令<strong>末尾和分号之间不能有空格。</strong></p></li><li><p>从文件中读取编辑器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat script1.sed </span><br><span class="line">s/brown/green/ </span><br><span class="line">s/fox/elephant/ </span><br><span class="line">s/dog/cat/ </span><br><span class="line">$ </span><br><span class="line">$ sed -f script1.sed data1.txt </span><br><span class="line">The quick green elephant jumps over the lazy cat. </span><br><span class="line">The quick green elephant jumps over the lazy cat. </span><br><span class="line">The quick green elephant jumps over the lazy cat. </span><br><span class="line">The quick green elephant jumps over the lazy cat.</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-gawk"><a href="#2-gawk" class="headerlink" title="2.gawk"></a>2.gawk</h4><p> 提供一个类编程环境来修改和重新组织文件中的数据。</p><ul><li><p>定义变量来保存数据；</p></li><li><p>使用<strong>算术和字符串</strong>操作符来处理数据；</p></li><li><p>使用<strong>结构化编程</strong>概念（比如if-then语句和循环）来为数据处理增加处理逻辑；</p></li><li><p>通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告。</p><p>格式化日志文件</p></li></ul><ol><li><p><strong>gawk命令格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gawk options program file</span><br></pre></td></tr></table></figure><table><thead><tr><th>选 项</th><th>描 述</th></tr></thead><tbody><tr><td>-F fs</td><td>指定行中划分数据字段的字段分隔符</td></tr><tr><td>-f file</td><td>从指定的文件中读取程序</td></tr><tr><td>-v var=value</td><td>定义gawk程序中的一个变量及其默认值</td></tr><tr><td>-mf N</td><td>指定要处理的数据文件中的最大字段数</td></tr><tr><td>-mr N</td><td>指定数据文件中的最大数据行数</td></tr><tr><td>-W keyword</td><td>指定gawk的兼容模式或警告等级</td></tr></tbody></table></li><li><p><strong>从命令行读取程序脚本</strong></p><p>gawk程序脚本用一对花括号来定义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gawk命令行假定脚本是单个文本字符串，你还必须将脚本放到单引号中。下</span></span><br><span class="line">$ gawk <span class="string">&#x27;&#123;print &quot;Hello World!&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#没有在命令行上指定文件名，所以gawk程序会从STDIN接收数据。</span></span><br><span class="line"><span class="comment">#输入一行文本并按下回车键，gawk会对这行文本运行一遍程序脚本。</span></span><br></pre></td></tr></table></figure><p>gawk程序会针对数据流中的<strong>每行文本执行程序脚本</strong>。由于程序脚本被设为显示一行固定的文本字符串，因此不管在数据流中输入什么文本，都会得到同样的文本输出。</p><p>要终止这个gawk程序,bash shell提供了一个组合键来生成<strong>EOF（End-of-File）</strong>字符。<code>Ctrl+D</code>组合键会在bash中产生一个EOF字符。</p></li><li><p><strong>使用数据字段变量</strong></p><p>会自动给<strong>一行</strong>中的每个数据元素分配一个变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$0代表整个文本行；</span><br><span class="line">$1代表文本行中的第1个数据字段；</span><br><span class="line">$2代表文本行中的第2个数据字段；</span><br><span class="line">$n代表文本行中的第n个数据字段。</span><br></pre></td></tr></table></figure><p>gawk在读取一行文本时，会用预定义的字段分隔符划分每个数据字段。gawk中默认的字段分隔符是任意的空白字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat data2.txt </span><br><span class="line">One line of <span class="built_in">test</span> text. </span><br><span class="line">Two lines of <span class="built_in">test</span> text. </span><br><span class="line">Three lines of <span class="built_in">test</span> text.</span><br><span class="line">$ gawk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> data2.txt </span><br><span class="line">One </span><br><span class="line">Two </span><br><span class="line">Three</span><br></pre></td></tr></table></figure><p>采用了其他字段分隔符的文件，可以用-F选项指定。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gawk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p><strong>在程序脚本中使用多个命令</strong></p><p>允许你将多条命令组合成一个正常的程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#会给字段变量$4赋值 打印整个数据字段。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;My name is Rich&quot;</span> | gawk <span class="string">&#x27;&#123;$4=&quot;Christine&quot;; print $0&#125;&#x27;</span> </span><br><span class="line">My name is Christine</span><br></pre></td></tr></table></figure></li><li><p><strong>从文件中读取程序</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat script2.gawk </span><br><span class="line">&#123;<span class="built_in">print</span> <span class="variable">$1</span> <span class="string">&quot;&#x27;s home directory is &quot;</span> <span class="variable">$6</span>&#125; </span><br><span class="line">$ </span><br><span class="line">$ gawk -F: -f script2.gawk /etc/passwd </span><br><span class="line">root<span class="string">&#x27;s home directory is /root</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#要一条命令放一行即可</span></span><br><span class="line"><span class="string">$ cat script3.gawk </span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">text = &quot;&#x27;</span>s home directory is <span class="string">&quot; </span></span><br><span class="line"><span class="string">print <span class="variable">$1</span> text <span class="variable">$6</span></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在处理数据前运行脚本</strong></p><p>默认情况下，gawk会从输入中读取一行文本，针对该行的数据执行程序脚本。。有时可能需要在处理数据前运行脚本，比如为报告创建标题。<code>BEGIN</code>会强制gawk在读取数据前执行<code>BEGIN</code>关键字后指定的程序脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;BEGIN &#123;print &quot;Hello World!&quot;&#125;&#x27;</span> </span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN &#123;print &quot;The data3 File Contents:&quot;&#125; </span></span><br><span class="line"><span class="string">&gt; &#123;print $0&#125;&#x27;</span> data3.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>在处理数据后运行脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN &#123;print &quot;The data3 File Contents:&quot;&#125; </span></span><br><span class="line"><span class="string">&gt; &#123;print $0&#125; </span></span><br><span class="line"><span class="string">&gt; END &#123;print &quot;End of File&quot;&#125;&#x27;</span> data3.txt</span><br></pre></td></tr></table></figure><p>一个小程序脚本的完整的报告</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat script4.gawk </span><br><span class="line">BEGIN &#123; </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;The latest list of users and shells&quot;</span> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot; UserID \t Shell&quot;</span> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;-------- \t -------&quot;</span> </span><br><span class="line">FS=<span class="string">&quot;:&quot;</span> </span><br><span class="line">&#125; </span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">print</span> <span class="variable">$1</span> <span class="string">&quot; \t &quot;</span> <span class="variable">$7</span> </span><br><span class="line">&#125; </span><br><span class="line">END &#123; </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;This concludes the listing&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FS</code>的特殊变量。这是定义字段分隔符的另一种方法。</p></li></ol><h3 id="sed编辑器基础"><a href="#sed编辑器基础" class="headerlink" title="sed编辑器基础"></a>sed编辑器基础</h3><h4 id="1-替换选项"><a href="#1-替换选项" class="headerlink" title="1.替换选项"></a>1.替换选项</h4><ol><li><p><strong>替换标记</strong></p><p>替换命令在替换多行中的文本时能正常工作，但默认情况下它只替换每行中出现的<strong>第一处</strong>。替换一行中不同地方出现的文本必须使用<strong>替换标记（substitution flag）</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">s/pattern/replacement/flags</span><br><span class="line"></span><br><span class="line">1. 数字，表明新文本将替换第几处模式匹配的地方；</span><br><span class="line">2. g，表明新文本将会替换所有匹配的文本；</span><br><span class="line">3. p，表明原先行的内容要打印出来；</span><br><span class="line">4. w file，将替换的结果写到文件中。</span><br><span class="line"></span><br><span class="line">$  cat data4.txt </span><br><span class="line">This is a <span class="built_in">test</span> of the <span class="built_in">test</span> script. </span><br><span class="line">This is the second <span class="built_in">test</span> of the <span class="built_in">test</span> script.</span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 用新文本替换第几处模式匹配的地方。</span></span><br><span class="line">$  sed <span class="string">&#x27;s/test/trial/2&#x27;</span> data4.txt</span><br><span class="line">This is a <span class="built_in">test</span> of the trial script. </span><br><span class="line">This is the second <span class="built_in">test</span> of the trial script.</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. g替换文本中匹配模式所匹配的每处地方。</span></span><br><span class="line">$  sed <span class="string">&#x27;s/test/trial/g&#x27;</span> data4.txt </span><br><span class="line">This is a trial of the trial script. </span><br><span class="line">This is the second trial of the trial script.</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. p会打印与替换命令中指定的模式匹配的行。通常会和sed的-n选项一起使用。-n选项将禁止sed编辑器输出。只输出被替换命令修改过的行。</span></span><br><span class="line">$ cat data5.txt </span><br><span class="line">This is a <span class="built_in">test</span> line. </span><br><span class="line">This is a different line.  </span><br><span class="line">$ sed -n <span class="string">&#x27;s/test/trial/p&#x27;</span> data5.txt </span><br><span class="line">This is a trial line.</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. w替换标记会产生同样的输出,会将输出保存到指定文件</span></span><br><span class="line">$ sed <span class="string">&#x27;s/test/trial/w test.txt&#x27;</span> data5.txt </span><br><span class="line">This is a trial line. </span><br><span class="line">This is a different line. </span><br><span class="line">$ </span><br><span class="line">$ cat test.txt </span><br><span class="line">This is a trial line.</span><br></pre></td></tr></table></figure></li><li><p><strong>替换字符</strong></p><p>正斜线（/）不容易替换，，sed编辑器允许选择<strong>其他字符</strong>来作为替换命令中的字符串分隔符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s!/bin/bash!/bin/csh!&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-使用地址"><a href="#2-使用地址" class="headerlink" title="2.使用地址"></a>2.使用地址</h4><p>只想将命令作用于特定行或某些行，则必须用行寻址（line addressing）</p><ul><li>以<strong>数字形式</strong>表示行区间</li><li>用<strong>文本模式</strong>来过滤出行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[address]<span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">address &#123; </span><br><span class="line"> command1 </span><br><span class="line"> command2 </span><br><span class="line"> command3 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>以数字方式的行寻址</strong></p><p>用行在文本流中的行位置来引用。第一行编号为<strong>1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单个行号</span></span><br><span class="line">$ sed <span class="string">&#x27;2s/dog/cat/&#x27;</span> data1.txt </span><br><span class="line">The quick brown fox jumps over the lazy dog </span><br><span class="line">The quick brown fox jumps over the lazy cat </span><br><span class="line">The quick brown fox jumps over the lazy dog </span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line"></span><br><span class="line"><span class="comment">#行地址区间。</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3s/dog/cat/&#x27;</span> data1.txt </span><br><span class="line">The quick brown fox jumps over the lazy dog </span><br><span class="line">The quick brown fox jumps over the lazy cat </span><br><span class="line">The quick brown fox jumps over the lazy cat </span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line"></span><br><span class="line"><span class="comment">#文本中从某行开始的所有行 $</span></span><br><span class="line">$ sed <span class="string">&#x27;2,$s/dog/cat/&#x27;</span> data1.txt </span><br><span class="line">The quick brown fox jumps over the lazy dog </span><br><span class="line">The quick brown fox jumps over the lazy cat </span><br><span class="line">The quick brown fox jumps over the lazy cat </span><br><span class="line">The quick brown fox jumps over the lazy cat</span><br></pre></td></tr></table></figure></li><li><p><strong>使用文本模式过滤器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pattern/<span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>只修改用户Samantha的默认shell，可以使用sed命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ grep Samantha /etc/passwd </span><br><span class="line">Samantha:x:502:502::/home/Samantha:/bin/bash </span><br><span class="line"></span><br><span class="line"><span class="comment">#该命令只作用到匹配文本模式的行上。</span></span><br><span class="line">$ sed <span class="string">&#x27;/Samantha/s/bash/csh/&#x27;</span> /etc/passwd </span><br><span class="line">Samantha:x:502:502::/home/Samantha:/bin/csh </span><br></pre></td></tr></table></figure><p>sed编辑器在文本模式中采用了一种称为<strong>正则表达式</strong>（regular expression）的特性来帮助你创建匹配效果更好的模式。</p></li><li><p><strong>命令组合</strong></p><p>需要在单行上执行多条命令，可以用花括号将多条命令组合在一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2&#123; </span></span><br><span class="line"><span class="string">&gt; s/fox/elephant/ </span></span><br><span class="line"><span class="string">&gt; s/dog/cat/ </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data1.txt </span><br><span class="line">The quick brown fox jumps over the lazy dog. </span><br><span class="line">The quick brown elephant jumps over the lazy cat. </span><br><span class="line">The quick brown fox jumps over the lazy dog. </span><br><span class="line">The quick brown fox jumps over the lazy dog.</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-删除行"><a href="#3-删除行" class="headerlink" title="3.删除行"></a>3.删除行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从数据流中删除特定的文本行，通过行号指定</span></span><br><span class="line">$ sed <span class="string">&#x27;3d&#x27;</span> data6.txt </span><br><span class="line">This is line number 1. </span><br><span class="line">This is line number 2. </span><br><span class="line">This is line number 4.</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以通过区间</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3d&#x27;</span> data6.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过特殊的文件结尾</span></span><br><span class="line">$ sed <span class="string">&#x27;3,$d&#x27;</span> data6.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#模式匹配特性</span></span><br><span class="line">$ sed <span class="string">&#x27;/number 1/d&#x27;</span> data6.txt </span><br><span class="line">This is line number 2. </span><br><span class="line">This is line number 3. </span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><blockquote><p>sed编辑器不会修改原始文件。你删除的行只是从sed编辑器的输出中消失了。原文件仍然包含那些“删掉的”行。</p></blockquote><p>用两个文本模式来删除某个区间内的行,指定的第一个模式会“打开”行删除功能，第二个模式会“关闭”行删除功能。sed编辑器会删除两个指定行之间的所有行（包括指定的行）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/1/,/3/d&#x27;</span> data6.txt </span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><h4 id="4-插入和附加文本"><a href="#4-插入和附加文本" class="headerlink" title="4.插入和附加文本"></a>4.插入和附加文本</h4><p>sed编辑器允许向数据流插入和附加文本行。</p><ul><li>插入（insert）命令（i）会在指定行前增加一个新行；</li><li>附加（append）命令（a）会在指定行后增加一个新行。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;[address]command\</span></span><br><span class="line"><span class="string">new line&#x27;</span></span><br><span class="line"><span class="comment">#new line中的文本将会出现在sed编辑器输出中你指定的位置。</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;i\Test Line 1&#x27;</span> </span><br><span class="line">Test Line 1 </span><br><span class="line">Test Line 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#向数据流内部添加文本</span></span><br><span class="line">$ sed <span class="string">&#x27;3i\ </span></span><br><span class="line"><span class="string">&gt; This is an inserted line.&#x27;</span> data6.txt</span><br></pre></td></tr></table></figure><h4 id="5-修改行"><a href="#5-修改行" class="headerlink" title="5.修改行"></a>5.修改行</h4><p>修改（change）命令允许修改数据流中整行文本的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;3c\ </span></span><br><span class="line"><span class="string">&gt; This is a changed line of text.&#x27;</span> data6.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#用文本模式来寻址</span></span><br><span class="line">$ sed <span class="string">&#x27;/number 3/c\ </span></span><br><span class="line"><span class="string">&gt; This is a changed line of text.&#x27;</span> data6.txt</span><br></pre></td></tr></table></figure><p>文本模式修改命令会修改它<strong>匹配的数据流中的任意文本行</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文本模式修改命令会修改它**匹配的数据流中的任意文本行**。</span></span><br><span class="line">$ sed <span class="string">&#x27;/number 1/c\ </span></span><br><span class="line"><span class="string">&gt; This is a changed line of text.&#x27;</span> data8.txt </span><br><span class="line">This is a changed line of text. </span><br><span class="line">This is line number 2. </span><br><span class="line">This is line number 3. </span><br><span class="line">This is line number 4. </span><br><span class="line">This is a changed line of text.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#用这一行文本来替换数据流中的两行文本</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3c\ </span></span><br><span class="line"><span class="string">&gt; This is a new line of text.&#x27;</span> data6.txt </span><br><span class="line">This is line number 1. </span><br><span class="line">This is a new line of text. </span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><h4 id="6-转换命令"><a href="#6-转换命令" class="headerlink" title="6.转换命令"></a>6.转换命令</h4><p>是唯一可以处理<strong>单个字符</strong>的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[address]y/inchars/outchars/</span><br></pre></td></tr></table></figure><p>inchars中的第一个字符会被转换为outchars中的第一个字符，第二个字符会被转换成outchars中的第二个字符。果inchars和outchars的长度不同，则sed编辑器会产生一条错误消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This 1 is a test of 1 try.&quot;</span> | sed <span class="string">&#x27;y/123/456/&#x27;</span> </span><br><span class="line">This 4 is a <span class="built_in">test</span> of 4 try.</span><br></pre></td></tr></table></figure><p>无法限定只转换在特定地方出现的字符。</p><h4 id="7-打印"><a href="#7-打印" class="headerlink" title="7.打印"></a>7.打印</h4><ul><li><code>p</code>命令用来打印文本行；</li><li><code>等号（=）</code>命令用来打印行号；</li><li><code>l</code>（小写的L）命令用来列出行。</li></ul><ol><li><p><strong>打印行</strong>:打印包含匹配文本模式的行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-n选项，你可以禁止输出其他行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;/number 3/p&#x27;</span> data6.txt </span><br><span class="line">This is line number 3.</span><br><span class="line"></span><br><span class="line"><span class="comment">#在修改之前查看行</span></span><br><span class="line"><span class="comment">#查找包含数字3的行，然后执行两条命令。首先，脚本用p命令来打印出原始行；然后它用s命令替换文本，并用p标记打印出替换结果。输出同时显示了原来的行文本和新的行文本。</span></span><br><span class="line">$ sed -n <span class="string">&#x27;/3/&#123; </span></span><br><span class="line"><span class="string">&gt; p </span></span><br><span class="line"><span class="string">&gt; s/line/test/p </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data6.txt </span><br><span class="line">This is line number 3. </span><br><span class="line">This is <span class="built_in">test</span> number 3.</span><br></pre></td></tr></table></figure></li><li><p><strong>打印行号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/number 4/&#123; </span></span><br><span class="line"><span class="string">&gt; = </span></span><br><span class="line"><span class="string">&gt; p </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data6.txt </span><br><span class="line">4 </span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure></li><li><p><strong>列出行</strong></p><p>打印数据流中的文本和不可打印的ASCII字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat data9.txt </span><br><span class="line">This line contains tabs. </span><br><span class="line">$ </span><br><span class="line">$ sed -n <span class="string">&#x27;l&#x27;</span> data9.txt </span><br><span class="line">This\tline\tcontains\ttabs.$</span><br></pre></td></tr></table></figure></li></ol><h4 id="8-使用-sed-处理文件"><a href="#8-使用-sed-处理文件" class="headerlink" title="8.使用 sed 处理文件"></a>8.使用 sed 处理文件</h4><ol><li><p><strong>写入文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[address]w filename</span><br></pre></td></tr></table></figure><p><em>filename</em>可以使用相对路径或绝对路径，但不管是哪种，运行sed编辑器的用户都必须有文件的写权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#的前两行打印到一个文本文件中。</span></span><br><span class="line">$ sed <span class="string">&#x27;1,2w test.txt&#x27;</span> data6.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据一些公用的文本值从主文件中创建一份数据文件</span></span><br><span class="line">$ cat data11.txt </span><br><span class="line">Blum, R Browncoat </span><br><span class="line">McGuiness, A Alliance </span><br><span class="line">Bresnahan, C Browncoat </span><br><span class="line">Harken, C Alliance</span><br><span class="line">$ sed -n <span class="string">&#x27;/Browncoat/w Browncoats.txt&#x27;</span> data11.txt </span><br><span class="line">$ cat Browncoats.txt </span><br><span class="line">Blum, R Browncoat </span><br><span class="line">Bresnahan, C Browncoat</span><br></pre></td></tr></table></figure></li><li><p><strong>从文件读取数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[address]r filename</span><br></pre></td></tr></table></figure><p>只能指定单独一个行号或文本模式地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat data12.txt </span><br><span class="line">This is an added line. </span><br><span class="line">This is the second added line.</span><br><span class="line">$ sed <span class="string">&#x27;/number 2/r data12.txt&#x27;</span> data6.txt </span><br><span class="line">This is line number 1. </span><br><span class="line">This is line number 2. </span><br><span class="line">This is an added line. </span><br><span class="line">This is the second added line. </span><br><span class="line">This is line number 3. </span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><p>和删除命令配合使用：利用另一个文件中的数据来替换文件中的占位文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat notice.std</span><br><span class="line">Would the following people: </span><br><span class="line">LIST </span><br><span class="line">please report to the ship<span class="string">&#x27;s captain.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ sed &#x27;</span>/LIST/&#123; </span><br><span class="line">&gt; r data11.txt </span><br><span class="line">&gt; d </span><br><span class="line">&gt; &#125;<span class="string">&#x27; notice.std </span></span><br><span class="line"><span class="string">Would the following people: </span></span><br><span class="line"><span class="string">Blum, R Browncoat </span></span><br><span class="line"><span class="string">McGuiness, A Alliance </span></span><br><span class="line"><span class="string">Bresnahan, C Browncoat </span></span><br><span class="line"><span class="string">Harken, C Alliance </span></span><br><span class="line"><span class="string">please report to the ship&#x27;</span>s captain.</span><br><span class="line"><span class="comment">#件将通用占位文本LIST放在人物名单的位置。要在占位文本后插入名单，只需读取命令就行了。d删除占位文本</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二、sed进阶"><a href="#二、sed进阶" class="headerlink" title="二、sed进阶"></a>二、sed进阶</h2><h3 id="多行命令"><a href="#多行命令" class="headerlink" title="多行命令"></a>多行命令</h3><p>sed编辑器读取数据流时，它会基于换行符的位置将数据分成行。</p><p>如果你正在数据中查找短语Linux System Administrators Group，它很有可能出现在两行中，每行各包含其中一部分短语。</p><ul><li><code>N</code>：将数据流中的下一行加进来创建一个多行组（multiline group）来处理。</li><li><code>D</code>：删除多行组中的一行。</li><li><code>P</code>：打印多行组中的一行。</li></ul><h4 id="1-next-命令"><a href="#1-next-命令" class="headerlink" title="1.next 命令"></a>1.next 命令</h4><ol><li><p>单行的<strong>next</strong>命令</p><p>小写的n命令会告诉sed编辑器移动到数据流中的下一文本行，而不用重新回到命令的最开始再执行一遍。通常sed编辑器在移动到数据流中的下一文本行之前，会在当前行上执行完所有定义好的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#有个数据文件，共有5行内容，其中的两行是空的。目标是删除首行之后的空白行，而留下最后一行之前的空白行。如果写一个删掉空白行的sed脚本，你会删掉两个空白行。</span></span><br><span class="line">$ cat data1.txt</span><br><span class="line">This is the header line. </span><br><span class="line"></span><br><span class="line">This is a data line. </span><br><span class="line"></span><br><span class="line">This is the last line. </span><br><span class="line">$ </span><br><span class="line">$ sed <span class="string">&#x27;/^$/d&#x27;</span> data1.txt</span><br><span class="line">This is the header line. </span><br><span class="line">This is a data line. </span><br><span class="line">This is the last line.</span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本要查找含有单词header的那一行。找到之后，n命令会让sed编辑器移动到文本的下一行，也就是那个空行。</span></span><br><span class="line">$ sed <span class="string">&#x27;/header/&#123;n ; d&#125;&#x27;</span> data1.txt </span><br><span class="line">This is the header line. </span><br><span class="line">This is a data line. </span><br><span class="line"></span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure></li><li><p>合并文本行</p><p>单行next命令会将数据流中的下一文本行移动到sed编辑器的<strong>工作空间（称为模式空间）</strong>。多行版本的next命令（用大写N）会将下一文本行添加到模式空间中已有的文本后。</p><p>这样的作用是将数据流中的两个文本行合并到同一个模式空间中。文本行仍然用换行符分隔，但sed编辑器现在会将两行文本当成一行来处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sed编辑器脚本查找含有单词first的那行文本。找到该行后，它会用N命令将下一行合并到那行，然后用替换命令s将换行符替换成空格。</span></span><br><span class="line">$ cat data2.txt </span><br><span class="line">This is the header line. </span><br><span class="line">This is the first data line. </span><br><span class="line">This is the second data line. </span><br><span class="line">This is the last line. </span><br><span class="line">$ </span><br><span class="line">$ sed <span class="string">&#x27;/first/&#123; N ; s/\n/ / &#125;&#x27;</span> data2.txt </span><br><span class="line">This is the header line. </span><br><span class="line">This is the first data line. This is the second data line. </span><br><span class="line">This is the last line.</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果要在数据文件中查找一个可能会分散在两行中的文本短语的话</span></span><br><span class="line">$ cat data3.txt </span><br><span class="line">On Tuesday, the Linux System </span><br><span class="line">Administrator<span class="string">&#x27;s group meeting will be held. </span></span><br><span class="line"><span class="string">All System Administrators should attend. </span></span><br><span class="line"><span class="string">Thank you for your attendance. </span></span><br><span class="line"><span class="string">$ </span></span><br><span class="line"><span class="string">$ sed &#x27;</span>N ; s/System Administrator/Desktop User/<span class="string">&#x27; data3.txt </span></span><br><span class="line"><span class="string">On Tuesday, the Linux System </span></span><br><span class="line"><span class="string">Administrator&#x27;</span>s group meeting will be held. </span><br><span class="line">All Desktop Users should attend. </span><br><span class="line">Thank you <span class="keyword">for</span> your attendance.</span><br><span class="line"></span><br><span class="line"><span class="comment">#替换命令在System和Administrator之间用了通配符模式（.）来匹配空格和换行符</span></span><br><span class="line">$ sed <span class="string">&#x27;N ; s/System.Administrator/Desktop User/&#x27;</span> data3.txt </span><br><span class="line">On Tuesday, the Linux Desktop User<span class="string">&#x27;s group meeting will be held. </span></span><br><span class="line"><span class="string">All Desktop Users should attend. </span></span><br><span class="line"><span class="string">Thank you for your attendance.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#但当它匹配了换行符时，它就从字符串中删掉了换行符，导致两行合并成一行。</span></span><br><span class="line"><span class="string">#可以在sed编辑器脚本中用两个替换命令：一个用来匹配短语出现在多行中的情况，一个用来匹配短语出现在单行中的情况。</span></span><br><span class="line"><span class="string">$ sed &#x27;</span>N </span><br><span class="line">&gt; s/System\nAdministrator/Desktop\nUser/ </span><br><span class="line">&gt; s/System Administrator/Desktop User/ </span><br><span class="line">&gt; <span class="string">&#x27; data3.txt </span></span><br><span class="line"><span class="string">On Tuesday, the Linux Desktop </span></span><br><span class="line"><span class="string">User&#x27;</span>s group meeting will be held. </span><br><span class="line">All Desktop Users should attend. </span><br><span class="line">Thank you <span class="keyword">for</span> your attendance.</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个脚本总是在执行sed编辑器命令前将下一行文本读入到模式空间。当它到了最后一行文本时，就没有下一行可读了，所以N命令会叫sed编辑器停止。如果要匹配的文本正好在数据流的最后一行上，命令就不会发现要匹配的数据。</span></span><br><span class="line">$ cat data4.txt </span><br><span class="line">On Tuesday, the Linux System </span><br><span class="line">Administrator<span class="string">&#x27;s group meeting will be held. </span></span><br><span class="line"><span class="string">All System Administrators should attend. </span></span><br><span class="line"><span class="string">#由于System Administrator文本出现在了数据流中的最后一行，N命令会错过它，因为没有其他行可读入到模式空间跟这行合并。</span></span><br><span class="line"><span class="string">#将单行命令放到N命令前面，并将多行命令放到N命令后面，</span></span><br><span class="line"><span class="string">$ sed &#x27;</span> </span><br><span class="line">&gt; s/System Administrator/Desktop User/ </span><br><span class="line">&gt; N </span><br><span class="line">&gt; s/System\nAdministrator/Desktop\nUser/ </span><br><span class="line">&gt; <span class="string">&#x27; data4.txt </span></span><br><span class="line"><span class="string">On Tuesday, the Linux Desktop </span></span><br><span class="line"><span class="string">User&#x27;</span>s group meeting will be held. </span><br><span class="line">All Desktop Users should attend.</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-多行删除命令"><a href="#2-多行删除命令" class="headerlink" title="2.多行删除命令"></a>2.多行删除命令</h4><p>ed编辑器提供了多行删除命令D，它只删除模式空间中的第一行。该命令会删除到<strong>换行符</strong>（含换行符）为止的所有字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;N ; /System\nAdministrator/D&#x27;</span> data4.txt </span><br><span class="line">Administrator<span class="string">&#x27;s group meeting will be held. </span></span><br><span class="line"><span class="string">All System Administrators should attend.</span></span><br></pre></td></tr></table></figure><p>如果需要删掉目标数据字符串所在行的前一文本行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sed编辑器脚本会查找空白行，然后用N命令来将下一文本行添加到模式空间。如果新的模式空间内容含有单词header，则D命令会删除模式空间中的第一行。</span></span><br><span class="line">$ cat data5.txt </span><br><span class="line">This is the header line. </span><br><span class="line">This is a data line. </span><br><span class="line">This is the last line. </span><br><span class="line">$ </span><br><span class="line">$ sed <span class="string">&#x27;/^$/&#123;N ; /header/D&#125;&#x27;</span> data5.txt </span><br><span class="line">This is the header line. </span><br><span class="line">This is a data line. </span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><h4 id="3-多行打印命令"><a href="#3-多行打印命令" class="headerlink" title="3.多行打印命令"></a>3.多行打印命令</h4><p>只打印多行模式空间中的第一行</p><p>当你用<code>-n</code>选项来阻止脚本输出时，它和显示文本的单行p命令的用法大同小异。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;N ; /System\nAdministrator/P&#x27;</span> data3.txt </span><br><span class="line">On Tuesday, the Linux System</span><br></pre></td></tr></table></figure><h3 id="保持空间"><a href="#保持空间" class="headerlink" title="保持空间"></a>保持空间</h3><p><strong>模式空间（pattern space）</strong>是一块活跃的缓冲区，sed编辑器有另一块称作<strong>保持空间（hold space）</strong>的缓冲区域。</p><table><thead><tr><th>命 令</th><th>描 述</th></tr></thead><tbody><tr><td>h</td><td>将模式空间复制到保持空间</td></tr><tr><td>H</td><td>将模式空间附加到保持空间</td></tr><tr><td>g</td><td>将保持空间复制到模式空间</td></tr><tr><td>G</td><td>将保持空间附加到模式空间</td></tr><tr><td>x</td><td>交换模式空间和保持空间的内容</td></tr></tbody></table><p>通常，在使用h或H命令将字符串移动到保持空间后，最终还要用g、G或x命令将保存的字符串移回模式空间</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、初识sed和gawk&quot;&gt;&lt;a href=&quot;#一、初识sed和gawk&quot; class=&quot;headerlink&quot; title=&quot;一、初识sed和gawk&quot;&gt;&lt;/a&gt;一、初识sed和gawk&lt;/h2&gt;&lt;h3 id=&quot;文本处理&quot;&gt;&lt;a href=&quot;#文本处理&quot; class=&quot;headerlink&quot; title=&quot;文本处理&quot;&gt;&lt;/a&gt;文本处理&lt;/h3&gt;&lt;h4 id=&quot;1-sed-编辑器&quot;&gt;&lt;a href=&quot;#1-sed-编辑器&quot; class=&quot;headerlink&quot; title=&quot;1.sed 编辑器&quot;&gt;&lt;/a&gt;1.sed 编辑器&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;流编辑器（stream editor）&lt;/strong&gt;，流编辑器则会在编辑器处理数据之前基于预先提供的一组规则来编辑数据流。sed编辑器可以根据命令来处理数据流中的数据&lt;/p&gt;
&lt;p&gt;(1) 一次从输入中读取一行数据。&lt;/p&gt;
&lt;p&gt;(2) 根据所提供的编辑器命令匹配数据。&lt;/p&gt;
&lt;p&gt;(3) 按照命令修改流中的数据。&lt;/p&gt;
&lt;p&gt;(4) 将新的数据输出到STDOUT。&lt;/p&gt;
&lt;p&gt;在流编辑器将所有命令与一行数据匹配完毕后，它会读取下一行数据并重复这个过程。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sed options script file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本</title>
    <link href="http://yoursite.com/2021/09/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2021/09/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E8%84%9A%E6%9C%AC/</id>
    <published>2021-09-23T14:22:54.000Z</published>
    <updated>2021-09-23T14:30:52.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找可执行文件"><a href="#查找可执行文件" class="headerlink" title="查找可执行文件"></a>查找可执行文件</h2><p>当从命令行中运行一个程序的时候，Linux系统会搜索一系列目录来查找对应的文件。这些目录被定义在环境变量PATH中。如果你想找出系统中有哪些可执行文件可供使用，只需要扫描PATH环境变量中所有的目录就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># finding files in the PATH </span></span><br><span class="line"><span class="comment"># 首先是创建一个for循环，对环境变量PATH中的目录进行迭代。处理的时候别忘了设置IFS分隔符。</span></span><br><span class="line">IFS=: </span><br><span class="line"><span class="keyword">for</span> folder <span class="keyword">in</span> <span class="variable">$PATH</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$folder</span>:&quot;</span> </span><br><span class="line">     <span class="comment">#以使用另一个for循环来迭代特定目录中的所有文件</span></span><br><span class="line">     <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$folder</span>/* </span><br><span class="line">     <span class="keyword">do</span> </span><br><span class="line">     <span class="comment">#检查各个文件是否具有可执行权限</span></span><br><span class="line">     <span class="keyword">if</span> [ -x <span class="variable">$file</span> ] </span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot; <span class="variable">$file</span>&quot;</span> </span><br><span class="line">     <span class="keyword">fi</span> </span><br><span class="line">     <span class="keyword">done</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行这段代码时，会得到一个可以在命令行中使用的可执行文件的列表。</p><p>输出显示了在<strong>环境变量PATH所包含的所有目录中找到的全部可执行文件</strong></p><h2 id="创建多个用户目录"><a href="#创建多个用户目录" class="headerlink" title="创建多个用户目录"></a>创建多个用户目录</h2><p>不用为每个需要创建的新用户账户手动输入useradd命令，而是可以将需要添加的新用户账户放在<strong>一个文本文件</strong>中，然后创建一个简单的脚本进行处理。文本文件的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">userid,user name</span><br><span class="line"></span><br><span class="line">rich,Richard Blum </span><br><span class="line">christine,Christine Bresnahan </span><br><span class="line">barbara,Barbara Blum </span><br><span class="line">tim,Timothy Bresnahan</span><br></pre></td></tr></table></figure><p>第一个条目是你为新用户账户所选用的用户ID。第二个条目是用户的全名。两个值之间使用逗号分隔，这样就形成了一种名为逗号分隔值的文件格式这种文件格式在电子表格中极其常见，所以你可以轻松地在电子表格程序中创建用户账户列表，然后将其保存成.csv格式，以备shell脚本读取及处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># process new user accounts </span></span><br><span class="line">input=<span class="string">&quot;users.csv&quot;</span> </span><br><span class="line"><span class="comment">#我们将IFS分隔符设置成逗号，并将其放入while语句的条件测试部分。然后使用read命令读取文件中的各行。</span></span><br><span class="line"><span class="keyword">while</span> IFS=<span class="string">&#x27;,&#x27;</span> <span class="built_in">read</span> -r userid name </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;adding <span class="variable">$userid</span>&quot;</span> </span><br><span class="line"> useradd -c <span class="string">&quot;<span class="variable">$name</span>&quot;</span> -m <span class="variable">$userid</span> </span><br><span class="line"><span class="comment">#把数据从文件中送入while命令，只需在while命令尾部使用一个重定向符</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$input</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;查找可执行文件&quot;&gt;&lt;a href=&quot;#查找可执行文件&quot; class=&quot;headerlink&quot; title=&quot;查找可执行文件&quot;&gt;&lt;/a&gt;查找可执行文件&lt;/h2&gt;&lt;p&gt;当从命令行中运行一个程序的时候，Linux系统会搜索一系列目录来查找对应的文件。这些目录被定义在环境变量PATH中。如果你想找出系统中有哪些可执行文件可供使用，只需要扫描PATH环境变量中所有的目录就行了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# finding files in the PATH &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 首先是创建一个for循环，对环境变量PATH中的目录进行迭代。处理的时候别忘了设置IFS分隔符。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IFS=: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; folder &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$folder&lt;/span&gt;:&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;#以使用另一个for循环来迭代特定目录中的所有文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$folder&lt;/span&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	&lt;span class=&quot;comment&quot;&gt;#检查各个文件是否具有可执行权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ -x &lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt; ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot; &lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行这段代码时，会得到一个可以在命令行中使用的可执行文件的列表。&lt;/p&gt;
&lt;p&gt;输出显示了在&lt;strong&gt;环境变量PATH所包含的所有目录中找到的全部可执行文件&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建多个用户目录&quot;&gt;&lt;a href=&quot;#创建多个用户目录&quot; class=&quot;headerlink&quot; title=&quot;创建多个用户目录&quot;&gt;&lt;/a&gt;创建多个用户目录&lt;/h2&gt;&lt;p&gt;不用为每个需要创建的新用户账户手动输入useradd命令，而是可以将需要添加的新用户账户放在&lt;strong&gt;一个文本文件&lt;/strong&gt;中，然后创建一个简单的脚本进行处理。文本文件的格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;userid,user name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rich,Richard Blum &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;christine,Christine Bresnahan &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barbara,Barbara Blum &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tim,Timothy Bresnahan&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第一个条目是你为新用户账户所选用的用户ID。第二个条目是用户的全名。两个值之间使用逗号分隔，这样就形成了一种名为逗号分隔值的文件格式这种文件格式在电子表格中极其常见，所以你可以轻松地在电子表格程序中创建用户账户列表，然后将其保存成.csv格式，以备shell脚本读取及处理。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# process new user accounts &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input=&lt;span class=&quot;string&quot;&gt;&amp;quot;users.csv&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#我们将IFS分隔符设置成逗号，并将其放入while语句的条件测试部分。然后使用read命令读取文件中的各行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; IFS=&lt;span class=&quot;string&quot;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; -r userid name &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;adding &lt;span class=&quot;variable&quot;&gt;$userid&lt;/span&gt;&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	useradd -c &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$name&lt;/span&gt;&amp;quot;&lt;/span&gt; -m &lt;span class=&quot;variable&quot;&gt;$userid&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#把数据从文件中送入while命令，只需在while命令尾部使用一个重定向符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$input&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
    <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本编程基础</title>
    <link href="http://yoursite.com/2021/09/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/09/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-20T13:02:26.000Z</published>
    <updated>2021-09-27T15:33:36.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、构建基本脚本"><a href="#一、构建基本脚本" class="headerlink" title="一、构建基本脚本"></a>一、构建基本脚本</h2><h3 id="创建shell基本"><a href="#创建shell基本" class="headerlink" title="创建shell基本"></a>创建shell基本</h3><p>文件的第一行指定要使用的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure><p>写好一个文件之后需要执行，但是必须要让shell找到脚本</p><ul><li>将shell脚本文件所处的目录添加到PATH环境变量中；</li><li>在提示符中用绝对或相对文件路径来引用shell脚本文件。</li></ul><h3 id="显示消息"><a href="#显示消息" class="headerlink" title="显示消息"></a>显示消息</h3><p>果在<code>echo</code>命令后面加上了一个字符串，该命令就能显示出这个文本字符串。</p><p>默认情况下，不需要使用引号将要显示的文本字符串划定出来。echo命令可用单引号或双引号来划定文本字符串。需要在文本中使用其中一种引号，而用另外一种来将字符串划定起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test to see if you&#x27;re paying attention&quot;</span></span><br></pre></td></tr></table></figure><p>如果想把文本字符串和命令输出显示在同一行中,用echo语句的<code>-n</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;The time and date are: &quot;</span></span><br><span class="line">date</span><br></pre></td></tr></table></figure><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>以在环境变量名称之前加上美元符（$）来使用这些环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;User info for userid: <span class="variable">$USER</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要转转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The cost of the item is \$15&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>${variable}形式引用的变量。变量名两侧额外的花括号通常用来帮助识别美元符后的变量名。</p></blockquote><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>使用等号将值赋给用户变量。在变量、等号和值之间不能出现空格。</p><p>在脚本的整个生命周期里，shell脚本中定义的变量<strong>会一直保持着它们的值</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">days=10 </span><br><span class="line">guest=<span class="string">&quot;Katie&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$guest</span> checked in <span class="variable">$days</span> days ago&quot;</span> </span><br><span class="line">days=5 </span><br><span class="line">guest=<span class="string">&quot;Jessica&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$guest</span> checked in <span class="variable">$days</span> days ago&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变量赋值</span></span><br><span class="line">value1=10 </span><br><span class="line">value2=<span class="variable">$value1</span>  <span class="comment">#10</span></span><br><span class="line">value3=value1   <span class="comment">#value1</span></span><br><span class="line"><span class="built_in">echo</span> The resulting value is <span class="variable">$value2</span></span><br></pre></td></tr></table></figure><p>变量每次被引用时，都会输出当前赋给它的值。<strong>引用一个变量值时需要使用美元符</strong>，而引用变量来<strong>对其进行赋值</strong>时则<strong>不要使用</strong>$。</p><h4 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h4><p>shell脚本可以从命令输出中提取信息，并将其赋给变量。</p><p>有两种方法可以将命令输出赋给变量：</p><ul><li>反引号字符（`）</li><li>$()格式</li></ul><p>命令替换允许你将shell命令的输出赋给变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testing=`date`</span><br><span class="line">testing=$(date)</span><br></pre></td></tr></table></figure><p>shell会运行命令替换符号中的命令，并将其输出赋给变量testing。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在脚本中通过命令替换获得当前日期并用它来生成唯一文件名。</span></span><br><span class="line"><span class="comment"># copy the /usr/bin directory listing to a log file </span></span><br><span class="line"><span class="comment"># +%y%m%d格式告诉date命令将日期显示为两位数的年月日的组合。140131</span></span><br><span class="line">today=$(date +%y%m%d) </span><br><span class="line">ls /usr/bin -al &gt; <span class="built_in">log</span>.<span class="variable">$today</span></span><br></pre></td></tr></table></figure><blockquote><p>命令替换会创建一个子shell来运行对应的命令。子shell（subshell）是由运行该脚本的shell所创建出来的一个独立的子shell（child shell）。正因如此，由该子shell所执行命令是<strong>无法使用脚本中所创建的变量的。</strong></p><p>使用路径./运行命令的话，也会创建出子shell；要是运行命令的时候不加入路径，就不会创建子shell。如果你使用的是内建的shell命令，并不会涉及子shell。</p></blockquote><h3 id="重定向输入和输出"><a href="#重定向输入和输出" class="headerlink" title="重定向输入和输出"></a>重定向输入和输出</h3><p>你想要保存某个命令的输出而不仅仅只是让它显示在显示器上。</p><h4 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重定向将命令的输出发送到一个文件中。&gt;</span></span><br><span class="line"><span class="built_in">command</span> &gt; outputfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果输出文件已经存在了，重定向操作符会用新的文件数据覆盖已有文件。</span></span><br><span class="line">date &gt; test6</span><br><span class="line"></span><br><span class="line"><span class="comment">#想要将命令的输出追加到已有文件中,用双大于号（&gt;&gt;）来追加数据。</span></span><br><span class="line">date &gt;&gt; test6</span><br></pre></td></tr></table></figure><h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h4><p>输入重定向将文件的内容重定向到命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt; inputfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#wc &lt; test6</span></span><br><span class="line"><span class="comment">#wc命令可以对对数据中的文本进行计数。文本的行数/文本的词数/文本的字节数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内联输入重定向,无需使用文件进行重定向，只需要在命令行中指定用于输入重定向的数据就可以了。</span></span><br><span class="line"><span class="comment">#指定一个文本标记来划分输入数据的开始和结尾。</span></span><br><span class="line"><span class="built_in">command</span> &lt;&lt; <span class="string">marker</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#在命令行上使用内联输入重定向时，shell会用PS2环境变量中定义的次提示符来提示输入数据。</span></span><br><span class="line"><span class="string">$  wc &lt;&lt; EOF </span></span><br><span class="line"><span class="string">&gt; test string 1 </span></span><br><span class="line"><span class="string">&gt; test string 2 </span></span><br><span class="line"><span class="string">&gt; test string 3 </span></span><br><span class="line"><span class="string">&gt; EOF</span></span><br></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>有时需要将一个命令的输出作为另一个命令的输入。</p><p>我们不用将命令输出重定向到文件中，可以将其直接重定向到另一个命令。这个过程叫作<strong>管道连接（piping）</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2</span><br></pre></td></tr></table></figure><p>在系统内部将它们连接起来。在第一个命令产生输出的同时，输出会被立即送给第二个命令。数据传输不会用到任何中间文件或缓冲区。</p><p>可以在一条命令中使用任意多条管道。可以持续地将命令的输出通过管道传给其他命令来细化操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | sort | more</span><br><span class="line">ls -l | more</span><br></pre></td></tr></table></figure><h3 id="执行数学运算"><a href="#执行数学运算" class="headerlink" title="执行数学运算"></a>执行数学运算</h3><h4 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h4><p>expr命令允许在命令行上处理数学表达式</p><p>expr命令能够识别少数的数学和字符串操作符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#许多expr命令操作符在shell中另有含义（比如星号）。当它们出现在在expr命令中时，会得到一些诡异的结果。</span></span><br><span class="line">$  expr 5 * 2</span><br><span class="line">expr: syntax error</span><br><span class="line"></span><br><span class="line">$ expr 5 \* 2</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="使用方括号"><a href="#使用方括号" class="headerlink" title="使用方括号"></a>使用方括号</h4><p>在bash中，在将一个数学运算结果赋给某个变量时，可以用美元符和方括号（<code>$[ operation ]</code>）将数学表达式围起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$  var1=$[1 + 5] </span><br><span class="line">$  <span class="built_in">echo</span> <span class="variable">$var1</span> </span><br><span class="line">6 </span><br><span class="line">$  var2=$[<span class="variable">$var1</span> * 2] </span><br><span class="line">$  <span class="built_in">echo</span> <span class="variable">$var2</span> </span><br><span class="line">12 </span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>在bash shell脚本中进行算术运算会有一个主要的限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">var1=100 </span><br><span class="line">var2=45 </span><br><span class="line">var3=$[<span class="variable">$var1</span> / <span class="variable">$var2</span>] </span><br><span class="line"><span class="built_in">echo</span> The final result is <span class="variable">$var3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">The final result is 2</span><br></pre></td></tr></table></figure><p>bash shell数学运算符只支持整数运算。</p><h4 id="浮点解决方案"><a href="#浮点解决方案" class="headerlink" title="浮点解决方案"></a>浮点解决方案</h4><p>用内建的bash计算器，叫作bc。</p><ol><li><p>bc基本用法</p><p>允许在命令行中输入浮点表达式，然后解释并计算该表达式可以识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数字（整数和浮点数）</span><br><span class="line">变量（简单变量和数组）</span><br><span class="line">注释（以#或C语言中的/* */开始的行）</span><br><span class="line">表达式</span><br><span class="line">编程语句（例如if-then语句）</span><br><span class="line">函数</span><br></pre></td></tr></table></figure><p>浮点运算是由内建变量scale控制的。必须将这个值设置为你希望在计算结果中保留的小数位</p><p>scale变量的默认值是0。在scale值被设置前，bash计算器的计算结果不包含小数位。在将其值设置成4后，bash计算器显示的结果包含四位小数。-q命令行选项可以不显示bash计算器冗长的欢迎信息.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$  bc -q </span><br><span class="line">3.44 / 5 </span><br><span class="line">0 </span><br><span class="line">scale=4 </span><br><span class="line">3.44 / 5 </span><br><span class="line">.6880 </span><br><span class="line">quit</span><br></pre></td></tr></table></figure></li><li><p>在脚本中使用<strong>bc</strong> </p><p>可以用命令替换运行bc命令，并将输出赋给一个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一部分options允许你设置变量。如果你需要不止一个变量，可以用分号将其分开。expression参数定义了通过bc执行的数学表达式。</span></span><br><span class="line">variable=$(<span class="built_in">echo</span> <span class="string">&quot;options; expression&quot;</span> | bc)</span><br><span class="line"></span><br><span class="line">var1=$(<span class="built_in">echo</span> <span class="string">&quot;scale=4; 3.44 / 5&quot;</span> | bc) </span><br><span class="line"><span class="built_in">echo</span> The answer is <span class="variable">$var1</span></span><br></pre></td></tr></table></figure><p>如果需要进行大量运算，在一个命令行中列出多个表达式就会有点麻烦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用内联输入重定向，它允许你直接在命令行中重定向数据。，仍然需要命令替换符号将bc命令的输出赋给变量。</span></span><br><span class="line">variable=$(bc &lt;&lt; <span class="string">EOF </span></span><br><span class="line"><span class="string">options </span></span><br><span class="line"><span class="string">statements </span></span><br><span class="line"><span class="string">expressions </span></span><br><span class="line"><span class="string">EOF</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var1=10.46 </span><br><span class="line">var2=43.67 </span><br><span class="line">var3=33.2 </span><br><span class="line">var4=71 </span><br><span class="line">var5=$(bc &lt;&lt; <span class="string">EOF </span></span><br><span class="line"><span class="string">scale = 4 </span></span><br><span class="line"><span class="string">a1 = ( $var1 * $var2) </span></span><br><span class="line"><span class="string">b1 = ($var3 * $var4) </span></span><br><span class="line"><span class="string">a1 + b1 </span></span><br><span class="line"><span class="string">EOF</span> </span><br><span class="line">) </span><br><span class="line"><span class="built_in">echo</span> The final answer <span class="keyword">for</span> this mess is <span class="variable">$var5</span></span><br></pre></td></tr></table></figure><p>在bash计算器中创建的变量<strong>只在bash计算器中有效</strong>，不能在shell脚本中使用。</p></li></ol><h3 id="退出脚本"><a href="#退出脚本" class="headerlink" title="退出脚本"></a>退出脚本</h3><p>shell中运行的每个命令都使用退出状态码（exit status）告诉shell它已经运行完毕。退出状态码是一个0～255的整数值，在命令结束运行时由命令传给shell。可以捕获这个值并在脚本中使用。</p><h4 id="查看退出状态码"><a href="#查看退出状态码" class="headerlink" title="查看退出状态码"></a>查看退出状态码</h4><p><code>$?</code>来保存上个已执行命令的退出状态码。对于需要进行检查的命令，必须在其运行完毕后立刻查看或使用$?变量。它的值会变成由shell所执行的<strong>最后一条命令的退出状态码</strong>。</p><p>一个成功结束的命令的退出状态码是0。如果一个命令结束时有错误，退出状态码就是一个正数值。</p><table><thead><tr><th>状 态 码</th><th>描 述</th></tr></thead><tbody><tr><td>0</td><td>命令成功结束</td></tr><tr><td>1</td><td>一般性未知错误</td></tr><tr><td>2</td><td>不适合的shell命令</td></tr><tr><td>126</td><td>命令不可执行</td></tr><tr><td>127</td><td>没找到命令</td></tr><tr><td>128</td><td>无效的退出参数</td></tr><tr><td>128+x</td><td>与Linux信号x相关的严重错误</td></tr><tr><td>130</td><td>通过Ctrl+C终止的命令</td></tr><tr><td>255</td><td>正常范围之外的退出状态码</td></tr></tbody></table><h4 id="exit-命令"><a href="#exit-命令" class="headerlink" title="exit 命令"></a>exit 命令</h4><p>shell脚本会以脚本中的最后一个命令的退出状态码退出。</p><p><code>exit</code>命令允许你在脚本结束时指定一个退出状态码。</p><p>因为退出状态码最大只能是255。超出这个区间，退出状态码被缩减到了0～255的区间。shell通过模运算得到这个结果。一个值的模就是被除后的余数。最终的结果是指定的数值除以256后得到的余数。</p><h2 id="二、结构化命令"><a href="#二、结构化命令" class="headerlink" title="二、结构化命令"></a>二、结构化命令</h2><h3 id="使用if-then-语句"><a href="#使用if-then-语句" class="headerlink" title="使用if-then 语句"></a>使用if-then 语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>bash shell的if语句会运行if后面的那个命令。如果该命令的退出状态码是0（该命令成功运行），位于then部分的命令就会被执行。。如果该命令的退出状态码是其他值，then部分的命令就不会被执行，bash shell会继续执行脚本中的下一个命令。fi语句用来表示if-then语句到此结束。</p><blockquote><p>if <em>command;</em> then<br> <em>commands</em><br>fi </p><p>通过把分号放在待求值的命令尾部，就<strong>可以将then语句放在同一行上</strong>了，这样看起来更像其他编程语言中的if-then语句。</p></blockquote><p>在then部分，你可以使用<strong>不止一条命令</strong>。可以像在脚本中的其他地方一样在这里列出多条命令。bash shell会将这些命令当成一个块</p><h3 id="if-then-else-语句"><a href="#if-then-else-语句" class="headerlink" title="if-then-else 语句"></a>if-then-else 语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>当if语句中的命令返回退出状态码0时，then部分中的命令会被执行，这跟普通的if-then语句一样。当if语句中的命令返回非零退出状态码时，bash shell会执行else部分中的命令。</p><h3 id="嵌套-if"><a href="#嵌套-if" class="headerlink" title="嵌套 if"></a>嵌套 if</h3><p>elif。这样就不用再书写多个if-then语句了。elif使用另一个if-then语句延续else部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command1</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">elif</span> command2</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> more commands</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> commands </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>elif语句行提供了另一个要测试的命令，这类似于原始的if语句行。如果elif后命令的退出状态码是0，则bash会执行第二个then语句部分的命令。使用这种嵌套方法，代码更清晰，逻辑更易懂。</p><h3 id="test-命令"><a href="#test-命令" class="headerlink" title="test 命令"></a>test 命令</h3><p>if-then语句是否能测试命令<strong>退出状态码之外的条件</strong>。答案是不能。</p><p><code>test</code>命令提供了在if-then语句中测试不同条件的途径。如果test命令中列出的条件成立，test命令就会退出并返回退出状态码0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> condition</span><br></pre></td></tr></table></figure><p>bash shell提供了另一种条件测试方法，无需在if-then语句中声明test命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>第一个方括号之后和第二个方括号之前必须加上一个空格，否则就会报错。</p><p>test命令可以判断三类条件：</p><ul><li>数值比较</li><li>字符串比较</li><li>文件比较</li></ul><h4 id="1-数值比较"><a href="#1-数值比较" class="headerlink" title="1. 数值比较"></a>1. 数值比较</h4><table><thead><tr><th>比 较</th><th>描 述</th><th></th></tr></thead><tbody><tr><td>n1 -eq n2</td><td>检查n1是否与n2相等</td><td>equal</td></tr><tr><td>n1 -ge n2</td><td>检查n1是否大于或等于n2</td><td>great than or equal</td></tr><tr><td>n1 -gt n2</td><td>检查n1是否大于n2</td><td>greater than</td></tr><tr><td>n1 -le n2</td><td>检查n1是否小于或等于n2</td><td>less than or equal</td></tr><tr><td>n1 -lt n2</td><td>检查n1是否小于n2</td><td>less than</td></tr><tr><td>n1 -ne n2</td><td>检查n1是否不等于n2</td><td>not equal</td></tr></tbody></table><h4 id="2-字符串比较"><a href="#2-字符串比较" class="headerlink" title="2.字符串比较"></a>2.字符串比较</h4><p>条件测试还允许比较字符串值。比较字符串比较烦琐，你马上就会看到。</p><table><thead><tr><th>比 较</th><th>描 述</th></tr></thead><tbody><tr><td>str1 = str2</td><td>检查str1是否和str2相同</td></tr><tr><td>str1 != str2</td><td>检查str1是否和str2不同</td></tr><tr><td>str1 &lt; str2</td><td>检查str1是否比str2小</td></tr><tr><td>str1 &gt; str2</td><td>检查str1是否比str2大</td></tr><tr><td>-n str1</td><td>检查str1的长度是否非0</td></tr><tr><td>-z str1</td><td>检查str1的长度是否为0</td></tr></tbody></table><p>大于号和小于号必须转义，否则shell会把它们当作重定向符号，把字符串值当作文件名；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># mis-using string comparisons </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">val1=Testing </span><br><span class="line">val2=testing</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#转义</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$val1</span> \&gt; <span class="variable">$val2</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$val1</span> is greater than <span class="variable">$val2</span>&quot;</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$val1</span> is less than <span class="variable">$val2</span>&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>在比较测试中，<strong>大写字母被认为是小于小写字母</strong>的。但sort命令恰好相反。当你将同样的字符串放进文件中并用sort命令排序时，小写字母会先出现。这是由各个命令使用的排序技术不同造成的。</p><p><strong>比较测试中使用的是标准的ASCII顺序</strong>，根据每个字符的ASCII数值来决定排序结果。sort命令使用的是<strong>系统的本地化语言设置中定义的排序顺序</strong>。对于英语，本地化设置指定了在排序顺序中小写字母出现在大写字母前。</p><h4 id="3-文件比较"><a href="#3-文件比较" class="headerlink" title="3.文件比较"></a>3.文件比较</h4><p>允许你测试Linux文件系统上文件和目录的状态。test命令的比较功能。</p><table><thead><tr><th>比 较</th><th>描 述</th></tr></thead><tbody><tr><td>-d file</td><td>检查file是否存在并是一个目录</td></tr><tr><td>-e file</td><td>检查file是否存在</td></tr><tr><td>-f file</td><td>检查file是否存在并是一个文件</td></tr><tr><td>-r file</td><td>检查file是否存在并可读</td></tr><tr><td>-s file</td><td>检查file是否存在并非空</td></tr><tr><td>-w file</td><td>检查file是否存在并可写</td></tr><tr><td>-x file</td><td>检查file是否存在并可执行</td></tr><tr><td>-O file</td><td>检查file是否存在并属当前用户所有</td></tr><tr><td>-G file</td><td>检查file是否存在并且默认组与当前用户相同</td></tr><tr><td>file1 -nt file2</td><td>检查file1是否比file2新</td></tr><tr><td>file1 -ot file2</td><td>检查file1是否比file2旧</td></tr></tbody></table><h3 id="复合条件测试"><a href="#复合条件测试" class="headerlink" title="复合条件测试"></a>复合条件测试</h3><p>if-then语句允许你使用布尔逻辑来组合测试。有两种布尔运算符可用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ condition1 ] &amp;&amp; [ condition2 ] </span><br><span class="line">[ condition1 ] || [ condition2 ]</span><br></pre></td></tr></table></figure><p>要让then部分的命令执行，两个条件都必须满足。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># testing compound comparisons </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$HOME</span> ] &amp;&amp; [ -w <span class="variable">$HOME</span>/testing ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;The file exists and you can write to it&quot;</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;I cannot write to the file&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="if-then-的高级特性"><a href="#if-then-的高级特性" class="headerlink" title="if-then 的高级特性"></a>if-then 的高级特性</h3><h4 id="用于数学表达式的双括号"><a href="#用于数学表达式的双括号" class="headerlink" title="用于数学表达式的双括号"></a>用于数学表达式的双括号</h4><p>test命令只能在比较中使用简单的算术操作。双括号命令提供了更多的数学符号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(( expression ))</span><br></pre></td></tr></table></figure><p>双括号命令符号</p><table><thead><tr><th>符 号</th><th>描 述</th></tr></thead><tbody><tr><td>val++</td><td>后增</td></tr><tr><td>val–</td><td>后减</td></tr><tr><td>++val</td><td>先增</td></tr><tr><td>–val</td><td>先减</td></tr><tr><td>!</td><td>逻辑求反</td></tr><tr><td>~</td><td>位求反</td></tr><tr><td>**</td><td>幂运算</td></tr><tr><td>&lt;&lt;</td><td>左位移</td></tr><tr><td>&gt;&gt;</td><td>右位移</td></tr><tr><td>&amp;</td><td>位布尔和</td></tr><tr><td>|</td><td>位布尔或</td></tr><tr><td>&amp;&amp;</td><td>逻辑和</td></tr><tr><td>||</td><td>逻辑或</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using double parenthesis </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">val1=10 </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">if</span> (( <span class="variable">$val1</span> ** 2 &gt; 90 )) </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> (( val2 = <span class="variable">$val1</span> ** 2 )) </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;The square of <span class="variable">$val1</span> is <span class="variable">$val2</span>&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="用于高级字符串处理功能的双方括号"><a href="#用于高级字符串处理功能的双方括号" class="headerlink" title="用于高级字符串处理功能的双方括号"></a>用于高级字符串处理功能的双方括号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ expression ]]</span><br></pre></td></tr></table></figure><p>它提供了test命令未提供的另一个特性——模式匹配（pattern matching）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using pattern matching </span></span><br><span class="line"><span class="comment"># 定义一个正则表达式来匹配字符串值。</span></span><br><span class="line"><span class="comment"># 双方括号命令$USER环境变量进行匹配，看它是否以字母r开头。</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$USER</span> == r* ]] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$USER</span>&quot;</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Sorry, I do not know you&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="case-命令"><a href="#case-命令" class="headerlink" title="case 命令"></a>case 命令</h3><p>在一组可能的值中寻找特定值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> variable <span class="keyword">in</span> </span><br><span class="line">pattern1 | pattern2) commands1;; </span><br><span class="line">pattern3) commands2;; </span><br><span class="line">*) default commands;; </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>case命令会将指定的变量与不同模式进行比较。可以通过竖线操作符在一行中分隔出多个模式模式。星号会捕获所有与已知模式不匹配的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using the case command </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$USER</span> <span class="keyword">in</span> </span><br><span class="line">rich | barbara) </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Welcome, <span class="variable">$USER</span>&quot;</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Please enjoy your visit&quot;</span>;; </span><br><span class="line">testing) </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Special testing account&quot;</span>;; </span><br><span class="line">jessica) </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Do not forget to log off when you&#x27;re done&quot;</span>;; </span><br><span class="line">*) </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Sorry, you are not allowed here&quot;</span>;; </span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">$ ./test26.sh</span><br><span class="line">Welcome, rich </span><br><span class="line">Please enjoy your visit</span><br></pre></td></tr></table></figure><h2 id="三、循环结构化指令"><a href="#三、循环结构化指令" class="headerlink" title="三、循环结构化指令"></a>三、循环结构化指令</h2><h3 id="for-命令"><a href="#for-命令" class="headerlink" title="for 命令"></a>for 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> list </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> commands </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>在list参数中，你需要提供迭代中要用到的一系列值。</p><h4 id="1-读取列表中的值"><a href="#1-读取列表中的值" class="headerlink" title="1.读取列表中的值"></a>1.读取列表中的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># basic for command </span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">test</span> <span class="keyword">in</span> Alabama Alaska Arizona Arkansas California Colorado </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> The next state is <span class="variable">$test</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>每次for命令遍历值列表，它都会将列表中的下个值赋给$test变量。$test变量可以像for命令语句中的其他脚本变量一样使用。在最后一次迭代后，<strong>$test变量的值会在shell脚本的剩余部分一直保持有效</strong>。它会一直保持最后一次迭代的值。</p><h4 id="2-读取列表中的复杂值"><a href="#2-读取列表中的复杂值" class="headerlink" title="2.读取列表中的复杂值"></a>2.读取列表中的复杂值</h4><p>有时会遇到难处理的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># another example of how not to use the for command </span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">test</span> <span class="keyword">in</span> I don<span class="string">&#x27;t know if this&#x27;</span>ll work </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;word:<span class="variable">$test</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line">$ ./badtest1 </span><br><span class="line">word:I </span><br><span class="line">word:dont know <span class="keyword">if</span> thisll </span><br><span class="line">word:work</span><br></pre></td></tr></table></figure><p>有2个解决方法</p><ul><li>使用转义字符（反斜线）来将单引号转义；</li><li>使用双引号来定义用到单引号的值。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># another example of how not to use the for command </span></span><br><span class="line"><span class="comment">#在第一个有问题的地方添加了反斜线字符来转义don&#x27;t中的单引号。在第二个有问题的地方将this&#x27;ll用双引号圈起来。</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">test</span> <span class="keyword">in</span> I don\<span class="string">&#x27;t know if &quot;this&#x27;</span>ll<span class="string">&quot; work </span></span><br><span class="line"><span class="string">do </span></span><br><span class="line"><span class="string"> echo &quot;</span>word:<span class="variable">$test</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">done </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ ./test2 </span></span><br><span class="line"><span class="string">word:I </span></span><br><span class="line"><span class="string">word:don&#x27;t </span></span><br><span class="line"><span class="string">word:know </span></span><br><span class="line"><span class="string">word:if </span></span><br><span class="line"><span class="string">word:this&#x27;ll </span></span><br><span class="line"><span class="string">word:work</span></span><br></pre></td></tr></table></figure><h4 id="3-从变量读取列表"><a href="#3-从变量读取列表" class="headerlink" title="3.从变量读取列表"></a>3.从变量读取列表</h4><p>将一系列值都集中存储在了一个变量中，然后需要遍历变量中的整个列表。也可以通过for命令完成这个任务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using a variable to hold the list </span></span><br><span class="line">list=<span class="string">&quot;Alabama Alaska Arizona Arkansas Colorado&quot;</span> </span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> <span class="variable">$list</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Have you ever visited <span class="variable">$state</span>?&quot;</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="4-从命令读取值"><a href="#4-从命令读取值" class="headerlink" title="4. 从命令读取值"></a>4. 从命令读取值</h4><p>可以用命令替换来执行任何能产生输出的命令，然后在for命令中使用该命令的输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># reading values from a file </span></span><br><span class="line">file=<span class="string">&quot;states&quot;</span> </span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> $(cat <span class="variable">$file</span>) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Visit beautiful <span class="variable">$state</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>并没有解决数据中有空格的问题。如果你列出了一个名字中有空格的单词，for命令仍然会将每个单词当作单独的值。</p><h4 id="5-更改字段分隔符"><a href="#5-更改字段分隔符" class="headerlink" title="5.更改字段分隔符"></a>5.更改字段分隔符</h4><p>特殊的环境变量IFS，叫作<strong>内部字段分隔符（internal field separator）</strong>。</p><p>IFS环境变量定义了bash shell用作字段分隔符的一系列字符。默认情况下，bash shell会将下列字符当作字段分隔符：</p><ul><li>空格</li><li>制表符</li><li>换行符</li></ul><p>bash shell在数据中看到了这些字符中的任意一个，它就会假定这表明了列表中一个新数据字段的开始。</p><p>可以在shell脚本中临时更改IFS环境变量的值来限制被bash shell当作字段分隔符的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># reading values from a file </span></span><br><span class="line">file=<span class="string">&quot;states&quot;</span> </span><br><span class="line"><span class="comment">#告诉bash shell在数据值中忽略空格和制表符</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span> </span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> $(cat <span class="variable">$file</span>) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Visit beautiful <span class="variable">$state</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p>在处理代码量较大的脚本时，可能在一个地方需要修改IFS的值，然后忽略这次修改，在脚本的其他地方继续沿用IFS的默认值。一个可参考的安全实践是在改变IFS之前保存原来的IFS值，之后再恢复它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IFS.OLD=<span class="variable">$IFS</span> </span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span> </span><br><span class="line">&lt;在代码中使用新的IFS值&gt; </span><br><span class="line">IFS=<span class="variable">$IFS</span>.OLD</span><br></pre></td></tr></table></figure><p>保证了在脚本的后续操作中使用的是IFS的默认值。</p></blockquote><p>要遍历一个文件中用冒号分隔的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFS=:</span><br></pre></td></tr></table></figure><p>果要指定多个IFS字符，只要将它们在赋值行串起来就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span>:;<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><h4 id="6-用通配符读取目录"><a href="#6-用通配符读取目录" class="headerlink" title="6.用通配符读取目录"></a>6.用通配符读取目录</h4><p>可以用for命令来自动遍历目录中的文件。必须在文件名或路径名中使用通配符。它会强制shell使用<strong>文件扩展匹配</strong>。文件扩展匹配是生成匹配指定通配符的文件名或路径名的过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># iterate through all the files in a directory </span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> /home/rich/<span class="built_in">test</span>/* </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a directory&quot;</span> </span><br><span class="line"> <span class="keyword">elif</span> [ -f <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a file&quot;</span> </span><br><span class="line"> <span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>在Linux中，<strong>目录名和文件名中包含空格当然是合法的</strong>。要适应这种情况，应该将$file变量用双引号圈起来。</p><p>也可以在for命令中列出多个目录通配符，将目录查找和列表合并进同一个for语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># iterating through multiple directories</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> /home/rich/.b* /home/rich/badtest </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a directory&quot;</span> </span><br><span class="line"> <span class="keyword">elif</span> [ -f <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a file&quot;</span> </span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> doesn&#x27;t exist&quot;</span> </span><br><span class="line"> <span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ ./test7 </span><br><span class="line">/home/rich/.backup.timestamp is a file </span><br><span class="line">/home/rich/.bash_history is a file </span><br><span class="line">/home/rich/.bash_logout is a file </span><br><span class="line">/home/rich/.bash_profile is a file </span><br><span class="line">/home/rich/.bashrc is a file </span><br><span class="line">/home/rich/badtest doesn<span class="string">&#x27;t exist</span></span><br></pre></td></tr></table></figure><blockquote><p>可以在数据列表中放入任何东西。<strong>即使文件或目录不存在</strong>，for语句也会尝试处理列表中的内容。在处理文件或目录时，这可能会是个问题。你无法知道你正在尝试遍历的目录是否存在：在处理之前测试一下文件或目录总是好的</p></blockquote><h3 id="C语言风格的for"><a href="#C语言风格的for" class="headerlink" title="C语言风格的for"></a>C语言风格的for</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( variable assignment ; condition ; iteration process ))</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># testing the C-style for loop </span></span><br><span class="line"><span class="keyword">for</span> (( i=1; i &lt;= 10; i++ )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;The next number is <span class="variable">$i</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>r循环通过定义好的变量（本例中是变量i）来迭代执行这些命令。</p><p>如何使用多个变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># multiple variables </span></span><br><span class="line"><span class="keyword">for</span> (( a=1, b=10; a &lt;= 10; a++, b-- )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> - <span class="variable">$b</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="while-命令"><a href="#while-命令" class="headerlink" title="while 命令"></a>while 命令</h3><p>是if-then语句和for循环的混杂体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">test</span> <span class="built_in">command</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> other commands </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>test <em>command</em>的退出状态码<strong>必须随着循环中运行的命令而改变</strong>。如果退出状态码不发生变化， while循环就将一直不停地进行下去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># while command test </span></span><br><span class="line">var1=10</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$var1</span> -gt 0 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$var1</span> </span><br><span class="line"> var1=$[ <span class="variable">$var1</span> - 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>多个测试命令</strong></p><p>while命令允许你在while语句行定义多个测试命令。只有<strong>最后一个测试命令的退出状态码</strong>会被用来决定什么时候结束循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># testing a multicommand while loop </span></span><br><span class="line">var1=10 </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">echo</span> <span class="variable">$var1</span> </span><br><span class="line"> [ <span class="variable">$var1</span> -ge 0 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;This is inside the loop&quot;</span> </span><br><span class="line"> var1=$[ <span class="variable">$var1</span> - 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ ./test11 </span><br><span class="line">10 </span><br><span class="line">This is inside the loop </span><br><span class="line">9 </span><br><span class="line">This is inside the loop </span><br><span class="line">8</span><br><span class="line">This is inside the loop </span><br><span class="line">7 </span><br><span class="line">This is inside the loop </span><br><span class="line">6 </span><br><span class="line">This is inside the loop </span><br><span class="line">5 </span><br><span class="line">This is inside the loop </span><br><span class="line">4 </span><br><span class="line">This is inside the loop </span><br><span class="line">3 </span><br><span class="line">This is inside the loop </span><br><span class="line">2 </span><br><span class="line">This is inside the loop </span><br><span class="line">1 </span><br><span class="line">This is inside the loop </span><br><span class="line">0 </span><br><span class="line">This is inside the loop </span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p>echo测试命令被执行并显示了var变量的值（现在小于0了）。直到shell执行test测试命令，whle循环才会停止。</p><h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><p>until命令要求你指定一个通常返回非零退出状态码的测试命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until <span class="built_in">test</span> commands </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> other commands </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>可以在until命令语句中放入多个测试命令。只有最后一个命令的退出状态码决定了bash shell是否执行已定义的other <em>commands</em>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using the until command </span></span><br><span class="line">var1=100 </span><br><span class="line">until [ <span class="variable">$var1</span> -eq 0 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$var1</span> </span><br><span class="line"> var1=$[ <span class="variable">$var1</span> - 25 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./test12 </span><br><span class="line">100 </span><br><span class="line">75 </span><br><span class="line">50 </span><br><span class="line">25</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个命令</span></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using the until command </span></span><br><span class="line">var1=100 </span><br><span class="line">until <span class="built_in">echo</span> <span class="variable">$var1</span> </span><br><span class="line"> [ <span class="variable">$var1</span> -eq 0 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> Inside the loop: <span class="variable">$var1</span> </span><br><span class="line"> var1=$[ <span class="variable">$var1</span> - 25 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./test13 </span><br><span class="line">100 </span><br><span class="line">Inside the loop: 100 </span><br><span class="line">75 </span><br><span class="line">Inside the loop: 75 </span><br><span class="line">50 </span><br><span class="line">Inside the loop: 50 </span><br><span class="line">25 </span><br><span class="line">Inside the loop: 25 </span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p>循环语句可以在循环内使用任意类型的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># nesting for loops </span></span><br><span class="line"><span class="keyword">for</span> (( a = 1; a &lt;= 3; a++ )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Starting loop <span class="variable">$a</span>:&quot;</span> </span><br><span class="line"> <span class="keyword">for</span> (( b = 1; b &lt;= 3; b++ )) </span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot; Inside loop: <span class="variable">$b</span>&quot;</span> </span><br><span class="line"> <span class="keyword">done</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line">$ ./test14 </span><br><span class="line">Starting loop 1: </span><br><span class="line"> Inside loop: 1 </span><br><span class="line"> Inside loop: 2 </span><br><span class="line"> Inside loop: 3 </span><br><span class="line">Starting loop 2: </span><br><span class="line"> Inside loop: 1 </span><br><span class="line"> Inside loop: 2 </span><br><span class="line"> Inside loop: 3 </span><br><span class="line">Starting loop 3: </span><br><span class="line"> Inside loop: 1 </span><br><span class="line"> Inside loop: 2 </span><br><span class="line"> Inside loop: 3</span><br></pre></td></tr></table></figure><h3 id="循环处理文件数据"><a href="#循环处理文件数据" class="headerlink" title="循环处理文件数据"></a>循环处理文件数据</h3><ul><li><p>使用嵌套循环</p></li><li><p>修改IFS环境变量</p></li></ul><p>通过修改IFS环境变量，就能强制for命令将文件中的每行都当成单独的一个条目来处理，即便数据中有空格也是如此。一旦从文件中提取出了单独的行，可能需要再次利用循环来提取行中的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># changing the IFS value </span></span><br><span class="line">IFS.OLD=<span class="variable">$IFS</span> </span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span> </span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> $(cat /etc/passwd) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Values in <span class="variable">$entry</span> –&quot;</span> </span><br><span class="line"> IFS=: </span><br><span class="line"> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="variable">$entry</span> </span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot; <span class="variable">$value</span>&quot;</span> </span><br><span class="line"> <span class="keyword">done</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>使用了两个不同的IFS值来解析数据。第一个IFS值解析出/etc/passwd文件中的单独的行。内部for循环接着将IFS的值修改为冒号，允许你从/etc/passwd的行中解析出单独的值。</p><h3 id="控制循环"><a href="#控制循环" class="headerlink" title="控制循环"></a>控制循环</h3><h4 id="break-命令"><a href="#break-命令" class="headerlink" title="break 命令"></a>break 命令</h4><p>break命令来退出任意类型的循环</p><ol><li><p>跳出单个循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># breaking out of a for loop </span></span><br><span class="line"><span class="keyword">for</span> var1 <span class="keyword">in</span> 1 2 3 4 5 6 7 8 9 10 </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$var1</span> -eq 5 ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">break</span> </span><br><span class="line"> <span class="keyword">fi</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Iteration number: <span class="variable">$var1</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The for loop is completed&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>跳出内部循环</p><p>处理多个循环时，break命令会自动终止你所在的最内层的循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># breaking out of an inner loop </span></span><br><span class="line"><span class="keyword">for</span> (( a = 1; a &lt; 4; a++ )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Outer loop: <span class="variable">$a</span>&quot;</span> </span><br><span class="line"> <span class="keyword">for</span> (( b = 1; b &lt; 100; b++ )) </span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$b</span> -eq 5 ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">break</span> </span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot; Inner loop: <span class="variable">$b</span>&quot;</span> </span><br><span class="line"> <span class="keyword">done</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p>跳出外部循环</p><p>break命令接受单个命令行参数值<code>break n</code>其中<em>n</em>指定了要跳出的循环层级。默认情况下，<em>n</em>为1，表明跳出的是当前的循环。如果你将<em>n</em>设为2，break命令就会停止下一级的外部循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># breaking out of an outer loop </span></span><br><span class="line"><span class="keyword">for</span> (( a = 1; a &lt; 4; a++ )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Outer loop: <span class="variable">$a</span>&quot;</span> </span><br><span class="line"> <span class="keyword">for</span> (( b = 1; b &lt; 100; b++ )) </span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line">     <span class="keyword">if</span> [ <span class="variable">$b</span> -gt 4 ] </span><br><span class="line">     <span class="keyword">then</span> </span><br><span class="line">     <span class="built_in">break</span> 2 </span><br><span class="line">     <span class="keyword">fi</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot; Inner loop: <span class="variable">$b</span>&quot;</span> </span><br><span class="line"> <span class="keyword">done</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="continue-命令"><a href="#continue-命令" class="headerlink" title="continue 命令"></a>continue 命令</h4><p>提前中止某次循环中的命令，但并不会完全终止整个循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using the continue command </span></span><br><span class="line"><span class="keyword">for</span> (( var1 = 1; var1 &lt; 15; var1++ )) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">     <span class="keyword">if</span> [ <span class="variable">$var1</span> -gt 5 ] &amp;&amp; [ <span class="variable">$var1</span> -lt 10 ] </span><br><span class="line">     <span class="keyword">then</span> </span><br><span class="line">     <span class="built_in">continue</span> </span><br><span class="line">     <span class="keyword">fi</span> </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;Iteration number: <span class="variable">$var1</span>&quot;</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>continue命令也允许通过命令行参数指定要继续执行哪一级循环：<code>continue n</code></p><h3 id="处理循环的输出输入"><a href="#处理循环的输出输入" class="headerlink" title="处理循环的输出输入"></a>处理循环的输出输入</h3><p>可以对循环的输出使用管道或进行重定向。这可以通过在done命令之后添加一个处理命令来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> /home/rich/* </span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a directory&quot;</span> </span><br><span class="line"> <span class="keyword">elif</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a file&quot;</span> </span><br><span class="line"> <span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span> &gt; output.txt</span><br></pre></td></tr></table></figure><p>shell会将for命令的结果重定向到文件output.txt中，而不是显示在屏幕上。</p><p>读取文件的另外一种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> -r line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span> &lt; filename.txt</span><br></pre></td></tr></table></figure><h2 id="四、处理用户的输入"><a href="#四、处理用户的输入" class="headerlink" title="四、处理用户的输入"></a>四、处理用户的输入</h2><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>向shell脚本传递数据的最基本方法是使用命令行参数。命令行参数允许在运行脚本时向命令行添加数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./addem 10 30</span><br></pre></td></tr></table></figure><h4 id="1-读取参数"><a href="#1-读取参数" class="headerlink" title="1.读取参数"></a>1.读取参数</h4><p>bash shell会将一些称为<strong>位置参数（positional parameter）</strong>的特殊变量分配给输入到命令行中的所有参数。这也包括shell所执行的脚本名称。位置参数变量是标准的数字：$0是程序名，$1是第一个参数，$2是第二个参数，依次类推，直到第九个参数$9。</p><p>每个参数都是用空格分隔的，所以shell会将空格当成两个值的分隔符。要在参数值中包含空格，<strong>必须要用引号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./test3.sh <span class="string">&#x27;Rich Blum&#x27;</span></span><br><span class="line">Hello Rich Blum, glad to meet you.</span><br></pre></td></tr></table></figure><p>将文本字符串作为参数传递时，<strong>引号并非数据的一部分</strong>。它们只是表明数据的起止位置。</p><p>如果脚本需要的命令行参数<strong>不止9个</strong>，你仍然可以处理，但是需要稍微修改一下变量名。在第9个变量之后，你必须在变量数字周围加上<strong>花括号</strong>，比如${10}。</p><h4 id="2-读取脚本名"><a href="#2-读取脚本名" class="headerlink" title="2.读取脚本名"></a>2.读取脚本名</h4><p>用<code>$0</code>参数获取shell在命令行启动的<strong>脚本名</strong>。</p><p>如果使用另一个命令来运行shell脚本，命令会和脚本名混在一起，出现在$0参数中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./test5.sh</span><br><span class="line">The zero parameter is <span class="built_in">set</span> to: ./test5.sh</span><br></pre></td></tr></table></figure><p>得把脚本的运行路径给剥离掉。另外，还要删除与脚本名混杂在一起的命令。basename命令会返回不包含路径的脚本名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Using basename with the $0 parameter </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">name=$(basename <span class="variable">$0</span>) </span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> The script name is: <span class="variable">$name</span></span><br></pre></td></tr></table></figure><h4 id="3-测试参数"><a href="#3-测试参数" class="headerlink" title="3.测试参数"></a>3.测试参数</h4><p>当脚本认为参数变量中会有数据而实际上并没有时，脚本很有可能会产生错误消息。这种写脚本的方法并不可取。在使用参数前一定要检查其中是否存在数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># testing parameters before use </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> Hello <span class="variable">$1</span>, glad to meet you. </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Sorry, you did not identify yourself. &quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="特殊参数变量"><a href="#特殊参数变量" class="headerlink" title="特殊参数变量"></a>特殊参数变量</h3><h4 id="1-参数统计"><a href="#1-参数统计" class="headerlink" title="1.参数统计"></a>1.参数统计</h4><p>特殊变量$#含有脚本运行时携带的命令行参数的个数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">     <span class="built_in">echo</span> </span><br><span class="line">     <span class="built_in">echo</span> Usage: test9.sh a b </span><br><span class="line">     <span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">     total=$[ <span class="variable">$1</span> + <span class="variable">$2</span> ] </span><br><span class="line">     <span class="built_in">echo</span></span><br><span class="line">      <span class="built_in">echo</span> The total is <span class="variable">$total</span> </span><br><span class="line">     <span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br></pre></td></tr></table></figure><p>if-then语句用<code>-ne</code>测试命令行参数数量。如果参数数量不对，会显示一条错误消息告知脚本的正确用法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># testing grabbing last parameter </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#$&#123;$#&#125;就代表了最后一个命令行参数变量?</span></span><br><span class="line"><span class="built_in">echo</span> The last parameter was <span class="variable">$&#123;$#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#必须将美元符换成感叹号。</span></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Grabbing the last parameter </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">params=<span class="variable">$#</span> </span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> The last parameter is <span class="variable">$params</span> </span><br><span class="line"><span class="built_in">echo</span> The last parameter is <span class="variable">$&#123;!#&#125;</span></span><br><span class="line"></span><br><span class="line">$ bash test10.sh 1 2 3 4 5</span><br><span class="line">The last parameter is 5 </span><br><span class="line">The last parameter is 5</span><br><span class="line"></span><br><span class="line">$ bash test10.sh</span><br><span class="line">The last parameter is 0 </span><br><span class="line">The last parameter is test10.sh</span><br></pre></td></tr></table></figure><h4 id="2-抓取所有的数据"><a href="#2-抓取所有的数据" class="headerlink" title="2.抓取所有的数据"></a>2.抓取所有的数据</h4><p>有时候需要抓取命令行上提供的所有参数。这时候不需要先用$#变量来判断命令行上有多少参数，然后再进行遍历，使用一组其他的特殊变量来解决这个问题。</p><p><code>$*</code>和<code>$@</code>变量可以用来轻松访问所有的参数。</p><ul><li><code>$*</code>变量会将命令行上提供的所有参数当作一个单词保存。基本上$*变量会将这些参数视为一个整体，而不是多个个体。</li><li><code>$@</code>变量会将命令行上提供的所有参数当作同一字符串中的多个独立的单词。就能够遍历所有的参数值，得到每个参数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># testing $* and $@ </span></span><br><span class="line"><span class="comment"># $*</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line">count=1 </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;\$* Parameter #<span class="variable">$count</span> = <span class="variable">$param</span>&quot;</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># $@ </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line">count=1 </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;\$@ Parameter #<span class="variable">$count</span> = <span class="variable">$param</span>&quot;</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ ./test12.sh rich barbara katie jessica</span><br><span class="line">$* Parameter <span class="comment">#1 = rich barbara katie jessica </span></span><br><span class="line"><span class="variable">$@</span> Parameter <span class="comment">#1 = rich </span></span><br><span class="line"><span class="variable">$@</span> Parameter <span class="comment">#2 = barbara </span></span><br><span class="line"><span class="variable">$@</span> Parameter <span class="comment">#3 = katie </span></span><br><span class="line"><span class="variable">$@</span> Parameter <span class="comment">#4 = jessica</span></span><br></pre></td></tr></table></figure><h3 id="移动变量"><a href="#移动变量" class="headerlink" title="移动变量"></a>移动变量</h3><p>bash shell的shift命令能够用来操作命令行参数。shift命令会根据它们的相对位置来移动命令行参数。</p><p>在使用shift命令时，默认情况下它会将每个参数变量<strong>向左移动一个位置</strong>。所以，变量$3的值会移到$2中，变量$2的值会移到$1中，而变量$1的值则会被删除</p><p>是在你不知道到底有多少参数时。你可以只操作第一个参数，移动参数，然后继续操作第一个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat test13.sh</span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line"><span class="comment"># demonstrating the shift command </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line">count=1 </span><br><span class="line"><span class="comment">#测试第一个参数值的长度</span></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span> = <span class="variable">$1</span>&quot;</span> </span><br><span class="line">     count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line">     <span class="comment">#shift命令会将所有参数的位置移动一个位置。</span></span><br><span class="line">     <span class="built_in">shift</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">./test13.sh rich barbara katie jessica</span><br><span class="line">Parameter <span class="comment">#1 = rich </span></span><br><span class="line">Parameter <span class="comment">#2 = barbara </span></span><br><span class="line">Parameter <span class="comment">#3 = katie </span></span><br><span class="line">Parameter <span class="comment">#4 = jessica</span></span><br></pre></td></tr></table></figure><p>也可以一次性移动多个位置，只需要给shift命令提供一个参数，指明要移动的位置数就行了。<code>shift 2</code></p><h3 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h3><p>同时提供了参数和选项的bash命令。<strong>选项</strong>是跟在单破折线后面的单个字母，它能改变命令的行为。</p><h4 id="1-查找选项"><a href="#1-查找选项" class="headerlink" title="1.查找选项"></a>1.查找选项</h4><p>紧跟在脚本名之后，就跟命令行参数一样。</p><ol><li><p>处理简单选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">用<span class="keyword">case</span>语句来判断某个参数是否为选项。</span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line"><span class="comment"># extracting command line options as parameters </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span> </span><br><span class="line"> -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span> ;; </span><br><span class="line"> -b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option&quot;</span> ;; </span><br><span class="line"> -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span> ;; </span><br><span class="line"> *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span> ;; </span><br><span class="line"> <span class="keyword">esac</span> </span><br><span class="line"> <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>case语句在命令行参数中找到一个选项，就处理一个选项。如果命令行上还提供了其他参数，你可以在case语句的通用情况处理部分中处理。</p></li><li><p>分离参数和选项</p><p>同时使用选项和参数的情况。用特殊字符来将二者分开,这个特殊字符是双破折线（<code>--</code>）。shell会用双破折线来表明选项列表结束。在双破折线之后，脚本就可以放心地将剩下的命令行参数当作参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># extracting options and parameters </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">   <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span> </span><br><span class="line">      -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span> ;;       </span><br><span class="line">      -b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option&quot;</span>;; </span><br><span class="line">      -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span> ;;      </span><br><span class="line">      --) <span class="built_in">shift</span> </span><br><span class="line">          <span class="built_in">break</span> ;; </span><br><span class="line">       *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span>;; </span><br><span class="line">   <span class="keyword">esac</span> </span><br><span class="line">   <span class="built_in">shift</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="variable">$@</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span> </span><br><span class="line">   count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure><p>在遇到双破折线时，脚本用break命令来跳出while循环。由于过早地跳出了循环，我们需要再加一条shift命令来将双破折线移出参数变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ./test16.sh -c -a -b -- test1 test2 test3</span><br><span class="line">Found the -c option </span><br><span class="line">Found the -a option </span><br><span class="line">Found the -b option </span><br><span class="line">Parameter <span class="comment">#1: test1</span></span><br><span class="line">Parameter <span class="comment">#2: test2 </span></span><br><span class="line">Parameter <span class="comment">#3: test3</span></span><br></pre></td></tr></table></figure><p>当脚本遇到双破折线时，它会停止处理选项，并将剩下的参数都当作命令行参数。</p></li><li><p>处理带值的选项</p><p>有些选项会带上一个额外的参数值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># extracting command line options and values </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">   <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span> </span><br><span class="line">      -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span>;; </span><br><span class="line">      -b) param=<span class="string">&quot;<span class="variable">$2</span>&quot;</span> </span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with parameter value <span class="variable">$param</span>&quot;</span>           <span class="built_in">shift</span> ;; </span><br><span class="line">      -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span>;; </span><br><span class="line">      --) <span class="built_in">shift</span> </span><br><span class="line">          <span class="built_in">break</span> ;; </span><br><span class="line">       *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span>;; </span><br><span class="line">   <span class="keyword">esac</span> </span><br><span class="line">   <span class="built_in">shift</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span> </span><br><span class="line">   count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line">./test17.sh -a -b test1 -d</span><br><span class="line"></span><br><span class="line">Found the -a option </span><br><span class="line">Found the -b option, with parameter value test1 </span><br><span class="line">-d is not an option </span><br></pre></td></tr></table></figure><p>case语句定义了三个它要处理的选项。-b选项还需要一个额外的参数值。由于要处理的参数是$1，额外的参数值就应该位于$2（因为所有的参数在处理完之后都会被移出）。<strong>只要将参数值从$2变量中提取出来就可以了</strong>。当然，因为这个选项占用了两个参数位，所以你还需要使用shift命令多移动一个位置。</p><p>如果你想将多个选项放进一个参数中时，它就不能工作了。</p></li></ol><h4 id="2-使用-getopt-命令"><a href="#2-使用-getopt-命令" class="headerlink" title="2.使用 getopt 命令"></a>2.使用 getopt 命令</h4><p>它能够识别命令行参数，从而在脚本中解析它们时更方便。</p><ol><li><p>命令的格式</p><p>接受一系列任意形式的命令行选项和参数，并自动将它们转换成适当的格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getopt optstring parameters</span><br></pre></td></tr></table></figure><p><code>optstring</code>它定义了命令行有效的选项字母，还定义了哪些选项字母需要参数值。在optstring中列出你要在脚本中用到的每个命令行选项字母。然后，在每个需要参数值的选项字母后加一个<strong>冒号</strong>。getopt命令会基于你定义的optstring解析提供的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getopt ab:<span class="built_in">cd</span> -a -b test1 -<span class="built_in">cd</span> test2 test3</span><br><span class="line">-a -b test1 -c -d -- test2 test3</span><br></pre></td></tr></table></figure><p>optstring定义了四个有效选项字母：a、b、c和d。冒号（:）被放在了字母b后面，因为b选项需要一个参数值。</p><p>如果指定了一个不在optstring中的选项，默认情况下，getopt命令会产生一条错误消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getopt ab:<span class="built_in">cd</span> -a -b test1 -cde test2 test3</span><br><span class="line">getopt: invalid option -- e </span><br><span class="line"> -a -b test1 -c -d -- test2 test3</span><br></pre></td></tr></table></figure><p>如果想忽略这条错误消息，可以在命令后加-q选项。</p></li><li><p>在脚本中使用getopt</p><p>用getopt命令生成的格式化后的版本来替换已有的命令行选项和参数。用set命令.</p><p>set命令的选项之一是双破折线（–），它会<strong>将命令行参数替换成set命令的命令行值。</strong>该方法会将原始脚本的命令行参数传给getopt命令，之后再将getopt命令的输出传给set命令，<strong>用getopt格式化后的命令行参数来替换原始的命令行参数</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -- $(getopt -q ab:<span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Extract command line options &amp; values with getopt </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">set</span> -- $(getopt -q ab:<span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>) </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span> </span><br><span class="line">     -a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span> ;; </span><br><span class="line">     -b) param=<span class="string">&quot;<span class="variable">$2</span>&quot;</span> </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with parameter value <span class="variable">$param</span>&quot;</span> </span><br><span class="line">     <span class="built_in">shift</span> ;; </span><br><span class="line">     -c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span> ;; </span><br><span class="line">     --) <span class="built_in">shift</span> </span><br><span class="line">     <span class="built_in">break</span> ;; </span><br><span class="line">     *) <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is not an option&quot;</span>;; </span><br><span class="line">     <span class="keyword">esac</span></span><br><span class="line">     <span class="built_in">shift</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># 处理参数</span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure><p>在getopt命令中仍然隐藏着一个小问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./test18.sh -a -b test1 -<span class="built_in">cd</span> <span class="string">&quot;test2 test3&quot;</span> test4</span><br><span class="line">Found the -a option </span><br><span class="line">Found the -b option, with parameter value <span class="string">&#x27;test1&#x27;</span> </span><br><span class="line">Found the -c option </span><br><span class="line">Parameter <span class="comment">#1: &#x27;test2 </span></span><br><span class="line">Parameter <span class="comment">#2: test3&#x27; </span></span><br><span class="line">Parameter <span class="comment">#3: &#x27;test4&#x27;</span></span><br></pre></td></tr></table></figure><p>getopt命令并<strong>不擅长处理带空格和引号的参数值</strong>。它会将空格当作参数分隔符，而不是根据双引号将二者当作一个参数。</p></li><li><p>使用更高级的 <code>getopts</code></p><p>内建于bash shell。与<code>getopt</code>不同，前者将命令行上选项和参数处理后只生成一个输出,而<code>getopts</code>命令能够和已有的shell参数变量配合默契。</p><p>每次调用它时，它一次只<strong>处理命令行上检测到的一个参数</strong>。处理完所有的参数后，它会退出并返回一个大于0的退出状态码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getopts</span> optstring variable</span><br></pre></td></tr></table></figure><p>类似于getopt的处理，要去掉错误消息的话，可以在optstring之前加一个<strong>冒号</strong>。<code>getopts</code>命令会用到两个环境变量。如果选项需要跟一个参数值，<strong>OPTARG</strong>环境变量就会保存这个值。<strong>OPTIND</strong>环境变量保存了参数列表中getopts正在处理的参数位置。这样就能在处理完选项之后继续处理其他命令行参数了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># simple demonstration of the getopts command </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> :ab:c opt </span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$opt</span>&quot;</span> <span class="keyword">in</span> </span><br><span class="line">         a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span> ;; </span><br><span class="line">         b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with value <span class="variable">$OPTARG</span>&quot;</span>;; </span><br><span class="line">         c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span> ;; </span><br><span class="line">         *) <span class="built_in">echo</span> <span class="string">&quot;Unknown option: <span class="variable">$opt</span>&quot;</span>;; </span><br><span class="line">     <span class="keyword">esac</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>每次迭代中存储它们的变量名（opt）。getopts命令解析命令行选项时会移除开头的单破折线，所以在case定义中不用单破折线。</p><p>可以在参数值中包含空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test19.sh -b <span class="string">&quot;test1 test2&quot;</span> -a</span><br></pre></td></tr></table></figure><p>将选项字母和参数值放在一起使用，而不用加空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test19.sh -abtest1</span><br></pre></td></tr></table></figure><p>能够将命令行上找到的所有未定义的选项统一输出成问号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ./test19.sh -d</span><br><span class="line">Unknown option: ? </span><br></pre></td></tr></table></figure><p>optstring中未定义的选项字母会以问号形式发送给代码。</p><p>getopts命令知道何时停止处理选项，并将参数留给你处理。在getopts处理每个选项时，它会将OPTIND环境变量值增一。在getopts完成处理时，你可以使用shift命令和OPTIND值来移动参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Processing options &amp; parameters with getopts </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> :ab:<span class="built_in">cd</span> opt </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$opt</span>&quot;</span> <span class="keyword">in</span> </span><br><span class="line"> a) <span class="built_in">echo</span> <span class="string">&quot;Found the -a option&quot;</span> ;; </span><br><span class="line"> b) <span class="built_in">echo</span> <span class="string">&quot;Found the -b option, with value <span class="variable">$OPTARG</span>&quot;</span> ;; </span><br><span class="line"> c) <span class="built_in">echo</span> <span class="string">&quot;Found the -c option&quot;</span> ;; </span><br><span class="line"> d) <span class="built_in">echo</span> <span class="string">&quot;Found the -d option&quot;</span> ;; </span><br><span class="line"> *) <span class="built_in">echo</span> <span class="string">&quot;Unknown option: <span class="variable">$opt</span>&quot;</span> ;; </span><br><span class="line"> <span class="keyword">esac</span> </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">shift</span> $[ <span class="variable">$OPTIND</span> - 1 ] </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Parameter <span class="variable">$count</span>: <span class="variable">$param</span>&quot;</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ ./test20.sh -a -b test1 -d test2 test3 test4</span><br><span class="line">Found the -a option </span><br><span class="line">Found the -b option, with value test1 </span><br><span class="line">Found the -d option </span><br><span class="line">Parameter 1: test2 </span><br><span class="line">Parameter 2: test3 </span><br><span class="line">Parameter 3: test4</span><br></pre></td></tr></table></figure></li></ol><h3 id="将选项标准化"><a href="#将选项标准化" class="headerlink" title="将选项标准化"></a>将选项标准化</h3><p>有些字母选项在Linux世界里已经拥有了某种程度的标准含义。如果能在shell脚本中支持这些选项，脚本看起来能更友好一些。常用的Linux命令选项:</p><table><thead><tr><th>选 项</th><th>描 述</th></tr></thead><tbody><tr><td>-a</td><td>显示所有对象</td></tr><tr><td>-c</td><td>生成一个计数</td></tr><tr><td>-d</td><td>指定一个目录</td></tr><tr><td>-e</td><td>扩展一个对象</td></tr><tr><td>-f</td><td>指定读入数据的文件</td></tr><tr><td>-h</td><td>显示命令的帮助信息</td></tr><tr><td>-i</td><td>忽略文本大小写</td></tr><tr><td>-l</td><td>产生输出的长格式版本</td></tr><tr><td>-n</td><td>使用非交互模式（批处理）</td></tr><tr><td>-o</td><td>将所有输出重定向到的指定的输出文件</td></tr><tr><td>-q</td><td>以安静模式运行</td></tr><tr><td>-r</td><td>递归地处理目录和文件</td></tr><tr><td>-s</td><td>以安静模式运行</td></tr><tr><td>-v</td><td>生成详细输出</td></tr><tr><td>-x</td><td>排除某个对象</td></tr><tr><td>-y</td><td>对所有问题回答yes</td></tr></tbody></table><h3 id="获得用户输入"><a href="#获得用户输入" class="headerlink" title="获得用户输入"></a>获得用户输入</h3><h4 id="1-基本的读取"><a href="#1-基本的读取" class="headerlink" title="1. 基本的读取"></a>1. 基本的读取</h4><p>read命令从标准输入（键盘）或另一个文件描述符中接受输入。在收到输入后，read命令会将数据放进一个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment">#testing the read command </span></span><br><span class="line"><span class="comment"># echo命令使用了-n选项。该选项不会在字符串末尾输出换行符，允许脚本用户紧跟其后输入数据，而不是下一行。</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Enter your name: &quot;</span> </span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>, welcome to my program. &quot;</span></span><br><span class="line"></span><br><span class="line"> ./test21.sh</span><br><span class="line">Enter your name: Rich Blum</span><br><span class="line">Hello Rich Blum, welcome to my program.</span><br></pre></td></tr></table></figure><p>read命令包含了<code>-p</code>选项，允许你直接在read命令行指定提示符。</p><p>read命令会将提示符后输入的所有数据分配给<strong>单个变量</strong>，要么你就指定多个变量。输入的每个数据值都会分配给变量列表中的下一个变量。如果变量数量不够，剩下的数据就<strong>全部分配给最后一个变量</strong>。</p><p>在read命令行中不指定变量，read命令会将它收到的任何数据都放进特殊环境变量REPLY中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Testing the REPLY Environment variable </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter your name: &quot;</span> </span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> Hello <span class="variable">$REPLY</span>, welcome to my program.</span><br></pre></td></tr></table></figure><h4 id="2-超时"><a href="#2-超时" class="headerlink" title="2.超时"></a>2.超时</h4><p>用<code>-t</code>选项来指定一个计时器。-t选项指定了read命令等待输入的秒数。当计时器过期后，read命令会返回一个非零退出状态码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># timing the data entry </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">read</span> -t 5 -p <span class="string">&quot;Please enter your name: &quot;</span> name </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>, welcome to my script&quot;</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Sorry, too slow! &quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>让read命令来统计输入的字符数。当输入的字符达到预设的字符数时，就自动退出，将输入的数据赋给变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># getting just one character of input </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">read</span> -n1 -p <span class="string">&quot;Do you want to continue [Y/N]? &quot;</span> answer </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$answer</span> <span class="keyword">in</span> </span><br><span class="line">Y | y) <span class="built_in">echo</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;fine, continue on…&quot;</span>;; </span><br><span class="line">N | n) <span class="built_in">echo</span> </span><br><span class="line"> <span class="built_in">echo</span> OK, goodbye </span><br><span class="line"> <span class="built_in">exit</span>;; </span><br><span class="line"><span class="keyword">esac</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the script&quot;</span></span><br></pre></td></tr></table></figure><p>将<code>-n</code>选项和值1一起使用，告诉read命令在接受单个字符后退出。</p><h4 id="3-隐藏方式读取"><a href="#3-隐藏方式读取" class="headerlink" title="3.隐藏方式读取"></a>3.隐藏方式读取</h4><p>-s选项可以避免在read命令中输入的数据出现在显示器上上（实际上，数据会被显示，只是read命令会将文本颜色<strong>设成跟背景色一样</strong>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># hiding input data from the monitor </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">read</span> -s -p <span class="string">&quot;Enter your password: &quot;</span> pass</span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Is your password really <span class="variable">$pass</span>? &quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-从文件中读取"><a href="#4-从文件中读取" class="headerlink" title="4.从文件中读取"></a>4.从文件中读取</h4><p>read命令来读取Linux系统上文件里保存的数据。每次调用read命令，它都会从文件中读取一行文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># reading data from a file </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line">cat <span class="built_in">test</span> | <span class="keyword">while</span> <span class="built_in">read</span> line </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Line <span class="variable">$count</span>: <span class="variable">$line</span>&quot;</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Finished processing the file&quot;</span></span><br></pre></td></tr></table></figure><h2 id="五、呈现数据"><a href="#五、呈现数据" class="headerlink" title="五、呈现数据"></a>五、呈现数据</h2><h3 id="理解输入和输出"><a href="#理解输入和输出" class="headerlink" title="理解输入和输出"></a>理解输入和输出</h3><p>脚本输出的方法：</p><ul><li>在显示器屏幕上显示输出</li><li>将输出重定向到文件中</li></ul><h4 id="1-标准文件描述符"><a href="#1-标准文件描述符" class="headerlink" title="1.标准文件描述符"></a>1.标准文件描述符</h4><p>Linux系统将每个对象当作文件处理。这包括输入和输出进程。Linux用<strong>文件描述符（filedescriptor）</strong>来标识每个文件对象。文件描述符是一个<strong>非负整数</strong>，可以唯一标识会话中打开的文件。每个进程一次最多可以有九个文件描述符。每个进程一次最多可以有九个文件描述符。bash shell保留了前三个文件描述符（0、1和2）</p><table><thead><tr><th>文件描述符</th><th>缩 写</th><th>描 述</th></tr></thead><tbody><tr><td>0</td><td>STDIN</td><td>标准输入</td></tr><tr><td>1</td><td>STDOUT</td><td>标准输出</td></tr><tr><td>2</td><td>STDERR</td><td>标准错误</td></tr></tbody></table><ol><li><p><strong>STDIN</strong>： 代表shell的标准输入。对终端界面来说，标准输入是键盘。shell从STDIN文件描述符对应的键盘获得输入，在用户输入时处理每个字符。在使用输入重定向符号（&lt;）时，Linux会用重定向指定的文件来替换标准输入文件描述符。它会读取文件并提取数据，就如同它是键盘上键入的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat </span><br><span class="line">this is a <span class="built_in">test</span> </span><br><span class="line">this is a <span class="built_in">test</span> </span><br><span class="line">this is a second <span class="built_in">test</span>. </span><br><span class="line">this is a second <span class="built_in">test</span>.</span><br><span class="line"></span><br><span class="line">$ cat &lt; testfile </span><br><span class="line">This is the first line. </span><br><span class="line">This is the second line. </span><br><span class="line">This is the third line.</span><br></pre></td></tr></table></figure></li><li><p><strong>STDOUT</strong> :符代表shell的标准输出。在终端界面上，标准输出就是终端显示器。shell的所有输出（包括shell中运行的程序和脚本）会被定向到标准输出中，也就是显示器。<code>&gt;</code>覆盖，<code>&gt;&gt;</code>追加。</p><p>如果你对脚本使用了标准输出重定向：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al badfile &gt; test3 </span><br><span class="line">ls: cannot access badfile: No such file or directory</span><br></pre></td></tr></table></figure><p>shell创建了输出重定向文件，但错误消息却显示在了显示器屏幕上。注意，在显示test3文件的内容时并没有任何错误。test3文件创建成功了，只是里面是空的。</p><p>shell对于<strong>错误消息的处理是跟普通输出分开</strong>的。如果你创建了在后台模式下运行的shell脚本，通常你必须依赖发送到日志文件的输出消息。用这种方法的话，如果出现了错误信息，这些信息是不会出现在日志文件中的。你需要换种方法来处理。</p></li><li><p><strong>STDERR</strong> 代表shell的标准错误输出。shell或shell中运行的程序和脚本出错时生成的错误消息都会发送到这个位置。默认情况下，STDERR文件描述符会和STDOUT文件描述符指向同样的地方。也就是说，默认情况下，错误消息也会输出到显示器输出中。</p><p>但是，<strong>STDERR并不会随着STDOUT的重定向而发生改变</strong>。使用脚本时，也希望将错误消息保存到日志文件中的时候。</p></li></ol><h4 id="2-重定向错误"><a href="#2-重定向错误" class="headerlink" title="2.重定向错误"></a>2.重定向错误</h4><ol><li><p>只重定向错误：STDERR文件描述符被设成2。可以选择只重定向错误消息，将该文件描述符值放在重定向符号前。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al badfile 2&gt; test4</span><br></pre></td></tr></table></figure></li><li><p>重定向错误和数据:用<strong>两个重定向符号</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al <span class="built_in">test</span> test2 test3 badtest 2&gt; test6 1&gt; test7</span><br></pre></td></tr></table></figure><p>也可以将STDERR和STDOUT的输出重定向到同一个输出文件。bash shell提供了特殊的重定向符号<code>&amp;&gt;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al <span class="built_in">test</span> test2 test3 badtest &amp;&gt; test7</span><br></pre></td></tr></table></figure><p>相较于标准输出，bash  shell<strong>自动赋予了错误消息更高的优先级</strong>。这样能够集中浏览错误信息了。</p></li></ol><h3 id="在脚本中重定向输出"><a href="#在脚本中重定向输出" class="headerlink" title="在脚本中重定向输出"></a>在脚本中重定向输出</h3><p>脚本中用STDOUT和STDERR文件描述符以在多个位置生成输出，只要简单地重定向相应的文件描述符就行了。</p><h4 id="1-临时重定向"><a href="#1-临时重定向" class="headerlink" title="1.临时重定向"></a>1.临时重定向</h4><p>可以将单独的一行输出重定向到STDERR。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is an error message&quot;</span> &gt;&amp;2</span><br></pre></td></tr></table></figure><p>默认情况下，Linux会将STDERR导向STDOUT。但是，如果在运行脚本时重定向了STDERR，脚本中所有导向STDERR的文本都会被重定向。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat test8 </span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line"><span class="comment"># testing STDERR messages </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is an error&quot;</span> &gt;&amp;2 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is normal output&quot;</span></span><br><span class="line"></span><br><span class="line">$ ./test8 </span><br><span class="line">This is an error </span><br><span class="line">This is normal output</span><br><span class="line"></span><br><span class="line">$ ./test8 2&gt; test9 </span><br><span class="line">This is normal output </span><br><span class="line">$ cat test9 </span><br><span class="line">This is an error</span><br></pre></td></tr></table></figure><h4 id="2-永久重定向"><a href="#2-永久重定向" class="headerlink" title="2.永久重定向"></a>2.永久重定向</h4><p>可以用exec命令告诉shell在脚本执行期间重定向某个特定文件描述符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># redirecting all output to a file </span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;testout </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test of redirecting all output&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;from a script to another file.&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;without having to redirect every individual line&quot;</span></span><br></pre></td></tr></table></figure><p>exec命令会启动一个新shell并将STDOUT文件描述符重定向到文件。脚本中发给STDOUT的所有输出会被重定向到文件。</p><h3 id="在脚本中重定向输入"><a href="#在脚本中重定向输入" class="headerlink" title="在脚本中重定向输入"></a>在脚本中重定向输入</h3><p>可以使用与脚本中重定向STDOUT和STDERR相同的方法来将STDIN从键盘重定向到其他位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> 0&lt; testfile</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># redirecting file input </span></span><br><span class="line"><span class="comment">#重定向只要在脚本需要输入时就会作用。</span></span><br><span class="line"><span class="built_in">exec</span> 0&lt; testfile </span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Line #<span class="variable">$count</span>: <span class="variable">$line</span>&quot;</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="创建自己的重定向"><a href="#创建自己的重定向" class="headerlink" title="创建自己的重定向"></a>创建自己的重定向</h4><h4 id="1-输出文件描述符"><a href="#1-输出文件描述符" class="headerlink" title="1.输出文件描述符"></a>1.输出文件描述符</h4><p>可以用exec命令来给输出分配文件描述符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using an alternative file descriptor </span></span><br><span class="line"><span class="built_in">exec</span> 3&gt;test13out </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This should display on the monitor&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;and this should be stored in the file&quot;</span> &gt;&amp;3 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Then this should be back on the monitor&quot;</span></span><br><span class="line"></span><br><span class="line">$ ./test13 </span><br><span class="line">This should display on the monitor </span><br><span class="line">Then this should be back on the monitor </span><br><span class="line">$ cat test13out </span><br><span class="line">and this should be stored <span class="keyword">in</span> the file</span><br></pre></td></tr></table></figure><p>也可以不用创建新文件，而是使用exec命令来将输出<strong>追加</strong>到现有文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> 3&gt;&gt;test13out </span><br></pre></td></tr></table></figure><h4 id="2-重定向文件描述符"><a href="#2-重定向文件描述符" class="headerlink" title="2.重定向文件描述符"></a>2.重定向文件描述符</h4><p>可以将STDOUT的原来位置重定向到另一个文件描述符，然后再利用该文件描述符重定向回STDOUT。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># storing STDOUT, then coming back to it </span></span><br><span class="line"><span class="comment">#将文件描述符3重定向到文件描述符1的当前位置,送给文件描述符3的输出都将出现在显示器上。</span></span><br><span class="line"><span class="built_in">exec</span> 3&gt;&amp;1 </span><br><span class="line"><span class="comment">#将STDOUT重定向到文件，shell现在会将发送给STDOUT的输出直接重定向到输出文件中。</span></span><br><span class="line"><span class="comment">#文件描述符3仍然指向STDOUT原来的位置，也就是显示器。</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;test14out </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This should store in the output file&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;along with this line.&quot;</span></span><br><span class="line"><span class="comment">#脚本将STDOUT重定向到文件描述符3的当前位置（现在仍然是显示器）。</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;&amp;3 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Now things should be back to normal&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-输入文件描述符"><a href="#3-输入文件描述符" class="headerlink" title="3.输入文件描述符"></a>3.输入文件描述符</h4><p>在重定向到文件之前，先<strong>将STDIN文件描述符保存到另外一个文件描述符，然后在读取完文件之后再将STDIN恢复到它原来的位置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redirecting input file descriptors </span></span><br><span class="line"><span class="comment">#文件描述符6用来保存STDIN的位置。</span></span><br><span class="line"><span class="built_in">exec</span> 6&lt;&amp;0 </span><br><span class="line"><span class="built_in">exec</span> 0&lt; testfile </span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Line #<span class="variable">$count</span>: <span class="variable">$line</span>&quot;</span> </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment">#将STDIN重定向到文件描述符6</span></span><br><span class="line"><span class="built_in">exec</span> 0&lt;&amp;6 </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Are you done now? &quot;</span> answer </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$answer</span> <span class="keyword">in</span> </span><br><span class="line">Y|y) <span class="built_in">echo</span> <span class="string">&quot;Goodbye&quot;</span>;; </span><br><span class="line">N|n) <span class="built_in">echo</span> <span class="string">&quot;Sorry, this is the end.&quot;</span>;; </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="列出打开的文件描述符"><a href="#列出打开的文件描述符" class="headerlink" title="列出打开的文件描述符"></a>列出打开的文件描述符</h3><p><code>lsof</code>命令会列出整个Linux系统打开的所有文件描述符。</p><h3 id="阻止命令输出"><a href="#阻止命令输出" class="headerlink" title="阻止命令输出"></a>阻止命令输出</h3><p>将STDERR重定向到一个叫作null文件的特殊文件。</p><p>在Linux系统上null文件的标准位置是<code>/dev/null</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="创建临时文件"><a href="#创建临时文件" class="headerlink" title="创建临时文件"></a>创建临时文件</h3><p>Linux使用/tmp目录来存放不需要永久保留的文件</p><p><code>mktemp</code>命令可以在/tmp目录中创建一个唯一的临时文件。</p><h4 id="1-创建本地临时文件"><a href="#1-创建本地临时文件" class="headerlink" title="1.创建本地临时文件"></a>1.创建本地临时文件</h4><p>mktemp会在本地目录中创建一个文件。要用mktemp命令在本地目录中创建一个临时文件，你只要指定一个文件名模板就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mktemp testing.XXXXXX </span><br><span class="line">$ ls -al testing* </span><br><span class="line">-rw------- 1 rich rich 0 Oct 17 21:30 testing.UfIi13</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tempfile=$(mktemp test19.XXXXXX)</span><br></pre></td></tr></table></figure><h4 id="2-在-tmp-目录创建临时文件"><a href="#2-在-tmp-目录创建临时文件" class="headerlink" title="2.在/tmp 目录创建临时文件"></a>2.在/tmp 目录创建临时文件</h4><p>-t选项会强制mktemp命令来在系统的临时目录来创建该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> mktemp -t test.XXXXXX </span><br><span class="line">/tmp/test.xG3374</span><br></pre></td></tr></table></figure><h4 id="3-创建临时目录"><a href="#3-创建临时目录" class="headerlink" title="3.创建临时目录"></a>3.创建临时目录</h4><p>-d选项告诉mktemp命令来创建一个临时目录而不是临时文件。</p><h3 id="记录消息"><a href="#记录消息" class="headerlink" title="记录消息"></a>记录消息</h3><p>将输出同时发送到显示器和日志文件</p><p>tee命令相当于管道的一个T型接头。它将从STDIN过来的数据同时发往两处。一处是</p><p>STDOUT，另一处是tee命令行所指定的文件名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee filename</span><br></pre></td></tr></table></figure><p>tee会<strong>重定向来自STDIN的数据</strong>，你可以用它配合管道命令来重定向命令输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date | tee testfile </span><br><span class="line">Sun Oct 19 18:56:21 EDT 2014 </span><br><span class="line">$ cat testfile </span><br><span class="line">Sun Oct 19 18:56:21 EDT 2014</span><br></pre></td></tr></table></figure><p>默认情况下，tee命令会在每次使用时覆盖输出文件内容。<code>-a</code>将数据追加到文件中</p><h2 id="六、控制脚本"><a href="#六、控制脚本" class="headerlink" title="六、控制脚本"></a>六、控制脚本</h2><h3 id="处理信号"><a href="#处理信号" class="headerlink" title="处理信号"></a>处理信号</h3><table><thead><tr><th>信 号</th><th>值</th><th>描 述</th></tr></thead><tbody><tr><td>1</td><td>SIGHUP</td><td>挂起进程</td></tr><tr><td>2</td><td>SIGINT</td><td>终止进程</td></tr><tr><td>3</td><td>SIGQUIT</td><td>停止进程</td></tr><tr><td>9</td><td>SIGKILL</td><td>无条件终止进程</td></tr><tr><td>15</td><td>SIGTERM</td><td>尽可能终止进程</td></tr><tr><td>17</td><td>SIGSTOP</td><td>无条件停止进程，但不是终止进程</td></tr><tr><td>18</td><td>SIGTSTP</td><td>停止或暂停进程，但不终止进程</td></tr><tr><td>19</td><td>SIGCONT</td><td>继续运行停止的进程</td></tr></tbody></table><p>bash shell会<strong>忽略</strong>收到的任何SIGQUIT (3)和SIGTERM (15)信号。bash shell会处理收到的SIGHUP (1)和SIGINT (2)信号。</p><p>如果bash shell收到了<code>SIGHUP</code>信号，比如当你要离开一个交互式shell，它就会退出。退出之前，它会将<code>SIGHUP</code>信号传给所有由该shell所启动的进程。通过<code>SIGINT</code>信号，可以中断shell。Linux内核会停止为shell分配CPU处理时间。这</p><h4 id="1-生成信号"><a href="#1-生成信号" class="headerlink" title="1.生成信号"></a>1.生成信号</h4><ol><li><p>中断进程：<code>Ctrl+C</code>组合键会生成<code>SIGINT</code>信号</p></li><li><p>暂停进程：你可以在进程运行期间暂停进程，而无需终止它。<code>Ctrl+Z</code>组合键会生成一个<code>SIGTSTP</code>信号。停止（stopping）进程，跟终止（terminating）进程不同：停止进程会让程序继续保留在内存中，并能从上次停止的位置继续运行。</p><p>如果你的shell会话中有一个已停止的作业，在退出shell时，bash会提醒你。可以用<code>ps</code>命令来查看已停止的作业。</p></li></ol><h4 id="2-捕获信号"><a href="#2-捕获信号" class="headerlink" title="2.捕获信号"></a>2.捕获信号</h4><p><code>trap</code>命令允许指定shell脚本要监看并从shell中拦截的Linux信号。如果脚本收到了<code>trap</code>命令中列出的信号，该信号不再由shell处理，而是交由本地处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">trap</span> commands signals</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Testing signal trapping </span></span><br><span class="line"><span class="comment"># 用到的trap命令会在每次检测到SIGINT信号时显示一行简单的文本消息。</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27; Sorry! I have trapped Ctrl-C&#x27;&quot;</span> SIGINT </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> This is a <span class="built_in">test</span> script </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 10 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span> </span><br><span class="line"> sleep 1 </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the test script&quot;</span></span><br><span class="line"></span><br><span class="line">./test1.sh</span><br><span class="line">This is a <span class="built_in">test</span> script </span><br><span class="line">Loop <span class="comment">#1 </span></span><br><span class="line">Loop <span class="comment">#2 </span></span><br><span class="line">Loop <span class="comment">#3 </span></span><br><span class="line">Loop <span class="comment">#4 </span></span><br><span class="line">Loop <span class="comment">#5 </span></span><br><span class="line">^C Sorry! I have trapped Ctrl-C </span><br><span class="line">Loop <span class="comment">#6 </span></span><br><span class="line">Loop <span class="comment">#7 </span></span><br><span class="line">Loop <span class="comment">#8 </span></span><br><span class="line">^C Sorry! I have trapped Ctrl-C </span><br><span class="line">Loop <span class="comment">#9 </span></span><br><span class="line">Loop <span class="comment">#10</span></span><br></pre></td></tr></table></figure><h4 id="3-捕获脚本退出"><a href="#3-捕获脚本退出" class="headerlink" title="3.捕获脚本退出"></a>3.捕获脚本退出</h4><p>也可以在shell脚本退出时进行捕获。要捕获shell脚本的退出，只要在trap命令后加上EXIT信号就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Trapping the script exit </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo Goodbye...&quot;</span> EXIT </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span> </span><br><span class="line"> sleep 1 </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Loop <span class="comment">#1 </span></span><br><span class="line">Loop <span class="comment">#2 </span></span><br><span class="line">Loop <span class="comment">#3 </span></span><br><span class="line">Loop <span class="comment">#4 </span></span><br><span class="line">Loop <span class="comment">#5 </span></span><br><span class="line">Goodbye...</span><br></pre></td></tr></table></figure><h4 id="4-修改或移除捕获"><a href="#4-修改或移除捕获" class="headerlink" title="4.修改或移除捕获"></a>4.修改或移除捕获</h4><p>使用带有新选项的trap命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Modifying a set trap </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27; Sorry... Ctrl-C is trapped.&#x27;&quot;</span> SIGINT </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span> </span><br><span class="line"> sleep 1 </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27; I modified the trap!&#x27;&quot;</span> SIGINT </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Second Loop #<span class="variable">$count</span>&quot;</span> </span><br><span class="line"> sleep 1 </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line">don</span><br><span class="line"></span><br><span class="line">Loop <span class="comment">#1 </span></span><br><span class="line">Loop <span class="comment">#2 </span></span><br><span class="line">Loop <span class="comment">#3 </span></span><br><span class="line">^C Sorry... Ctrl-C is trapped. </span><br><span class="line">Loop <span class="comment">#4 </span></span><br><span class="line">Loop <span class="comment">#5 </span></span><br><span class="line">Second Loop <span class="comment">#1 </span></span><br><span class="line">Second Loop <span class="comment">#2 </span></span><br><span class="line">^C I modified the <span class="built_in">trap</span>! </span><br><span class="line">Second Loop <span class="comment">#3 </span></span><br><span class="line">Second Loop <span class="comment">#4 </span></span><br><span class="line">Second Loop <span class="comment">#5</span></span><br></pre></td></tr></table></figure><p>删除已设置好的捕获。在trap命令与希望恢复默认行为的信号列表之间加上两个破折号就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Removing a set trap </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27; Sorry... Ctrl-C is trapped.&#x27;&quot;</span> SIGINT </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Loop #<span class="variable">$count</span>&quot;</span> </span><br><span class="line"> sleep 1 </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Remove the trap </span></span><br><span class="line"><span class="built_in">trap</span> -- SIGINT </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I just removed the trap&quot;</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line">count=1 </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ] </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Second Loop #<span class="variable">$count</span>&quot;</span> </span><br><span class="line"> sleep 1 </span><br><span class="line"> count=$[ <span class="variable">$count</span> + 1 ] </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="以后台模式运行脚本"><a href="#以后台模式运行脚本" class="headerlink" title="以后台模式运行脚本"></a>以后台模式运行脚本</h3><h4 id="1-后台运行脚本"><a href="#1-后台运行脚本" class="headerlink" title="1.后台运行脚本"></a>1.后台运行脚本</h4><p>加个<code>&amp;</code>符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test4.sh &amp;</span><br></pre></td></tr></table></figure><p>当&amp;符放到命令后时，它会将命令和bash shell分离开来，将命令作为系统中的一个独立的后台进程运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1] 3231</span><br></pre></td></tr></table></figure><p>方括号中的数字是shell分配给后台进程的作业号。下一个数是Linux系统分配给进程的进程ID（PID）</p><p>当后台进程结束时，它会在终端上显示出一条消息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1] Done ./test4.sh</span><br></pre></td></tr></table></figure><p>当后台进程运行时，它<strong>仍然会使用终端显示器来显示STDOUT和STDERR消息。</strong></p><h4 id="2-运行多个后台作业"><a href="#2-运行多个后台作业" class="headerlink" title="2.运行多个后台作业"></a>2.运行多个后台作业</h4><p>ps命令，可以看到所有脚本处于运行状态。</p><p>每一个后台进程都和终端会话（pts/0）终端联系在一起。<strong>如果终端会话退出，那么后台进程也会随之退出。</strong></p><h3 id="在非控制台下运行脚本"><a href="#在非控制台下运行脚本" class="headerlink" title="在非控制台下运行脚本"></a>在非控制台下运行脚本</h3><p>想在终端会话中启动shell脚本，然后让脚本一直以后台模式运行到结束，即使退出了终端会话。这可以用<code>nohup</code>命令来实现。</p><p><code>nohup</code>命令运行了另外一个命令来阻断所有发送给该进程的<code>SIGHUP</code>信号。这会在退出终端会话时阻止进程退出。</p><p>在于，当你使用<code>nohup</code>命令时，如果关闭该会话，脚本会<strong>忽略</strong>终端会话发过来的SIGHUP信号。</p><p>由于nohup命令会解除终端与进程的关联，进程也就<strong>不再同STDOUT和STDERR联系在一起。</strong>为了保存该命令产生的输出，nohup命令会自动将STDOUT和STDERR的消息重定向到一个名为<code>nohup.out</code>的文件中。</p><h3 id="作业控制"><a href="#作业控制" class="headerlink" title="作业控制"></a>作业控制</h3><p>在作业停止后，Linux系统会让你选择是终止还是重启。你可以用kill命令终止该进程。要重启停止的进程需要向其发送一个<code>SIGCONT</code>信号。</p><h4 id="1-查看作业"><a href="#1-查看作业" class="headerlink" title="1.查看作业"></a>1.查看作业</h4><p><code>jobs</code>命令允许查看shell当前正在处理的作业。</p><p>脚本用$$变量来显示Linux系统分配给该脚本的PID</p><table><thead><tr><th>参 数</th><th>描 述</th></tr></thead><tbody><tr><td>-l</td><td>列出进程的PID以及作业号</td></tr><tr><td>-n</td><td>只列出上次shell发出的通知后改变了状态的作业</td></tr><tr><td>-p</td><td>只列出作业的PID</td></tr><tr><td>-r</td><td>只列出运行中的作业</td></tr><tr><td>-s</td><td>只列出已停止的作业</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">jobs</span> -l</span><br><span class="line">[1]+ 1897 Stopped ./test10.sh </span><br><span class="line">[2]- 1917 Running ./test10.sh &gt; test10.out &amp;</span><br></pre></td></tr></table></figure><p>带<strong>加号</strong>的作业会被当做<strong>默认作业</strong>。在使用作业控制命令时，如果未在命令行指定任何作业号，该作业会被当成作业控制命令的操作对象。</p><p>当前的默认作业完成处理后，带减号的作业成为下一个默认作业。<strong>任何时候都只有一个带加号的作业和一个带减号的作业</strong>，不管shell中有多少个正在运行的作业。</p><h4 id="2-重启停止的作业"><a href="#2-重启停止的作业" class="headerlink" title="2.重启停止的作业"></a>2.重启停止的作业</h4><p>用bg命令加上作业号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">bg</span> 2</span><br><span class="line">[2]+ ./test12.sh &amp;</span><br></pre></td></tr></table></figure><p>要以前台模式重启作业，可用带有作业号的fg命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">fg</span> 2</span><br><span class="line">./test12.sh</span><br></pre></td></tr></table></figure><h3 id="调整谦让度"><a href="#调整谦让度" class="headerlink" title="调整谦让度"></a>调整谦让度</h3><p>内核负责将CPU时间分配给系统上运行的每个进程。<strong>调度优先级（scheduling priority）</strong>是内核分配给进程的CPU时间（相对于其他进程）</p><blockquote><p>最低值-20是最高优先级，而最高值19是最低优先级，这太容易记混了。</p></blockquote><h4 id="1-nice-命令"><a href="#1-nice-命令" class="headerlink" title="1.nice 命令"></a>1.nice 命令</h4><p><code>nice</code>命令允许你设置命令启动时的调度优先级。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> nice -n 10 ./test4.sh &gt; test4.out &amp;</span><br><span class="line">[1] 4973</span><br></pre></td></tr></table></figure><p>nice命令<strong>阻止普通系统用户来提高命令的优先级</strong>。注意，指定的作业的确运行了，但是试图使用nice命令提高其优先级的操作却失败了。</p><p>nice命令的-n选项并不是必须的，只需要在破折号后面跟上优先级就行了。</p><h4 id="2-renice命令"><a href="#2-renice命令" class="headerlink" title="2.renice命令"></a>2.renice命令</h4><p>想改变系统上已运行命令的优先级。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ./test11.sh &amp;</span><br><span class="line">[1] 5055 </span><br><span class="line">$ </span><br><span class="line">$ ps -p 5055 -o pid,ppid,ni,cmd</span><br><span class="line"> PID PPID NI CMD </span><br><span class="line"> 5055 4721 0 /bin/bash ./test11.sh</span><br><span class="line"> </span><br><span class="line">$ renice -n 10 -p 5055</span><br><span class="line">5055: old priority 0, new priority 10 </span><br><span class="line"></span><br><span class="line">$ ps -p 5055 -o pid,ppid,ni,cmd</span><br><span class="line"> PID PPID NI CMD </span><br><span class="line"> 5055 4721 10 /bin/bash ./test11.sh</span><br></pre></td></tr></table></figure><ul><li>只能对<strong>属于你的进程</strong>执行renice； </li><li>只能通过renice<strong>降低进程的优先级</strong>；</li><li><strong>root</strong>用户可以通过renice来<strong>任意调整进程</strong>的优先级。</li></ul><h3 id="定时运行作业"><a href="#定时运行作业" class="headerlink" title="定时运行作业"></a>定时运行作业</h3><h4 id="at-命令来计划执行作业"><a href="#at-命令来计划执行作业" class="headerlink" title="at 命令来计划执行作业"></a><strong>at</strong> 命令来计划执行作业</h4><p>at命令会将作业提交到队列中，指定shell何时运行该作业。at的守护进程<code>atd</code>会以<strong>后台模式</strong>运行，检查作业队列来运行作业。</p><p><code>atd</code>守护进程会检查系统上的一个特殊目录（通常位于<code>/var/spool/at</code>）来获取用at命令提交的作业。默认情况下，<code>atd</code>守护进程会<strong>每60秒</strong>检查一下这个目录。有</p><ol><li><p>at命令的格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at [-f filename] time</span><br></pre></td></tr></table></figure><p>at命令会将STDIN的输入放到队列中。你可以用-f参数来指定用于<strong>读取命令</strong>（脚本文件）的文件名。</p><p>time格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标准的小时和分钟格式，比如10:15。 </span><br><span class="line">AM/PM指示符，比如10:15 PM。 </span><br><span class="line">特定可命名时间，比如now、noon、midnight或者teatime（4 PM）。</span><br><span class="line">标准日期格式，比如MMDDYY、MM/DD/YY或DD.MM.YY。 </span><br><span class="line">文本日期，比如Jul 4或Dec 25，加不加年份均可。</span><br></pre></td></tr></table></figure><p>用-q参数指定不同的队列字母。</p></li><li><p>获取作业的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//now指示at命令立刻执行该脚本。</span><br><span class="line">at -f test13.sh now</span><br></pre></td></tr></table></figure><p>使用at命令时，最好在脚本中对STDOUT和STDERR进行重定向</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># Test using at command </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This script ran at <span class="subst">$(date +%B%d,%T)</span>&quot;</span> &gt; test13b.out </span><br><span class="line"><span class="built_in">echo</span> &gt;&gt; test13b.out </span><br><span class="line">sleep 5 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the script&#x27;s end...&quot;</span> &gt;&gt; test13b.out</span><br></pre></td></tr></table></figure><p><code>-M</code>选项来屏蔽作业产生的输出信息。</p></li><li><p>列出等待的作业<code>atq</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ at -M -f test13b.sh teatime</span><br><span class="line">job 17 at 2015-07-14 16:00 </span><br><span class="line">$ </span><br><span class="line">$ at -M -f test13b.sh tomorrow</span><br><span class="line">job 18 at 2015-07-15 13:03 </span><br><span class="line">$ </span><br><span class="line">$ at -M -f test13b.sh 13:30</span><br><span class="line">job 19 at 2015-07-14 13:30 </span><br><span class="line">$ </span><br><span class="line">$ at -M -f test13b.sh now</span><br><span class="line">job 20 at 2015-07-14 13:03 </span><br><span class="line">$ </span><br><span class="line">$ atq</span><br><span class="line">20 2015-07-14 13:03 = Christine </span><br><span class="line">18 2015-07-15 13:03 a Christine </span><br><span class="line">17 2015-07-14 16:00 a Christine </span><br><span class="line">19 2015-07-14 13:30 a Christineatq</span><br></pre></td></tr></table></figure></li><li><p>删除作业<code>atrm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atrm 18</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-安排需要定期执行的脚本"><a href="#2-安排需要定期执行的脚本" class="headerlink" title="2.安排需要定期执行的脚本"></a>2.安排需要定期执行的脚本</h4><p>统使用cron程序来安排要定期执行的作业。。cron程序会在后台运行并检查一个特殊的表（被称作cron时间表）</p><ol><li><p>cron时间表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">min hour dayofmonth month dayofweek <span class="built_in">command</span></span><br><span class="line"><span class="comment">#允许用特定值、取值范围（比如1~5）或者是通配符（星号）来指定条目。</span></span><br><span class="line"><span class="comment">#每天的10:15运行一个命令</span></span><br><span class="line">15 10 * * * <span class="built_in">command</span></span><br><span class="line"><span class="comment">#在每周一4:15 PM运行的命令</span></span><br><span class="line">15 16 * * 1 <span class="built_in">command</span></span><br><span class="line"><span class="comment">#在每个月的第一天中午12点执行命令。</span></span><br><span class="line">00 12 1 * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在每个月的最后一天执行的命令</span></span><br><span class="line"><span class="comment">#if-then语句来检查明天的日期是不是01：</span></span><br><span class="line">00 12 * * * <span class="keyword">if</span> [`date +%d -d tomorrow` = 01 ] ; <span class="keyword">then</span> ; <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>命令列表必须指定要运行的命令或脚本的全路径名。</p></li><li><p>构建cron时间表 <code>crontab</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要列出已有的cron时间表</span></span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure></li><li><p>浏览cron目录</p><p>对<strong>精确的执行时间要求</strong>不高，用预配置的cron脚本目录会更方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hourly、daily、monthly和weekly</span><br><span class="line"></span><br><span class="line">/etc/cron.*ly</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-使用新-shell-启动脚本"><a href="#3-使用新-shell-启动脚本" class="headerlink" title="3.使用新 shell 启动脚本"></a>3.使用新 shell 启动脚本</h4><p>希望为shell会话设置某些shell功能，或者只是为了确保已经设置了某个文件。</p><p>bash shell都会运行<code>.bashrc</code>文件。可以这样来验证：在主目录下的.bashrc文件中加入一条简单的echo语句，然后启动一个新shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc </span></span><br><span class="line"><span class="comment"># Source global definitions </span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span> </span><br><span class="line"> . /etc/bashrc </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="comment"># User specific aliases and functions </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I&#x27;m in a new shell!&quot;</span></span><br></pre></td></tr></table></figure><p><code>.bashrc</code>文件会运行两次：一次是当你登入bash shell时，另一次是当你启动一个bash shell时。</p><p>一个脚本在两个时刻都得以运行，可以把这个脚本放进该文件中。</p><h2 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><h4 id="1-创建函数"><a href="#1-创建函数" class="headerlink" title="1.创建函数"></a>1.创建函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> name &#123; </span><br><span class="line"> commands </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">name</span></span>() &#123; </span><br><span class="line">commands </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用函数"><a href="#2-使用函数" class="headerlink" title="2.使用函数"></a>2.使用函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using a function in a script </span></span><br><span class="line"><span class="keyword">function</span> func1 &#123; </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;This is an example of a function&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the end of the loop&quot;</span> </span><br><span class="line">func1 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Now this is the end of the script&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>在函数<strong>被定义前使用函数</strong>，你会收到一条错误消息。</p></li><li><p>重定义了函数，新定义会覆盖原来函数的定义.</p></li></ul><h4 id="3-返回值"><a href="#3-返回值" class="headerlink" title="3.返回值"></a>3.返回值</h4><p>bash shell会把函数当作一个小型脚本</p><ol><li><p><strong>默认退出状态码</strong> 0</p><p>用标准变量<code>$?</code>来确定函数的退出状态码。</p></li><li><p>使用 <strong>return</strong> 命令</p><p>return命令允许指定一个<strong>整数值</strong>来定义函数的退出状态码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using the return command in a function </span></span><br><span class="line"><span class="comment">#会将$value变量中用户输入的值翻倍</span></span><br><span class="line"><span class="keyword">function</span> dbl &#123; </span><br><span class="line"> <span class="built_in">read</span> -p <span class="string">&quot;Enter a value: &quot;</span> value </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;doubling the value&quot;</span> </span><br><span class="line"> <span class="built_in">return</span> $[ <span class="variable">$value</span> * 2 ] </span><br><span class="line">&#125; </span><br><span class="line">dbl </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The new value is $?&quot;</span></span><br></pre></td></tr></table></figure><p>退出状态码必须是<strong>0~255</strong>。任何大于256的值都会产生一个错误值。</p></li><li><p>使用函数输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个命令会将dbl函数的输出赋给$result变量。</span></span><br><span class="line">result=<span class="string">&#x27;dbl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using the echo to return a value </span></span><br><span class="line"><span class="keyword">function</span> dbl &#123; </span><br><span class="line"> <span class="built_in">read</span> -p <span class="string">&quot;Enter a value: &quot;</span> value </span><br><span class="line"> <span class="built_in">echo</span> $[ <span class="variable">$value</span> * 2 ] </span><br><span class="line">&#125; </span><br><span class="line">result=$(dbl)</span><br></pre></td></tr></table></figure></li></ol><h3 id="在函数中使用变量"><a href="#在函数中使用变量" class="headerlink" title="在函数中使用变量"></a>在函数中使用变量</h3><h4 id="向函数传递参数"><a href="#向函数传递参数" class="headerlink" title="向函数传递参数"></a>向函数传递参数</h4><p>函数名会在$0变量中定义，函数命令行上的任何参数都会通过$1、$2等定义。</p><p><code>$#</code>来判断传给函数的参数数目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># trying to access script parameters inside a function  这个脚本运行出错</span></span><br><span class="line"><span class="keyword">function</span> badfunc1 &#123; </span><br><span class="line"> <span class="comment">#函数也使用了$1和$2变量，但它们和脚本主体中的$1和$2变量并不相同。</span></span><br><span class="line"> <span class="built_in">echo</span> $[ <span class="variable">$1</span> * <span class="variable">$2</span> ] </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 2 ] </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> value=$(badfunc1) </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$value</span>&quot;</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Usage: badtest1 a b&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="在函数中处理变量"><a href="#在函数中处理变量" class="headerlink" title="在函数中处理变量"></a>在函数中处理变量</h4><ol><li><p>全局变量</p><p>如果你在脚本的<strong>主体部分</strong>定义了一个全局变量，那么可以在<strong>函数内读</strong>取它的值。在<strong>函数内</strong>定义了一个全局变量，可以在脚本的<strong>主体部分</strong>读取它的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using a global variable to pass a value </span></span><br><span class="line"><span class="keyword">function</span> dbl &#123;</span><br><span class="line"> value=$[ <span class="variable">$value</span> * 2 ] </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter a value: &quot;</span> value </span><br><span class="line">dbl </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The new value is: <span class="variable">$value</span>&quot;</span> </span><br><span class="line">$ </span><br><span class="line">$ ./test8 </span><br><span class="line">Enter a value: 450 </span><br><span class="line">The new value is: 900</span><br><span class="line"><span class="comment">#当dbl函数被调用时，该变量及其值在函数中都依然有效。如果变量在函数内被赋予了新值，那么在脚本中引用该变量时，新值也依然有效。</span></span><br></pre></td></tr></table></figure></li><li><p>局部变量</p><p>函数内部使用的<strong>任何变量都可以被声明成局部变量</strong>。要实现这一点，只要在变量声明的前面加上local关键字就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> temp</span><br></pre></td></tr></table></figure></li></ol><h3 id="数组变量和函数"><a href="#数组变量和函数" class="headerlink" title="数组变量和函数"></a>数组变量和函数</h3><h4 id="向函数传数组参数"><a href="#向函数传数组参数" class="headerlink" title="向函数传数组参数"></a>向函数传数组参数</h4><p>将该数组变量的值分解成单个的值，然后将这些值作为函数参数使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># array variable to function test </span></span><br><span class="line"><span class="keyword">function</span> testit &#123; </span><br><span class="line"> <span class="built_in">local</span> newarray </span><br><span class="line"> newarray=(;<span class="string">&#x27;echo &quot;$@&quot;&#x27;</span>) </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;The new array value is: <span class="variable">$&#123;newarray[*]&#125;</span>&quot;</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">myarray=(1 2 3 4 5) </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The original array is <span class="variable">$&#123;myarray[*]&#125;</span>&quot;</span> </span><br><span class="line">testit <span class="variable">$&#123;myarray[*]&#125;</span> </span><br><span class="line">$</span><br></pre></td></tr></table></figure><h4 id="从函数返回数组"><a href="#从函数返回数组" class="headerlink" title="从函数返回数组"></a>从函数返回数组</h4><p>函数用echo语句来按正确顺序输出单个数组值，然后脚本再将它们重新放进一个新的数组变量中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># returning an array value </span></span><br><span class="line"><span class="keyword">function</span> arraydblr &#123; </span><br><span class="line"> <span class="built_in">local</span> origarray </span><br><span class="line"> <span class="built_in">local</span> newarray </span><br><span class="line"> <span class="built_in">local</span> elements </span><br><span class="line"> <span class="built_in">local</span> i </span><br><span class="line"> origarray=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)) </span><br><span class="line"> <span class="comment">#arraydblr函数将该数组重组到新的数组变量中，生成该输出数组变量的一个副本。</span></span><br><span class="line"> newarray=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)) </span><br><span class="line"> elements=$[ <span class="variable">$#</span> - 1 ] </span><br><span class="line"> <span class="keyword">for</span> (( i = 0; i &lt;= <span class="variable">$elements</span>; i++ )) </span><br><span class="line"> &#123; </span><br><span class="line"> newarray[<span class="variable">$i</span>]=$[ <span class="variable">$&#123;origarray[$i]&#125;</span> * 2 ] </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$&#123;newarray[*]&#125;</span> </span><br><span class="line">&#125; </span><br><span class="line">myarray=(1 2 3 4 5) </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The original array is: <span class="variable">$&#123;myarray[*]&#125;</span>&quot;</span> </span><br><span class="line">arg1=$(<span class="built_in">echo</span> <span class="variable">$&#123;myarray[*]&#125;</span>) </span><br><span class="line">result=($(arraydblr <span class="variable">$arg1</span>)) </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The new array is: <span class="variable">$&#123;result[*]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><p>自成体系的函数不需要使用任何外部资源。这个特性使得函数可以递归地调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using recursion </span></span><br><span class="line"><span class="comment">#计算阶乘</span></span><br><span class="line"><span class="keyword">function</span> factorial &#123; </span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$1</span> -eq 1 ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">echo</span> 1 </span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">local</span> temp=$[ <span class="variable">$1</span> - 1 ] </span><br><span class="line"> <span class="built_in">local</span> result=$(factorial <span class="variable">$temp</span>) </span><br><span class="line"> <span class="built_in">echo</span> $[ <span class="variable">$result</span> * <span class="variable">$1</span> ] </span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter value: &quot;</span> value </span><br><span class="line">result=$(factorial <span class="variable">$value</span>) </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The factorial of <span class="variable">$value</span> is: <span class="variable">$result</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h3><p>是创建一个包含脚本中所需函数的公用库文件。这里有个叫作<code>myfuncs</code>的库文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> addem &#123; </span><br><span class="line"> <span class="built_in">echo</span> $[ <span class="variable">$1</span> + <span class="variable">$2</span> ] </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> multem &#123; </span><br><span class="line"> <span class="built_in">echo</span> $[ <span class="variable">$1</span> * <span class="variable">$2</span> ] </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> divem &#123; </span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$2</span> -ne 0 ] </span><br><span class="line"> <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> $[ <span class="variable">$1</span> / <span class="variable">$2</span> ] </span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line"> <span class="built_in">echo</span> -1 </span><br><span class="line"> <span class="keyword">fi</span> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>source</code>会在当前shell上下文中执行命令，而不是创建一个新shell。<strong>点操作符（dot operator）。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># using a library file the wrong way </span></span><br><span class="line"><span class="built_in">source</span> myfuncs </span><br><span class="line">result=$(addem 10 15) </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$result</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="在命令行上使用函数"><a href="#在命令行上使用函数" class="headerlink" title="在命令行上使用函数"></a>在命令行上使用函数</h3><h4 id="在-bashrc-文件中定义函数"><a href="#在-bashrc-文件中定义函数" class="headerlink" title="在.bashrc 文件中定义函数"></a>在.bashrc 文件中定义函数</h4><ol><li><p>直接定义函数</p><p>可以直接在主目录下的.bashrc文件中定义函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc </span></span><br><span class="line"><span class="comment"># Source global definitions </span></span><br><span class="line"><span class="keyword">if</span> [ -r /etc/bashrc ]; <span class="keyword">then</span> </span><br><span class="line"> . /etc/bashrc </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">function</span> addem &#123; </span><br><span class="line"> <span class="built_in">echo</span> $[ <span class="variable">$1</span> + <span class="variable">$2</span> ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数会在下次启动新bash shell时生效。随后你就能在系统上任意地方使用这个函数了。</p></li><li><p>读取函数文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat .bashrc </span><br><span class="line"><span class="comment"># .bashrc </span></span><br><span class="line"><span class="comment"># Source global definitions </span></span><br><span class="line"><span class="keyword">if</span> [ -r /etc/bashrc ]; <span class="keyword">then</span> </span><br><span class="line"> . /etc/bashrc </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line">. /home/rich/libraries/myfuncs</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、构建基本脚本&quot;&gt;&lt;a href=&quot;#一、构建基本脚本&quot; class=&quot;headerlink&quot; title=&quot;一、构建基本脚本&quot;&gt;&lt;/a&gt;一、构建基本脚本&lt;/h2&gt;&lt;h3 id=&quot;创建shell基本&quot;&gt;&lt;a href=&quot;#创建shell基本&quot; class=&quot;headerlink&quot; title=&quot;创建shell基本&quot;&gt;&lt;/a&gt;创建shell基本&lt;/h3&gt;&lt;p&gt;文件的第一行指定要使用的shell&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;写好一个文件之后需要执行，但是必须要让shell找到脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将shell脚本文件所处的目录添加到PATH环境变量中；&lt;/li&gt;
&lt;li&gt;在提示符中用绝对或相对文件路径来引用shell脚本文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;显示消息&quot;&gt;&lt;a href=&quot;#显示消息&quot; class=&quot;headerlink&quot; title=&quot;显示消息&quot;&gt;&lt;/a&gt;显示消息&lt;/h3&gt;&lt;p&gt;果在&lt;code&gt;echo&lt;/code&gt;命令后面加上了一个字符串，该命令就能显示出这个文本字符串。&lt;/p&gt;
&lt;p&gt;默认情况下，不需要使用引号将要显示的文本字符串划定出来。echo命令可用单引号或双引号来划定文本字符串。需要在文本中使用其中一种引号，而用另外一种来将字符串划定起来。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;This is a test to see if you&amp;#x27;re paying attention&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
    <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令行</title>
    <link href="http://yoursite.com/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/</id>
    <published>2021-09-18T13:49:30.000Z</published>
    <updated>2021-09-20T12:58:50.877Z</updated>
    
    <content type="html"><![CDATA[<p>基于Linux命令行与shell脚本编程大全（第3版）</p><h2 id="一、初识Linux-shell"><a href="#一、初识Linux-shell" class="headerlink" title="一、初识Linux shell"></a>一、初识Linux shell</h2><p>Linux系统分为4个部分：</p><ul><li><p>Linux内核</p></li><li><p>GNU工具</p></li><li><p>图形化桌面环境</p></li><li><p>应用软件</p></li></ul><img src="/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/Linux系统.png" alt="Linux系统" style="zoom:80%;"><h3 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h3><p>内核控制计算机系统上所有硬件和软件。主要有四个功能</p><ul><li><p><strong>系统内存管理</strong>：管理服务器可用的物理内存，并且可以创建和管理虚拟内存。内核通过硬盘上的存储空间实现虚拟内存，这块区域称为<strong>交换空间</strong>。内核不断地在交换空间和实际物理内存之间反复交换虚拟内存的内容，使它拥有比物理内存更多的可用内存。</p><p>内存分成很多块，称为页面。内核将每个内存页面放在物理内存或交换空间。然后，内核会维护一个内存页面表，指明哪些页面位于物理内存中，哪些页面被交换到了磁盘上。内核会记录哪些内存页面正在使用中,并自动把一段时间未访问的内存页面复制到交换空间区域（称为<strong>换出</strong>)——即使还有可用内存。当程序要访问一个已被换出的内存页面时,内核必须从物理内存换出另外一个内存页面给它让出空间，然后从交换空间换入请求的内存页面。</p></li><li><p><strong>软件程序管理</strong>：Linux将运行的程序称为进程。内核创建了第一个进程(称为<code>init进程</code>）来启动系统上所有其他进程。当内核启动时，它会将init进程加载到虚拟内存中。内核在启动任何其他进程时，都会在虚拟内存中给新进程分配一块专有区域来存储该进程用到的数据和代码。</p></li><li><p><strong>硬件设备管理</strong>：内核模块。它允许将驱动代码插入到运行中的内核而无需重新编译内核。同时，当设备不再使用时也可将内核模块从内核中移走。<br>Linux系统将硬件设备当成特殊的文件，称为设备文件。设备文件有3种分类:字符型设备文件、<br>块设备文件、网络设备文件</p></li><li><p><strong>文件系统管理</strong>：Linux内核支持通过不同类型的文件系统从硬盘中读写数据。除了自有的诸多文件系统外，Linux还支持从其他操作系统（比如Microsoft Windows)采用的文件系统中读写数据。内核必须在编译时就加入对所有可能用到的文件系统的支持。</p></li></ul><h3 id="GNU工具"><a href="#GNU工具" class="headerlink" title="GNU工具"></a>GNU工具</h3><p>操作系统需要工具来执行一些标准功能，如控制软件和程序。</p><h4 id="1-核心GNU工具"><a href="#1-核心GNU工具" class="headerlink" title="1.核心GNU工具"></a>1.核心GNU工具</h4><ul><li>处理文件的工具</li><li>操作文本的工具</li><li>管理进程的工具</li></ul><h4 id="2-shell"><a href="#2-shell" class="headerlink" title="2.shell"></a>2.shell</h4><p>GNU/Linux shell是一种特殊的交互式工具。shell的核心是<strong>命令行提示符</strong>。命令行提示符是shell负责交互的部分。它允许你输人文本命令，然后解释命令，并在内核中执行。<br>shell包含了一组内部命令，用这些命令可以完成诸如复制文件、移动文件、重命名文件、显示和终止系统中正运行的程序等操作。shell也允许你在命令行提示符中输人程序的名称，它会将程序名传递给内核以启动它。<br>你也可以将多个shell命令放入文件中作为程序执行。这些文件被称作shell脚本。你在命令行上执行的任何命令都可放进一个shell脚本中作为一组命令执行。这为创建那种需要把几个命令放在一起来工作的工具提供了便利。</p><h2 id="二、bash-shell命令"><a href="#二、bash-shell命令" class="headerlink" title="二、bash shell命令"></a>二、bash shell命令</h2><p>man命令访问Linux的手册页面</p><h3 id="Linux的文件系统"><a href="#Linux的文件系统" class="headerlink" title="Linux的文件系统"></a>Linux的文件系统</h3><p>Linux将文件存储在单个目录结构中，这个目录被称为<strong>虚拟目录</strong>( virtual directory )。虚拟目录将安装在PC上的所有存储设备的文件路径纳入单个目录结构中。<br>Linux虚拟目录结构只包含一个称为根(root)目录的基础目录。根目录下的目录和文件会按照访问它们的目录路径一一列出，这点跟Windows类似。</p><blockquote><p>Linux使用正斜线（/）而不是反斜线（\）在文件路径中划分目录。在Linux中，反斜线用来标识转义字符，要是用在文件路径中的话会导致各种各样的问题。</p></blockquote><p>Linux虚拟目录中比较复杂的部分是它如何协调管理各个存储设备。在Linux PC上安装的<strong>第一块硬盘称为根驱动器</strong>。根驱动器包含了虚拟目录的核心，其他目录都是从那里开始构建的。<br>Linux会在根驱动器上创建一些特别的目录，我们称之为<strong>挂载点</strong>(mount point)。挂载点是虚拟目录中<strong>用于分配额外存储设备的目录</strong>。虚拟目录会让文件和目录出现在这些挂载点目录中，然而实际上它们却存储在另外一个驱动器中。</p><p>通常系统文件会存储在根驱动器中，而用户文件则存储在另一驱动器中</p><img src="/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/Linux文件结构.png" alt="Linux文件结构" style="zoom: 80%;"><table><thead><tr><th align="left">目录</th><th>用途</th></tr></thead><tbody><tr><td align="left">/</td><td>虚拟目录的根目录。通常不会在这里存储文件</td></tr><tr><td align="left">/bin</td><td>二进制目录，存放许多用户级的GNU工具</td></tr><tr><td align="left">/boot</td><td>启动目录，存放启动文件</td></tr><tr><td align="left">/dev</td><td>设备目录，Linux在这里创建设备节点</td></tr><tr><td align="left">/etc</td><td>系统配置文件目录</td></tr><tr><td align="left">/home</td><td>主目录，Linux在这里创建用户目录</td></tr><tr><td align="left">/lib</td><td>库目录，存放系统和应用程序的库文件</td></tr><tr><td align="left">/media</td><td>媒体目录，可移动媒体设备的常用挂载点</td></tr><tr><td align="left">/mnt</td><td>挂载目录，另一个可移动媒体设备的常用挂载点</td></tr><tr><td align="left">/opt</td><td>可选目录，常用于存放第三方软件包和数据文件</td></tr><tr><td align="left">/proc</td><td>进程目录，存放现有硬件及当前进程的相关信息</td></tr><tr><td align="left">/root</td><td>root用户的主目录</td></tr><tr><td align="left">/sbin</td><td>系统二进制目录，存放许多GNU管理员级工具</td></tr><tr><td align="left">/run</td><td>运行目录，存放系统运作时的运行时数据</td></tr><tr><td align="left">/srv</td><td>服务目录，存放本地服务的相关文件</td></tr><tr><td align="left">/sys</td><td>系统目录，存放系统硬件信息的相关文件</td></tr><tr><td align="left">/tmp</td><td>临时目录，可以在该目录中创建和删除临时工作文件</td></tr><tr><td align="left">/usr</td><td>用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里</td></tr><tr><td align="left">/var</td><td>可变目录，用以存放经常变化的文件，比如日志文件</td></tr></tbody></table><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><ol><li><code>cat</code> 显示文件所有数据 <ul><li>-n 给所有行家行号</li><li>-b 只给文本加行号</li></ul></li><li><code>more</code> 显示文本文件的内容，但会在每页数据之后停下来。</li><li><code>less</code>命令实现文本的前后翻动，和高级搜索。</li><li><code>tail</code> 查看文件的尾部，默认显示10行<ul><li><code>tail -n 2 file</code>   修改所显示的行号</li><li><code>tail -100f file</code>  可以在其他进程使用该文件时查看文件的内容，实时检测日志。</li></ul></li><li><code>head</code> 显示文件开头行的内容 默认10行</li></ol><h4 id="监测程序"><a href="#监测程序" class="headerlink" title="监测程序"></a>监测程序</h4><ol><li><p><code>ps</code>命令 查看进程的信息。默认情况下，ps命令只会显示运行在当前控制台下的属于当前用户的进程。如果想显示所有的进 -ef</p><ul><li><p>-e 显示所有进程</p></li><li><p>-f 显示完整格式输出，格式如下</p><table><thead><tr><th>标题</th><th>作用</th></tr></thead><tbody><tr><td>UID</td><td>启动这些进程的用户</td></tr><tr><td>PID</td><td>进程的进程ID</td></tr><tr><td>PPID</td><td>父进程的进程号（如果该进程是由另一个进程启动的）</td></tr><tr><td>C</td><td>进程生命周期中的CPU利用率。</td></tr><tr><td>STIME</td><td>进程启动时的系统时间</td></tr><tr><td>TTY</td><td>进程启动时的终端设备</td></tr><tr><td>TIME</td><td>运行进程需要的累计CPU时间</td></tr><tr><td>CMD</td><td>启动的程序名称</td></tr></tbody></table></li></ul></li><li><p><code>top</code> 实时检测进程。</p><p>第一行显示了当前时间、系统的运行时间、登录的用户数以及系统的平均负载。</p><p>第二行显示了进程概要信息——top命令的输出中将进程叫作任务（task）：有多少进程处在运行、休眠、停止或是僵化状态</p><p>第三行显示了CPU的概要信息。top根据进程的属主（用户还是系统）和进程的状态（运行、空闲还是等待）将CPU利用率分成几类输出。</p><p>紧跟其后的两行说明了系统内存的状态。第一行说的是系统的物理内存：总共有多少内存，当前用了多少，还有多少空闲。后一行说的是同样的信息，不过是针对系统交换空间（如果分配了的话）的状态而言的。</p><p>最后一部分显示了当前运行中的进程的详细列表</p></li><li><p><code>kill</code> 命令通过进程ID给进程发信号。默认会发生一个TREN信号（尽可能终止）。如果需要无条件终止，则需要添加 <code>-9</code>参数</p></li></ol><h4 id="检测磁盘空间"><a href="#检测磁盘空间" class="headerlink" title="检测磁盘空间"></a>检测磁盘空间</h4><ol><li><p><code>mount</code> 挂载存储媒体，输出当前系统上挂载的设备列表。</p><p>展示4个部分的信息</p><ul><li>媒体的设备文件名</li><li>媒体挂载到虚拟目录的挂载点</li><li>文件系统类型</li><li>已挂载媒体的访问状态</li></ul><p><code>mount -t type device directory</code>手动挂载设备</p><p>如果是和window公用的存储一般有以下几种</p><ul><li>vfat： windows长文件系统，大多数U盘和软件的格式</li><li>ntfs： window广泛使用的高级文件系统</li><li>iso9660: 标准CD-ROM文件系统</li></ul></li><li><p><code>umount</code>卸载设备</p><p><code>umount [ directory |device]</code> 如果正在使用中，就不会被卸载</p><blockquote><p>如果在卸载设备时，显示设备繁忙，可以通过</p><p><code>lsof dir</code> 获取使用它的进程信息，然后在应用中停止使用该设备或停止该进程。</p></blockquote></li><li><p><code>df</code> 查看设备还有多少磁盘空间</p><p>-h 会展现为用户易读的形式 会用M或G代表磁盘</p></li><li><p><code>du</code> 显示某个特定目录的磁盘使用情况，默认显示当前目录下所有文件</p><ul><li>-c显示所有已列出文件的大小</li><li>-h按用户易读的格式输出大小</li><li>-s显示每个输出参数的总计</li></ul></li></ol><h4 id="处理数据文件"><a href="#处理数据文件" class="headerlink" title="处理数据文件"></a>处理数据文件</h4><ol><li><p><code>sort</code>   排序 ，默认按照语言的排序规则对文本文件中数据进行排序</p><ul><li>-n 可以按照值的大小进排序</li><li>-r 反序排序</li><li>-M 识别月份</li><li>-t 指定分隔符</li><li>-k知道你个排序字段</li></ul></li><li><p><code>grep</code>  搜索指令</p><p><code>grep [options] pattern [file]</code> 会在输入或指定文件中查找匹配指定模式的字符的行</p><ul><li>-v 反向搜索，输出不匹配的行</li><li>-n 行号</li><li>-c 有多少匹配的</li><li>-e 多个匹配模式</li></ul><p>并且可以使用正则表达式进行匹配。</p><p>除此之外还有<code>egrep</code>支持更多的匹配模式 和<code>fgrep</code>支持将匹配模式指定为用换行符分割的一列固定长度的字符串。这样就可以把这列字符串放到一个文件中。</p></li><li><p>压缩数据</p><table><thead><tr><th>工 具</th><th>文件扩展名</th><th>描 述</th></tr></thead><tbody><tr><td>bzip2</td><td>.bz2</td><td>采用Burrows-Wheeler块排序文本压缩算法和霍夫曼编码</td></tr><tr><td>gzip</td><td>.gz</td><td>GNU压缩工具，用Lempel-Ziv编码</td></tr><tr><td>zip</td><td>.zip</td><td>Windows上PKZIP工具的Unix实现</td></tr></tbody></table><p><code>gzip</code>是Linux上最流行的压缩工具。</p><ul><li><code>gzip</code>：用来压缩文件。</li><li><code>gzcat</code>：用来查看压缩过的文本文件的内容。</li><li><code>gunzip</code>：用来解压文件。</li></ul></li><li><p><code>tar</code> 归档数据，将数据压缩和归档进单个文件</p><p><code>tar function [options] object1 object2</code> </p><p>function</p><table><thead><tr><th>功 能</th><th>描 述</th></tr></thead><tbody><tr><td>-A</td><td>将一个已有tar归档文件追加到另一个已有tar归档文件</td></tr><tr><td>-c</td><td>创建一个新的tar归档文件</td></tr><tr><td>-d</td><td>检查归档文件和文件系统的不同之处</td></tr><tr><td>-r</td><td>追加文件到已有tar归档文件末尾</td></tr><tr><td>-t</td><td>列出已有tar归档文件的内容</td></tr><tr><td>-u</td><td>将比tar归档文件中已有的同名文件新的文件追加到该tar归档文件中</td></tr><tr><td>-x</td><td>从已有tar归档文件中提取文件</td></tr></tbody></table><p>每个功能可以用选项来针对tar归档文件定义一个特定行为</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-C dir</td><td>切换到指定目录</td></tr><tr><td>-f <em>file</em></td><td>输出结果到文件或设备</td></tr><tr><td>-j</td><td>将输出重定向给bzip2命令来压缩内容</td></tr><tr><td>-p</td><td>保留所有文件权限</td></tr><tr><td>-v</td><td>在处理文件时显示文件</td></tr><tr><td>-z</td><td>将输出重定向给gzip命令来压缩内容</td></tr></tbody></table><ul><li><p>压缩文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf filename.tar.gz file</span><br></pre></td></tr></table></figure><p>c表示创建一个tar归档文件，z表示tar包用gzip压缩用gunzip解压，v显示详细信息，f选择文件</p></li><li><p>解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf filename.tar.gz</span><br></pre></td></tr></table></figure><p>z表示tar包用gzip压缩用gunzip解压， x提取文件，v显示详细信息，f选择文件</p></li></ul></li></ol><h2 id="三、理解shell"><a href="#三、理解shell" class="headerlink" title="三、理解shell"></a>三、理解shell</h2><p>shell不单单是一种CLI，是一个时刻都在运行的复杂交互式程序。</p><h3 id="shell类型"><a href="#shell类型" class="headerlink" title="shell类型"></a>shell类型</h3><p>启动什么shell取决于个人用户的ID配置，在/etc/passwd中第7个字段列出了默认是hell程序。</p><p>bash shell位于<code>/bin/bash</code>目录中，是一个可执行程序。</p><p>还有一个默认的sh是<code>/bin/sh</code> 作为默认系统的shell</p><h3 id="shell-的父子关系"><a href="#shell-的父子关系" class="headerlink" title="shell 的父子关系"></a>shell 的父子关系</h3><p>登陆时启动的shell是一个父shell，而在CLI提示符中输入/bin/bash或其他shell命令时，会创建一个新的shell程序，是一个子shell。</p><p><code>ps -f</code>可以帮助我们看到shell程序</p><blockquote><p>进程就是正在运行的程序。bash shell是一个程序，当它运行的时候，就成为了一个进程。一个运行着的shell就是某种进程而已。因此，在说到运行一个bash shell的时候，你经常会看到“shell”和“进程”这两个词交换使用。</p></blockquote><p>在生成子shell进程时，只有部分父进程的环境被复制到子shell环境中。这会对包括变量在内的一些东西造成影响。</p><p><code>exit</code>可以帮助我们退出这些shell</p><h4 id="进程列表"><a href="#进程列表" class="headerlink" title="进程列表"></a>进程列表</h4><p>可以在一行指定要依次运行的一系列命令。这可以通过命令列表来实现。在每个命令之间加入；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>; ls; <span class="built_in">cd</span> /etc;</span><br></pre></td></tr></table></figure><p>加入括号可以使之成为进程列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">pwd</span> ; ls ; <span class="built_in">cd</span> /etc ;)</span><br></pre></td></tr></table></figure><p>括号的加入使命令列表变成了进程列表，<strong>生成了一个子shell</strong>来执行对应的命令。</p><h4 id="其他shell用法"><a href="#其他shell用法" class="headerlink" title="其他shell用法"></a>其他shell用法</h4><p>在交互式的shell CLI中，进程列表、协程和管道都利用了子shell。它们都可以有效地在交互式shell中使用。</p><ol><li><p><strong>后台模式</strong>：在后台模式中运行命令可以在处理命令的同时让出CLI，以供他用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep 10</span><br></pre></td></tr></table></figure><p>让进程睡眠10s，会让会话暂停10s，然后返回shell CLI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep 10&amp;</span><br></pre></td></tr></table></figure><p>在命令末尾加入&amp;就可以将命令置入后台模式。这个命令执行时会返回2条信息，1条是后台作业号，2是后台作业进程ID。</p><p><code>jobs</code>用来显示后台作业信息 Running表示当前正在运行，Done表示运行结束。</p></li><li><p>将进程列表置入后台 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sleep 2 ; <span class="built_in">echo</span> <span class="variable">$BASH_SUBSHELL</span> ; sleep 2)</span><br></pre></td></tr></table></figure><p>将进程列表置入后台模式，你既可以在<strong>子shell中进行繁重的处理工作</strong>，同时也不会让子shell的I/O受制于终端。</p></li><li><p><strong>协程</strong>：协程可以同时做两件事。它在后台生成一个子shell，并在这个子shell中执行命令。</p><p><code>coproc</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coproc my_job &#123; sleep 10; &#125;</span><br></pre></td></tr></table></figure><p>除了会创建子shell之外，协程基本上就是将命令置入后台模式。通过使用扩展语法,协程的名字被设置成My_Job。必须确保在第一个花括号（{）和命令名之间有一个空格。还必须保证命令以分号（;）结尾。</p></li></ol><h3 id="shell内建命令"><a href="#shell内建命令" class="headerlink" title="shell内建命令"></a>shell内建命令</h3><h4 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h4><p>外部命令（文件系统命令）存在于bash shell之外的程序。它们并不是shell程序的一部分。外部命令程序通常位于/bin、/usr/bin、/sbin或/usr/sbin中。</p><p>ps就是一个外部命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> ps</span><br><span class="line">/bin/ps </span><br><span class="line"></span><br><span class="line">$ <span class="built_in">type</span> -a ps </span><br><span class="line">ps is /bin/ps</span><br></pre></td></tr></table></figure><p>当外部命令执行时，会创建出一个子进程。这种操作被称为<strong>衍生</strong>（forking）。外部命令ps很方便显示出它的父进程以及自己所对应的衍生子进程。作为外部命令，ps命令执行时会创建出一个子进程。</p><img src="/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/外部命令的衍生.png" alt="外部命令的衍生" style="zoom:80%;"><h4 id="内建命令"><a href="#内建命令" class="headerlink" title="内建命令"></a>内建命令</h4><p>内建命令和外部命令的区别在于前者<strong>不需要使用子进程来执行</strong>。它们已经和shell编译成了一体，作为shell工具的组成部分存在。不需要借助外部程序文件来运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">type</span> <span class="built_in">cd</span> </span><br><span class="line"><span class="built_in">cd</span> is a shell <span class="built_in">builtin</span> </span><br><span class="line">$ </span><br><span class="line">$ <span class="built_in">type</span> <span class="built_in">exit</span> </span><br><span class="line"><span class="built_in">exit</span> is a shell <span class="built_in">builtin</span> </span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>内建命令的执行速度要更快，效率也更高。</p><p>有些命令有多种实现。例如echo和pwd既有内建命令也有外部命令。两种实现略有不同。要查看命令的不同实现，使用<code>type -a</code>选项,显示出了每个命令的两种实现，which`命令只显示出了外部命令文件。</p><ol><li><p><code>history</code>命令跟踪你用过的命令，通常会保留最近的1000条命令</p><p>你可以唤回并重用历史列表中最近的命令。这样能够节省时间和击键量。输入<code>!!</code>，就能够唤出刚刚用过的那条命令来使用。</p><p>bash命令的历史记录是先存放在内存中，当shell退出时才被写入到历史文件中。</p><p><code>history -a</code> 实现强制写入。</p><blockquote><p>如果打开了多个终端会话，仍然可以使用history -a命令在打开的会话中向.bash_history文件中添加记录。但是对于其他打开的终端会话，历史记录并不会自动更新。这是因为.bash_history文件只有在打开首个终端会话时才会被读取。要想强制重新读取.bash_history文件，更新终端会话的历史记录，可以使用history -n命令。</p></blockquote><p><code>!编号</code>就可以执行命令</p></li><li><p><code>alias</code>  命令别名</p><p> <code>alias -p</code> 查看当前可用的别名。</p><p><code>alias li=&#39;ls -li&#39;</code> 随时都可以在shell中使用它，就算在shell脚本中也没问题<strong>,仅在它所被定义的shell进程中才有效</strong>。</p></li></ol><h2 id="四、Linux环境变量"><a href="#四、Linux环境变量" class="headerlink" title="四、Linux环境变量"></a>四、Linux环境变量</h2><p>bash shell用一个叫作环境变量（environment variable）的特性来存储有关shell会话和工作环境的信息。这项特性允许你在内存中存储数据，以便程序或shell中运行的脚本能够轻松访问到它们。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="全局环境变量"><a href="#全局环境变量" class="headerlink" title="全局环境变量"></a>全局环境变量</h4><p>全局环境变量对于<strong>shell会话和所有生成的子shell都是可见</strong>。局部变量则只对创建它们的shell可见。</p><p>查看全局变量<code>env</code>或<code>printenv</code>,<code>printenv</code>还可以输出名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> printenv HOME</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><h4 id="局部环境变量"><a href="#局部环境变量" class="headerlink" title="局部环境变量"></a>局部环境变量</h4><p>尽管它们是局部的，但是和全局环境变量一样重要。也可以定义自己的局部变量，这些变量被称为用户定义局部变量。</p><p><code>set</code>命令会显示为某个特定进程设置的所有环境变量，包括局部变量、全局变量以及用户定义变量。</p><blockquote><p>set命令会显示出<strong>全局变量、局部变量以及用户定义变量</strong>。它还会按照字母顺序对结果进行排序。env和printenv命令同set命令的区别在于前两个命令不会对变量排序，也<strong>不会输出局部变量和用户定义变量</strong>。在这种情况下，env和printenv的输出是重复的。不过env命令有一个printenv没有的功能，这使得它要更有用一些。</p></blockquote><h3 id="设置用户定义变量"><a href="#设置用户定义变量" class="headerlink" title="设置用户定义变量"></a>设置用户定义变量</h3><h4 id="设置局部用户定义变量"><a href="#设置局部用户定义变量" class="headerlink" title="设置局部用户定义变量"></a>设置局部用户定义变量</h4><p>可以通过等号给环境变量赋值，值可以是数值或字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$my_variable</span> </span><br><span class="line"></span><br><span class="line">my_variable=Hello </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_variable</span> </span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><blockquote><p>所有的环境变量名均使用大写字母，这是bash shell的标准惯例。如果是你自己创建的局部变量或是shell脚本，请使用小写字母。</p></blockquote><p><strong>变量名、等号和值之间没有空格</strong>，如果在赋值表达式中加上了空格，bash shell就会把值当成一个单独的命令</p><h4 id="设置全局环境变量"><a href="#设置全局环境变量" class="headerlink" title="设置全局环境变量"></a>设置全局环境变量</h4><p>通过export命令来创建，变量名前面不需要加$。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_variable=<span class="string">&quot;I am Global now&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> my_variable </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_variable</span> </span><br><span class="line">I am Global now </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>修改子shell中全局环境变量并不会影响到父shell中该变量的值。</p><p>子shell甚至无法使用export命令改变父shell中全局环境变量的值。</p></blockquote><h3 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h3><p>用<code>unset</code>命令删除，不要使用$。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$my_variable</span> </span><br><span class="line">I am Global now </span><br><span class="line"> </span><br><span class="line"><span class="built_in">unset</span> my_variable </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>如果要用到变量，使用$；如果要操作变量，不使用$</strong>。这条规则的一个例外就是使用printenv显示某个变量的值。</p></blockquote><h3 id="设置-PATH-环境变量"><a href="#设置-PATH-环境变量" class="headerlink" title="设置 PATH 环境变量"></a>设置 <strong>PATH</strong> 环境变量</h3><p>当你在shell命令行界面中输入一个外部命令时，shell必须搜索系统来找到对应的程序。PATH环境变量定义了用于进行命令和程序查找的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>PATH中的目录使用冒号分隔。</p><p>把新的搜索目录添加到现有的PATH环境变量中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:dir</span><br></pre></td></tr></table></figure><p>对PATH变量的修改只能持续到退出或重启系统。</p><h3 id="定位系统环境变量"><a href="#定位系统环境变量" class="headerlink" title="定位系统环境变量"></a>定位系统环境变量</h3><p>如何让环境变量的作用持久化。</p><p>登入Linux系统启动一个bash shell时，默认情况下bash会在几个文件中查找命令。这些文件叫作启动文件或环境文件。bash检查的启动文件取决于你启动bash shell的方式。</p><p>启动bash shell有3种方式：</p><ul><li>登录时作为默认登录shell </li><li>作为非登录shell的交互式shell </li><li>作为运行脚本的非交互shell </li></ul><h4 id="登录-shell"><a href="#登录-shell" class="headerlink" title="登录 shell"></a>登录 shell</h4><p>会从5个不同的启动文件读取命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile </span><br><span class="line">$HOME/.bash_profile </span><br><span class="line">$HOME/.bashrc </span><br><span class="line">$HOME/.bash_login </span><br><span class="line">$HOME/.profile</span><br></pre></td></tr></table></figure><ol><li><p><code>/etc/profile</code>文件是系统上默认的bash shell的主启动文件。</p><p>centos的<code>/etc/profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/profile</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> System wide environment and startup programs, <span class="keyword">for</span> login setup</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Functions and aliases go <span class="keyword">in</span> /etc/bashrc</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> It<span class="string">&#x27;s NOT a good idea to change this file unless you know what you</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> are doing. It&#x27;</span>s much better to create a custom.sh shell script <span class="keyword">in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/profile.d/ to make custom changes to your environment, as this</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> will prevent the need <span class="keyword">for</span> merging <span class="keyword">in</span> future updates.</span></span><br><span class="line"></span><br><span class="line">pathmunge () &#123;</span><br><span class="line">    case &quot;:$&#123;PATH&#125;:&quot; in</span><br><span class="line">        *:&quot;$1&quot;:*)</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            if [ &quot;$2&quot; = &quot;after&quot; ] ; then</span><br><span class="line">                PATH=$PATH:$1</span><br><span class="line">            else</span><br><span class="line">                PATH=$1:$PATH</span><br><span class="line">            fi</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ -x /usr/bin/id ]; then</span><br><span class="line">    if [ -z &quot;$EUID&quot; ]; then</span><br><span class="line">        # ksh workaround</span><br><span class="line">        EUID=`/usr/bin/id -u`</span><br><span class="line">        UID=`/usr/bin/id -ru`</span><br><span class="line">    fi</span><br><span class="line">    USER=&quot;`/usr/bin/id -un`&quot;</span><br><span class="line">    LOGNAME=$USER</span><br><span class="line">    MAIL=&quot;/var/spool/mail/$USER&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Path manipulation</span></span><br><span class="line">if [ &quot;$EUID&quot; = &quot;0&quot; ]; then</span><br><span class="line">    pathmunge /usr/sbin</span><br><span class="line">    pathmunge /usr/local/sbin</span><br><span class="line">else</span><br><span class="line">    pathmunge /usr/local/sbin after</span><br><span class="line">    pathmunge /usr/sbin after</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">HOSTNAME=`/usr/bin/hostname 2&gt;/dev/null`</span><br><span class="line">if [ &quot;$HISTCONTROL&quot; = &quot;ignorespace&quot; ] ; then</span><br><span class="line">    export HISTCONTROL=ignoreboth</span><br><span class="line">else</span><br><span class="line">    export HISTCONTROL=ignoredups</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default, we want <span class="built_in">umask</span> to get <span class="built_in">set</span>. This sets it <span class="keyword">for</span> login shell</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Current threshold <span class="keyword">for</span> system reserved uid/gids is 200</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You could check uidgid reservation validity <span class="keyword">in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/share/doc/setup-*/uidgid file</span></span><br><span class="line">if [ $UID -gt 199 ] &amp;&amp; [ &quot;`/usr/bin/id -gn`&quot; = &quot;`/usr/bin/id -un`&quot; ]; then</span><br><span class="line">    umask 002</span><br><span class="line">else</span><br><span class="line">    umask 022</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for i in /etc/profile.d/*.sh /etc/profile.d/sh.local ; do</span><br><span class="line">    if [ -r &quot;$i&quot; ]; then</span><br><span class="line">        if [ &quot;$&#123;-#*i&#125;&quot; != &quot;$-&quot; ]; then </span><br><span class="line">            . &quot;$i&quot;</span><br><span class="line">        else</span><br><span class="line">            . &quot;$i&quot; &gt;/dev/null</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">unset i</span><br><span class="line">unset -f pathmunge</span><br></pre></td></tr></table></figure><p>for语句用来迭代<code>/etc/profile.d</code>目录下所有文件。</p></li><li><p>$HOME目录下的启动文件</p><p>提供一个用户专属的启动文件来定义该用户所用到的环境变量。以每个用户都可以编辑这些文件并添加自己的环境变量，这些环境变量会在每次启动bash shell会话时生效。</p></li></ol><h4 id="交互式-shell-进程"><a href="#交互式-shell-进程" class="headerlink" title="交互式 shell 进程"></a>交互式 shell 进程</h4><p>交互式shell启动的，它就不会访问/etc/profile文件，只会检查用户HOME目录中的<code>.bashrc</code>文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat .bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> .bashrc</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">. /etc/bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.bashrc文件有两个作用：一是查看/etc目录下通用的bashrc文件，二是为用户提供一个定制自</p><p>己的命令别名和私有脚本函数的地方。</p><h4 id="非交互式-shell"><a href="#非交互式-shell" class="headerlink" title="非交互式 shell"></a>非交互式 shell</h4><p>系统执行shell脚本时用的就是这种shell。</p><p>bash shell提供了<code>BASH_ENV</code>环境变量。当shell启动一个非交互式shell进程时，它会检查这个环境变量来查看要执行的启动文件。如果有指定的文件，shell会执行该文件里的命令，这通常包括shell脚本变量设置。</p><h4 id="环境变量持久化"><a href="#环境变量持久化" class="headerlink" title="环境变量持久化"></a>环境变量持久化</h4><p>将新的或修改过的变量设置放在/etc/profile文件中，<strong>如果升级了所用的发行版，这个文件也会跟着更新</strong>，最好是在/etc/profile.d目录中创建一个以.sh结尾的文件。把所有新的或修改过的全局环境变量设置放在这个文件中。</p><h3 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h3><p>数组是能够存储多个值的变量。这些值可以单独引用，也可以作为整个数组来引用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$  mytest=(one two three four five)</span><br><span class="line">$  <span class="built_in">echo</span> <span class="variable">$mytest</span></span><br><span class="line"> one</span><br><span class="line">$  <span class="built_in">echo</span> <span class="variable">$&#123;mytest[2]&#125;</span></span><br><span class="line"> three</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要显示整个数组变量，可用星号作为通配符放在索引值的位置。</span></span><br><span class="line">$  <span class="built_in">echo</span> <span class="variable">$&#123;mytest[*]&#125;</span></span><br><span class="line">one two three four five</span><br><span class="line"></span><br><span class="line"><span class="comment">#用unset命令删除数组中的某个值</span></span><br><span class="line">$  <span class="built_in">unset</span> mytest[2]</span><br><span class="line"><span class="comment">#这个位置是空的。</span></span><br><span class="line">$  <span class="built_in">echo</span> <span class="variable">$&#123;mytest[2]&#125;</span></span><br><span class="line"></span><br><span class="line">$  <span class="built_in">echo</span> <span class="variable">$&#123;mytest[3]&#125;</span></span><br><span class="line">four</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、Linux文件权限"><a href="#五、Linux文件权限" class="headerlink" title="五、Linux文件权限"></a>五、Linux文件权限</h2><h3 id="Linux-的安全性"><a href="#Linux-的安全性" class="headerlink" title="Linux 的安全性"></a>Linux 的安全性</h3><p>用户权限是通过创建用户时分配的用户ID（User ID，通常缩写为UID）来跟踪的。UID是数值，每个用户都有唯一的UID，但在登录系统时用的不是UID，而是登录名。</p><h4 id="etc-passwd-文件"><a href="#etc-passwd-文件" class="headerlink" title="/etc/passwd 文件"></a>/etc/passwd 文件</h4><p>Linux系统使用一个专门的文件来将用户的登录名匹配到对应的UID值。这个文件就是<code>/etc/passwd</code>文件，它包含了一些与用户有关的信息。</p><p>root用户账户是Linux系统的管理员，固定分配给它的UID是0。Linux系统会<strong>为各种各样的功能创建不同的用户账户</strong>，而这些账户叫作系统账户，是系统上运行<strong>的各种服务进程访问资源用的特殊账户</strong>。所有运行在后台的服务都需要用一个系统用户账户登录到Linux系统上。</p><p>/etc/passwd文件的字段包含了如下信息</p><ul><li>登录用户名</li><li>用户密码</li><li>用户账户的UID（数字形式）</li><li>用户账户的组ID（GID）（数字形式）</li><li>用户账户的文本描述（称为备注字段）</li><li>用户HOME目录的位置</li><li>用户的默认shell </li></ul><p>/etc/passwd文件中的密码字段都被设置成了<em>x</em>，现在密码再<code>/etc/shadow</code>中，只有特定的程序（比如登录程序）才能访问这个文件。只有root用户才能访问/etc/shadow文件</p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><ol><li><p><code>useradd</code>添加新用户 -m可以创建home目录</p></li><li><p><code>userdel</code> 删除用户，默认删除/etc/passwd文件中的用户信息，而不会删除系统中属于该账户的任何文件。</p><ul><li>-r 会删除用户的HOME目录以及邮件目录。</li></ul></li><li><p>修改用户</p><table><thead><tr><th>命 令</th><th>描 述</th></tr></thead><tbody><tr><td>usermod</td><td>修改用户账户的字段，还可以指定主要组以及附加组的所属关系</td></tr><tr><td>passwd</td><td>修改已有用户的密码</td></tr><tr><td>chpasswd</td><td>从文件中读取登录名密码对，并更新密码</td></tr><tr><td>chage</td><td>修改密码的过期日期</td></tr><tr><td>chfn</td><td>修改用户账户的备注信息</td></tr><tr><td>chsh</td><td>修改用户账户的默认登录shell</td></tr></tbody></table></li></ol><h3 id="Linux-组"><a href="#Linux-组" class="headerlink" title="Linux 组"></a>Linux 组</h3><p>权限允许多个用户对系统中的对象（比如文件、目录或设备等）共享一组共用的权限。</p><h4 id="etc-group-文件"><a href="#etc-group-文件" class="headerlink" title="/etc/group 文件"></a>/etc/group 文件</h4><p>文件的信息</p><ul><li><p>组名</p></li><li><p>组密码</p></li><li><p>GID </p></li><li><p>属于该组的用户列表</p></li></ul><p>不能通过直接修改/etc/group文件来添加用户到一个组，要用usermod命令。</p><p>在添加用户到不同的组之前，首先得创建组。</p><h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><ol><li><code>groupadd</code>创建新组，通过<code>usermod -G</code> 把用户添加到该组中</li><li><code>groupmod</code>修改组</li></ol><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h4 id="文件权限符"><a href="#文件权限符" class="headerlink" title="文件权限符"></a>文件权限符</h4><p>ls输出的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x. 85 root root  4096 Sep 19 21:33 etc</span><br><span class="line">drwxr-xr-x.  2 root root  4096 Apr 11  2018 home</span><br></pre></td></tr></table></figure><p>第一个字段描述文件和目录权限的编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-代表文件</span><br><span class="line">d代表目录</span><br><span class="line">l代表链接</span><br><span class="line">c代表字符型设备</span><br><span class="line">b代表块设备</span><br><span class="line">n代表网络设备</span><br></pre></td></tr></table></figure><p>有3组三字符的编码。每一组定义了3种访问权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r代表对象是可读的</span><br><span class="line">w代表对象是可写的</span><br><span class="line">x代表对象是可执行的</span><br></pre></td></tr></table></figure><p>3组权限分别对应对象的3个安全级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象的属主</span><br><span class="line">对象的属组</span><br><span class="line">系统其他用户</span><br></pre></td></tr></table></figure><h4 id="默认文件权限"><a href="#默认文件权限" class="headerlink" title="默认文件权限"></a>默认文件权限</h4><p><code>umask</code>命令用来设置所创建文件和目录的默认权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  <span class="built_in">umask</span> </span><br><span class="line">0022</span><br></pre></td></tr></table></figure><p>第一位代表了一项特别的安全特性，叫作粘着位（sticky bit）。后面的3位表示文件或目录对应的umask八进制值。rwx代表着8进制为111，每一位存在就代表着一位是1。</p><blockquote><p>的umask值是0022，而我所创建的文件的八进制权限却是644?umask值只是个掩码。它会屏蔽掉不想授予该安全级别的权限。对文件来说，全权限的值是666（rw-），而对目录来说，则是777（rwx）,文件一开始的权限是666，减去umask值022之后，剩下的文件权限就成了644。</p><p>umask值通常会设置在/etc/profile启动文件中</p></blockquote><h3 id="改变安全性"><a href="#改变安全性" class="headerlink" title="改变安全性"></a>改变安全性</h3><ol><li><p>改变权限 <code>chmod</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#八进制模式</span></span><br><span class="line">chmod options mode file</span><br><span class="line">chmod 760 file</span><br><span class="line"></span><br><span class="line"><span class="comment">#符号模式 u代表用户,g代表组,o代表其他,a代表上述所有</span></span><br><span class="line"><span class="comment">#X：如果对象是目录或者它已有执行权限，赋予执行权限。</span></span><br><span class="line"><span class="comment">#s：运行时重新设置UID或GID。 </span></span><br><span class="line"><span class="comment">#t：保留文件或目录。</span></span><br><span class="line"><span class="comment">#u：将权限设置为跟属主一样。</span></span><br><span class="line"><span class="comment">#g：将权限设置为跟属组一样。</span></span><br><span class="line"><span class="comment">#o：将权限设置为跟其他用户一样。</span></span><br><span class="line">[ugoa…][[+-=][rwxXstugo…] </span><br><span class="line">chmod o+r file</span><br></pre></td></tr></table></figure></li><li><p>改变所属关系 <code>chown</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chown options owner[.group] file</span><br><span class="line"><span class="comment">#可用登录名或UID来指定文件的新属主</span></span><br><span class="line">chown dan newfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#支持同时改变文件的属主和属组。</span></span><br><span class="line">chown dan.shared newfile</span><br></pre></td></tr></table></figure><ul><li><p>-R选项配合通配符可以<strong>递归地改变</strong>子目录和文件的所属关系。</p></li><li><p>-h选项可以改变该文件的<strong>所有符号链接文件</strong>的所属关系。</p></li></ul></li></ol><h3 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h3><p>Linux为每个文件和目录存储了3个额外的信息位。</p><ul><li><strong>设置用户ID（SUID）</strong>：当文件被用户使用时，程序会以文件属主的权限运行。</li><li><strong>设置组ID（SGID）</strong>：对文件来说，程序会以文件属组的权限运行；对目录来说，目录中创建的新文件会以目录的默认属组作为默认属组。</li><li><strong>粘着位</strong>：进程结束后文件还驻留（粘着）在内存中。</li></ul><p>SGID位对文件共享非常重要。启用SGID位后，你可以强制在一个共享目录下创建的新文件都属于该目录的属组，这个组也就成为了每个用户的属组。</p><p>要创建一个共享目录，使目录里的新文件都能沿用目录的属组，只需将该目录的SGID位置位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$  mkdir testdir </span><br><span class="line">$  ls -l </span><br><span class="line">drwxrwxr-x 2 rich rich 4096 Sep 20 23:12 testdir/ </span><br><span class="line"><span class="comment">#将目录的默认属组改为包含所有需要共享文件的用户的组</span></span><br><span class="line">$  chgrp shared testdir </span><br><span class="line"><span class="comment">#将目录的SGID位 置位，以保证目录中新建文件都用shared作为默认属组。</span></span><br><span class="line">$  chmod g+s testdir </span><br><span class="line">$  ls -l </span><br><span class="line">drwxrwsr-x 2 rich shared 4096 Sep 20 23:12 testdir/ </span><br><span class="line"><span class="comment">#所有组成员都需把他们的umask值设置成文件对属组成员可写。</span></span><br><span class="line">$  <span class="built_in">umask</span> 002 </span><br><span class="line">$  <span class="built_in">cd</span> testdir </span><br><span class="line">$  touch testfile </span><br><span class="line">$  ls -l </span><br><span class="line">total 0 </span><br><span class="line">-rw-rw-r-- 1 rich shared 0 Sep 20 23:13 testfile</span><br></pre></td></tr></table></figure><h2 id="六、管理文件系统"><a href="#六、管理文件系统" class="headerlink" title="六、管理文件系统"></a>六、管理文件系统</h2><h3 id="Linux的文件系统-1"><a href="#Linux的文件系统-1" class="headerlink" title="Linux的文件系统"></a>Linux的文件系统</h3><p>Linux支持多种类型的文件系统管理文件和目录。每种文件系统都在存储设备上实现了虚拟目录结构。</p><h4 id="1-基本Linux文件系统"><a href="#1-基本Linux文件系统" class="headerlink" title="1.基本Linux文件系统"></a>1.基本Linux文件系统</h4><ol><li><p><strong>ext文件系统</strong> ，扩展文件系统（extended filesystem),使用虚拟目录来操作硬件设备，在物理设备上按定长的块来存储数据。</p><p>ext文件系统采用名为<strong>索引节点</strong>的系统来存放虚拟目录中所存储文件的信息。索引节点系统在每个物理设备中创建一个单独的表（称为索引节点表）来存储这些文件的信息。存储在虚拟目录中的每一个文件在索引节点表中都有一个条目。ext文件系统名称中的extended部分来自其跟踪的每个文件的额外数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件名</span><br><span class="line">文件大小</span><br><span class="line">文件的属主</span><br><span class="line">文件的属组</span><br><span class="line">文件的访问权限</span><br><span class="line">指向存有文件数据的每个硬盘块的指针</span><br></pre></td></tr></table></figure></li><li><p><strong>ext2文件系统</strong>：是ext文件系统基本功能的一个扩展。</p><ul><li>为文件添加了创建时间值、修改时间值和最后访问时间值来帮助系统管理员追踪文件的访问情况。</li><li>改变了文件在数据块中存储的方式。统通过<strong>按组分配磁盘块</strong>来减轻碎片化。通过将数据块分组，文件系统在读取文件时不需要为了数据块查找整个物理设备。</li></ul><p>索引节点表虽然支持文件系统保存有关文件的更多信息，但会对系统造成致命的问题。文件系统每次存储或更新文件，它都要用新信息来更新索引节点表。</p></li></ol><h4 id="2-日志文件系统"><a href="#2-日志文件系统" class="headerlink" title="2.日志文件系统"></a>2.日志文件系统</h4><p>不再使用之前先将数据直接写入存储设备再更新索引节点表的做法，而是<strong>先将文件的更改写入到临时文件</strong>（称作日志，journal）中。在数据成功写到存储设备和索引节点表之后，再删除对应的日志条目。有3种广泛使用的日志方法:</p><table><thead><tr><th>方 法</th><th>描 述</th></tr></thead><tbody><tr><td>数据模式</td><td>索引节点和文件都会被写入日志；丢失数据风险低，但性能差</td></tr><tr><td>有序模式</td><td>只有索引节点数据会被写入日志，但只有数据成功写入后才删除；在性能和安全性之间取得了良好的折中</td></tr><tr><td>回写模式</td><td>只有索引节点数据会被写入日志，但不控制文件数据何时写入；丢失数据风险高，但仍比不用日志好</td></tr></tbody></table><ol><li><p><strong>ext3文件系统</strong>:给每个存储设备增加了一个日志文件，以将准备写入存储设备的数据先记入日志。统用有序模式的日志功能——只将索引节点信息写入日志文件，直到数据块都被成功写入存储设备才删除。</p><p>ext3文件系统为Linux文件系统添加了基本的日志功能，但ext3文件系统无法恢复误删的文件，它没有任何内建的数据压缩功能（虽然有个需单独安装的补丁支持这个功能），ext3文件系统也不支持加密文件。</p></li><li><p><strong>ext4文件系统</strong>：是大多数流行的Linux发行版采用的默认文件系统。支持数据压缩和加密，还支持一个称作<strong>区段（extent）</strong>的特性。区段在存储设备上按块分配空间，但在索引节点表中只保存起始块的位置。由于无需列出所有用来存储文件中数据的数据块，它可以在索引节点表中节省一些空间。</p><p>ext4还引入了<strong>块预分配技术（block preallocation）</strong>。如果你想在存储设备上给一个你知道要变大的文件预留空间，ext4文件系统可以为文件分配所有需要用到的块，而不仅仅是那些现在已经用到的块。ext4文件系统用0填满预留的数据块，不会将它们分配给其他文件。</p></li></ol><h4 id="3-写时复制文件系统"><a href="#3-写时复制文件系统" class="headerlink" title="3.写时复制文件系统"></a>3.写时复制文件系统</h4><p>日志式技术，你就必须在安全性和性能之间做出选择。尽管数据模式日志提供了最高的安全性，但是会对性能带来影响，因为索引节点和数据都需要被日志化。如果是回写模式日志，性能倒是可以接受，但安全性就会受到损害。</p><p>日志式的另一种选择是一种叫作<strong>写时复制（copy-on-write，COW）</strong>的技术。COW利用快照兼顾了安全性和性能。如果要修改数据，会使用克隆或可写快照。<strong>修改过的数据并不会直接覆盖当前数据，而是被放入文件系统中的另一个位置上。</strong>即便是数据修改已经完成，之前的旧数据也不会被重写。</p><h3 id="操作文件系统"><a href="#操作文件系统" class="headerlink" title="操作文件系统"></a>操作文件系统</h3><h4 id="1-创建分区"><a href="#1-创建分区" class="headerlink" title="1.创建分区"></a>1.创建分区</h4><p>必须在存储设备上创建分区来容纳文件系统。分区可以是整个硬盘，也可以是部分硬盘，以容纳虚拟目录的一部分。</p><p><code>fdisk</code>工具用来帮助管理安装在系统上的任何存储设备上的分区。必须指定要分区的存储设备的设备名，另外还得有超级用户权限。</p><blockquote><p>创建新磁盘分区最麻烦的事情就是找出安装在Linux系统中的物理磁盘。Linux采用了一种标准格式来为硬盘分配设备名称。对于老式的IDE驱动器，Linux使用的是<code>/dev/hdx</code>。其中x表示一个字母，具体是什么要根据驱动器的检测顺序（第一个驱动器是a，第二个驱动器是b，以此类推）。对于较新的SATA驱动器和SCSI驱动器，Linux使用<code>/dev/sdx</code>。其中的x具体是什么也要根据驱动器的检测顺序（和之前一样，第一个驱动器是a，第二个驱动器是b，以此类推）。</p></blockquote><p>fdisk交互式命令提示符使用单字母命令来告诉fdisk做什么。</p><ul><li><p><code>p</code> : 输出存储设备的详细信息</p></li><li><p><code>n</code>：在存储设备上创建新的分区</p><p>分区可以按主分区（primary partition）或扩展分区（extended partition）创建。主分区可以被文件系统直接格式化，而<strong>扩展分区则只能容纳其他主分区</strong>。扩展分区出现的原因是每个存储设备上只能有4个分区。可以通过创建多个扩展分区，然后在扩展分区内创建主分区进行扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n </span><br><span class="line">Command action </span><br><span class="line"> e extended </span><br><span class="line"> p primary partition (1-4) </span><br><span class="line">p </span><br><span class="line"><span class="comment">#在存储设备上给它分配了分区号1</span></span><br><span class="line">Partition number (1-4): 1 </span><br><span class="line"><span class="comment">#然后给它分配了2 GB的存储设备空间。</span></span><br><span class="line">First cylinder (1-652, default 1): 1 </span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-652, default 652): +2G</span><br></pre></td></tr></table></figure></li><li><p><code>w</code>： 创建了想要的分区之后，用w命令将更改保存到存储设备上。</p></li></ul><h4 id="2-创建文件系统"><a href="#2-创建文件系统" class="headerlink" title="2.创建文件系统"></a>2.创建文件系统</h4><p>将数据存储到分区之前，你必须用某种文件系统对其进行格式化。</p><table><thead><tr><th>工具</th><th>用 途</th></tr></thead><tbody><tr><td>mkfs.ext4</td><td>创建一个ext4文件系统</td></tr><tr><td>mkreiserfs</td><td>创建一个ReiserFS文件系统</td></tr><tr><td>mkfs.xfs</td><td>创建一个XFS文件系统</td></tr><tr><td>mkfs.zfs</td><td>创建一个ZFS文件系统</td></tr><tr><td>mkfs.btrfs</td><td>创建一个Btrfs文件系统</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看是否存在</span></span><br><span class="line">$  <span class="built_in">type</span> mkfs.ext4</span><br><span class="line"></span><br><span class="line">$  mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure><p>为分区创建了文件系统之后，下一步是将它<strong>挂载到虚拟目录下的某个挂载点</strong>，这样就可以将数据存储在新文件系统中了。可以将新文件系统挂载到虚拟目录中需要额外空间的任何位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ls /mnt </span><br><span class="line">$ </span><br><span class="line"><span class="comment">#在虚拟目录中创建了挂载点</span></span><br><span class="line">$ sudo mkdir /mnt/my_partition </span><br><span class="line">$ </span><br><span class="line">$ ls -al /mnt/my_partition/ </span><br><span class="line">$ </span><br><span class="line">$ ls -dF /mnt/my_partition </span><br><span class="line">/mnt/my_partition/ </span><br><span class="line">$ </span><br><span class="line"><span class="comment">#mount命令将新的硬盘分区添加到挂载点。mount命令的-t选项指明了要挂载的文件系统类型（ext4）。</span></span><br><span class="line">$ sudo mount -t ext4 /dev/sdb1 /mnt/my_partition </span><br><span class="line">$ </span><br><span class="line">$ ls -al /mnt/my_partition/ </span><br><span class="line">total 24 </span><br><span class="line">drwxr-xr-x. 3 root root 4096 Jun 11 09:53 . </span><br><span class="line">drwxr-xr-x. 3 root root 4096 Jun 11 09:58 .. </span><br><span class="line">drwx------. 2 root root 16384 Jun 11 09:53 lost+found</span><br></pre></td></tr></table></figure><blockquote><p>这种方法只能临时挂载文件系统。当重启Linux系统时，文件系统并不会自动挂载。要强制Linux在启动时自动挂载新的文件系统，可以将其添加到/etc/fstab文件。</p></blockquote><h4 id="3-文件系统的检查与修复"><a href="#3-文件系统的检查与修复" class="headerlink" title="3.文件系统的检查与修复"></a>3.文件系统的检查与修复</h4><p>fsck命令能够检查和修复大部分类型的Linux文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsck options filesystem</span><br></pre></td></tr></table></figure><p>fsck命令使用/etc/fstab文件来自动决定正常挂载到系统上的存储设备的文件系统。用-t命令行选项来指定文件系统类型。</p><h3 id="逻辑卷管理"><a href="#逻辑卷管理" class="headerlink" title="逻辑卷管理"></a>逻辑卷管理</h3><p>只能在同一个物理硬盘的可用空间范围内调整分区大小。如果硬盘上没有地方了，就必须弄一个更大的硬盘。这时候可以通过<strong>将另外一个硬盘上的分区加入已有文件系统</strong>，动态地添加存储空间。Linux<strong>逻辑卷管理器（logical volume manager，LVM）</strong>软件包正好可以用来做这个。它可以让你在无需重建整个文件系统的情况下，轻松地管理磁盘空间。</p><h4 id="1-逻辑卷管理布局"><a href="#1-逻辑卷管理布局" class="headerlink" title="1.逻辑卷管理布局"></a>1.逻辑卷管理布局</h4><p>逻辑卷管理的核心在于如何处理安装在系统上的硬盘分区。在逻辑卷管理的世界里，硬盘称作<strong>物理卷（physical volume，PV）</strong>。每个物理卷都会映射到硬盘上特定的物理分区。</p><p>多个物理卷集中在一起可以形成一个<strong>卷组（volume group，VG）</strong>。逻辑卷管理系统将卷组视为一个物理硬盘，但事实上卷组可能是由分布在<strong>多个物理硬盘上的多个物理分区组成的</strong>。卷组提供了一个创建逻辑分区的平台，而这些逻辑分区则包含了文件系统。</p><p>整个结构中的最后一层是<strong>逻辑卷（logical volume，LV）</strong>。逻辑卷为Linux提供了创建文件系统的分区环境，作用类似于到目前为止我们一直在探讨的Linux中的物理硬盘分区。Linux系统将<strong>逻辑卷视为物理分区</strong>。</p><p>可以使用任意一种标准Linux文件系统来格式化逻辑卷，然后再将它加入Linux虚拟目录中的某个挂载点。</p><img src="/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/逻辑卷管理环境.png" alt="image-20210920195802130" style="zoom:80%;"><p>横跨了三个不同的物理硬盘，覆盖了五个独立的物理分区。在卷组内部有两个独立的逻辑卷。Linux系统将每个逻辑卷视为一个物理分区。每个逻辑卷可以被格式化成ext4文件系统，然后挂载到虚拟目录中某个特定位置。</p><p>通过逻辑卷管理，你随后可以轻松地将这个未使用分区分配到已有卷组：要么用它创建一个新的逻辑卷，要么在需要更多空间时用它来扩展已有的逻辑卷。如果你给系统添加了一块硬盘，逻辑卷管理系统允许你将它添加到已有卷组，为某个已有的卷组创建更多空间，或是创建一个可用来挂载的新逻辑卷。</p><h4 id="2-Linux-中的-LVM"><a href="#2-Linux-中的-LVM" class="headerlink" title="2.Linux 中的 LVM"></a>2.Linux 中的 LVM</h4><p>允许你在Linux上用简单的命令行命令管理一个完整的逻辑卷管理环境。Linux2.6版本以上采用LVM2。他提供了以下功能。</p><ol><li>快照：允许你在逻辑卷在线的状态下将其复制到另一个设备。传统的备份方法在将文件复制到备份媒体上时通常要将文件锁定。快照允许你在复制的同时，保证运行关键任务的Web服务器或数据库服务器继续工作。</li><li>条带化：可跨多个物理硬盘创建逻辑卷。文件中的<strong>数据块会被分散到多个硬盘上</strong>。可以将一个文件的多个数据块同时写入多个硬盘，而无需等待单个硬盘移动读写磁头到多个不同位置。</li><li>镜像：镜像是一个实时更新的逻辑卷的完整副本。当你创建镜像逻辑卷时，LVM会将原始逻辑卷同步到镜像副本中。LVM会为文件系统的每次写操作执行两次写入——一次写入到主逻辑卷，一次写入到镜像副本。</li></ol><h4 id="3-使用Linux-LVM"><a href="#3-使用Linux-LVM" class="headerlink" title="3.使用Linux LVM"></a>3.使用Linux LVM</h4><ol><li><p>定义物理卷</p><p><strong>第一步</strong>：将硬盘上的物理分区转换成Linux LVM使用的物理卷区段。<code>fdisk</code>通过t命令改变分区类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t </span><br><span class="line">Selected partition 1 </span><br><span class="line">Hex code (<span class="built_in">type</span> L to list codes): 8e </span><br><span class="line">Changed system <span class="built_in">type</span> of partition 1 to 8e (Linux LVM) </span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p </span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 5368 MB, 5368709120 bytes </span><br><span class="line">255 heads, 63 sectors/track, 652 cylinders </span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes </span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes </span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes </span><br><span class="line">Disk identifier: 0xa8661341 </span><br><span class="line"></span><br><span class="line"> Device Boot Start End Blocks Id System </span><br><span class="line">/dev/sdb1 1 262 2104483+ 8e Linux LVM </span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w </span><br><span class="line">The partition table has been altered! </span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table. </span><br><span class="line">Syncing disks. </span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><strong>第二步</strong>：用分区来创建实际的物理卷。<code>pvcreate</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  sudo pvcreate /dev/sdb1 </span><br><span class="line"> dev_is_mpath: failed to get device <span class="keyword">for</span> 8:17 </span><br><span class="line"> Physical volume <span class="string">&quot;/dev/sdb1&quot;</span> successfully created</span><br></pre></td></tr></table></figure><p>查看创建进度的话，可以使用pvdisplay命令来显示已创建的物理卷列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$  sudo pvdisplay /dev/sdb1 </span><br><span class="line"> <span class="string">&quot;/dev/sdb1&quot;</span> is a new physical volume of <span class="string">&quot;2.01 GiB&quot;</span> </span><br><span class="line"> --- NEW Physical volume --- </span><br><span class="line"> PV Name /dev/sdb1 </span><br><span class="line"> VG Name </span><br><span class="line"> PV Size 2.01 GiB </span><br><span class="line"> Allocatable NO </span><br><span class="line"> PE Size 0 </span><br><span class="line"> Total PE 0 </span><br><span class="line"> Free PE 0 </span><br><span class="line"> Allocated PE 0 </span><br><span class="line"> PV UUID 0FIuq2-LBod-IOWt-8VeN-tglm-Q2ik-rGU2w7</span><br></pre></td></tr></table></figure></li><li><p>创建卷组</p><p><code>vgcreate</code>创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$  sudo vgcreate Vol1 /dev/sdb1 </span><br><span class="line">Volume group <span class="string">&quot;Vol1&quot;</span> successfully created</span><br><span class="line"></span><br><span class="line"><span class="comment">#vgdisplay看新创建的卷组的细节</span></span><br><span class="line">$  sudo vgdisplay Vol1</span><br></pre></td></tr></table></figure><p>使用/dev/sdb1分区上创建的物理卷，创建了一个名为Vol1的卷组。</p></li><li><p>创建逻辑卷</p><p>统使用逻辑卷来模拟物理分区,并在其中保存文件系统。允许你定义逻辑卷中的文件系统，然后将文件系统挂载到虚拟目录上。<code>lvcreate</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># l指定为逻辑卷指定多少可用的卷组空间，按照卷组空闲空间的百分比来指定这个值。。 -n逻辑卷的名称lvtest</span></span><br><span class="line">$  sudo lvcreate -l 100%FREE -n lvtest Vol1</span><br><span class="line">Logical volume <span class="string">&quot;lvtest&quot;</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看你创建的逻辑卷的详细情况。</span></span><br><span class="line">$  sudo lvdisplay Vol1</span><br></pre></td></tr></table></figure></li><li><p>创建文件系统</p><p><code>mkfs.ext4</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$  sudo mkfs.ext4 /dev/Vol1/lvtest</span><br><span class="line"></span><br><span class="line"><span class="comment">#令将这个卷挂载到虚拟目录中</span></span><br><span class="line">$  sudo mount /dev/Vol1/lvtest /mnt/my_partition</span><br><span class="line">$ </span><br><span class="line">$  mount </span><br><span class="line">/dev/mapper/vg_server01-lv_root on / <span class="built_in">type</span> ext4 (rw)</span><br></pre></td></tr></table></figure><p>注意，mkfs.ext4和mount命令中用到的路径都有点奇怪。路径中使用了卷组名和逻辑卷名，而不是物理分区路径。文件系统被挂载之后，就可以访问虚拟目录中的这块新区域了。</p></li><li><p>修改LVM</p><p>于能够动态修改文件系统。</p><table><thead><tr><th>命 令</th><th>功 能</th></tr></thead><tbody><tr><td>vgchange</td><td>激活和禁用卷组</td></tr><tr><td>vgremove</td><td>删除卷组</td></tr><tr><td>vgextend</td><td>将物理卷加到卷组中</td></tr><tr><td>vgreduce</td><td>从卷组中删除物理卷</td></tr><tr><td>lvextend</td><td>增加逻辑卷的大小</td></tr><tr><td>lvreduce</td><td>减小逻辑卷的大小</td></tr></tbody></table></li></ol><h2 id="七、安装软件程序"><a href="#七、安装软件程序" class="headerlink" title="七、安装软件程序"></a>七、安装软件程序</h2><h3 id="包管理基础"><a href="#包管理基础" class="headerlink" title="包管理基础"></a>包管理基础</h3><p><strong>包管理系统（package management system，PMS）</strong>，软件包存储在服务器上，这些服务器称为<code>仓库（repository）</code>。可以用PMS工具来搜索新的软件包，或者是更新系统上已安装软件包。软件包通常会依赖其他的包，为了前者能够正常运行，被依赖的包必须提前安装在系统中。PMS工具将会检测这些依赖关系，并在安装需要的包之前先安装好所有额外的软件包。</p><p>广泛使用的两种主要的PMS基础工具是dpkg和rpm。</p><p><strong>Debian</strong>（Ubuntu和Linux Mint）使用dpkg会直接和Linux系统上的PMS交互，用来安装、管理和删除软件包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get </span><br><span class="line">apt-cache </span><br><span class="line">aptitude</span><br></pre></td></tr></table></figure><p><strong>Red Hat的发行版</strong>（如Fedora、openSUSE及Mandriva）使用的是rpm命令，该命令是其PMS的底层基础。类似于dpkg命令，rmp命令能够列出已安装包、安装新包和删除已有软件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum：在Red Hat和Fedora中使用。</span><br><span class="line">urpm：在Mandriva中使用。</span><br><span class="line">zypper：在openSUSE中使用。</span><br></pre></td></tr></table></figure><h3 id="Red-Hat的工具"><a href="#Red-Hat的工具" class="headerlink" title="Red Hat的工具"></a>Red Hat的工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$  yum list installed</span><br><span class="line"></span><br><span class="line"><span class="comment">#重定向到一个文件</span></span><br><span class="line">$  yum list installed &gt; installed_software</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装软件</span></span><br><span class="line">$  yum install package </span><br><span class="line">$  yum install dos2unix.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新软件</span></span><br><span class="line"><span class="comment">#列出所有</span></span><br><span class="line">$  yum list updates</span><br><span class="line">$  yum update package_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载软件 </span></span><br><span class="line"><span class="comment">#只删除软件包而保留配置文件和数据文件</span></span><br><span class="line">$  yum remove package_name</span><br><span class="line"><span class="comment">#删除所有</span></span><br><span class="line">$  yum erase package_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#yum软件仓库</span></span><br><span class="line">$  yum repolist</span><br></pre></td></tr></table></figure><h3 id="安装源码包"><a href="#安装源码包" class="headerlink" title="安装源码包"></a>安装源码包</h3><p>将源码包下载到linux上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压 sysstat提供了各种系统监测工具</span></span><br><span class="line">tar -zxvf sysstat-11.1.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#为系统配置，检查依赖关系</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建二进制文件</span></span><br><span class="line">make </span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">make install </span><br></pre></td></tr></table></figure><h2 id="八、编辑器"><a href="#八、编辑器" class="headerlink" title="八、编辑器"></a>八、编辑器</h2><p>vi是Unix最初的编辑器。</p><h3 id="检查vim软件包"><a href="#检查vim软件包" class="headerlink" title="检查vim软件包"></a>检查vim软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$  <span class="built_in">alias</span> vi </span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">&#x27;vim&#x27;</span> </span><br><span class="line">$ </span><br><span class="line">$  <span class="built_in">which</span> vim </span><br><span class="line">/usr/bin/vim </span><br><span class="line">$ </span><br><span class="line">$  ls -l /usr/bin/vim</span><br></pre></td></tr></table></figure><h3 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h3><p>vim编辑器有两种操作模式：</p><ul><li>普通模式</li><li>插入模式</li></ul><p>普通模式的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方向操作</span></span><br><span class="line">h：左移一个字符。</span><br><span class="line">j：下移一行（文本中的下一行）。</span><br><span class="line">k：上移一行（文本中的上一行）。</span><br><span class="line">l：右移一个字符。</span><br><span class="line"></span><br><span class="line"><span class="comment">#提高移动速度的命令。</span></span><br><span class="line">PageDown（或Ctrl+F）：下翻一屏。</span><br><span class="line">PageUp（或Ctrl+B）：上翻一屏。</span><br><span class="line">G：移到缓冲区的最后一行。</span><br><span class="line">num G：移动到缓冲区中的第num行。</span><br><span class="line">gg：移到缓冲区的第一行。</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令行模式。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编辑数据"><a href="#编辑数据" class="headerlink" title="编辑数据"></a>编辑数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x 删除当前光标所在位置的字符</span><br><span class="line">dd 删除当前光标所在行</span><br><span class="line">dw 删除当前光标所在位置的单词</span><br><span class="line">d$ 删除当前光标所在位置至行尾的内容</span><br><span class="line">J 删除当前光标所在行行尾的换行符（拼接行）</span><br><span class="line">u 撤销前一编辑命令</span><br><span class="line">a 在当前光标后追加数据</span><br><span class="line">A 在当前光标所在行行尾追加数据</span><br><span class="line">r char 用char替换当前光标所在位置的单个字符</span><br><span class="line">R text 用text覆盖当前光标所在位置的数据，直到按下ESC键</span><br></pre></td></tr></table></figure><h3 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h3><p>vim在删除数据时，实际上会将数据保存在单独的一个寄存器中。可以用p命令取回数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p 粘贴</span><br><span class="line">y 复制</span><br><span class="line">yw 复制第一个单词</span><br><span class="line">y$ 复制到行尾</span><br></pre></td></tr></table></figure><p><strong>可视模式</strong>会在你移动光标时高亮显示文本。移动光标到要开始复制的位置，并按下<code>v</code>键。你会注意到光标所在位置的文本已经被高亮显示了。移动光标来覆盖你想要复制的文本（甚至可以向下移动几行来复制更多行的文本）。在移动光标时，vim会高亮显示复制区域的文本。在覆盖了要复制的文本后，按<code>y</code>键来激活复制命令。移动光标到你要放置的位置，使用<code>p</code>命令来粘贴。</p><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><p>按下斜线（/）键。光标会跑到消息行。</p><p>替换命令的格式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:s/old/new/ 会跳到old第一次出现的地方，并用new来替换</span><br><span class="line">:s/old/new/g：一行命令替换所有old。 </span><br><span class="line">:n,ms/old/new/g：替换行号n和m之间所有old。</span><br><span class="line">:%s/old/new/g：替换整个文件中的所有old。 </span><br><span class="line">:%s/old/new/gc：替换整个文件中的所有old，但在每次出现时提示。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于Linux命令行与shell脚本编程大全（第3版）&lt;/p&gt;
&lt;h2 id=&quot;一、初识Linux-shell&quot;&gt;&lt;a href=&quot;#一、初识Linux-shell&quot; class=&quot;headerlink&quot; title=&quot;一、初识Linux shell&quot;&gt;&lt;/a&gt;一、初识Linux shell&lt;/h2&gt;&lt;p&gt;Linux系统分为4个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linux内核&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GNU工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图形化桌面环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用软件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2021/09/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/Linux系统.png&quot; alt=&quot;Linux系统&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;h3 id=&quot;Linux内核&quot;&gt;&lt;a href=&quot;#Linux内核&quot; class=&quot;headerlink&quot; title=&quot;Linux内核&quot;&gt;&lt;/a&gt;Linux内核&lt;/h3&gt;&lt;p&gt;内核控制计算机系统上所有硬件和软件。主要有四个功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;系统内存管理&lt;/strong&gt;：管理服务器可用的物理内存，并且可以创建和管理虚拟内存。内核通过硬盘上的存储空间实现虚拟内存，这块区域称为&lt;strong&gt;交换空间&lt;/strong&gt;。内核不断地在交换空间和实际物理内存之间反复交换虚拟内存的内容，使它拥有比物理内存更多的可用内存。&lt;/p&gt;
&lt;p&gt;内存分成很多块，称为页面。内核将每个内存页面放在物理内存或交换空间。然后，内核会维护一个内存页面表，指明哪些页面位于物理内存中，哪些页面被交换到了磁盘上。内核会记录哪些内存页面正在使用中,并自动把一段时间未访问的内存页面复制到交换空间区域（称为&lt;strong&gt;换出&lt;/strong&gt;)——即使还有可用内存。当程序要访问一个已被换出的内存页面时,内核必须从物理内存换出另外一个内存页面给它让出空间，然后从交换空间换入请求的内存页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;软件程序管理&lt;/strong&gt;：Linux将运行的程序称为进程。内核创建了第一个进程(称为&lt;code&gt;init进程&lt;/code&gt;）来启动系统上所有其他进程。当内核启动时，它会将init进程加载到虚拟内存中。内核在启动任何其他进程时，都会在虚拟内存中给新进程分配一块专有区域来存储该进程用到的数据和代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;硬件设备管理&lt;/strong&gt;：内核模块。它允许将驱动代码插入到运行中的内核而无需重新编译内核。同时，当设备不再使用时也可将内核模块从内核中移走。&lt;br&gt;Linux系统将硬件设备当成特殊的文件，称为设备文件。设备文件有3种分类:字符型设备文件、&lt;br&gt;块设备文件、网络设备文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;文件系统管理&lt;/strong&gt;：Linux内核支持通过不同类型的文件系统从硬盘中读写数据。除了自有的诸多文件系统外，Linux还支持从其他操作系统（比如Microsoft Windows)采用的文件系统中读写数据。内核必须在编译时就加入对所有可能用到的文件系统的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;GNU工具&quot;&gt;&lt;a href=&quot;#GNU工具&quot; class=&quot;headerlink&quot; title=&quot;GNU工具&quot;&gt;&lt;/a&gt;GNU工具&lt;/h3&gt;&lt;p&gt;操作系统需要工具来执行一些标准功能，如控制软件和程序。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>SCSS</title>
    <link href="http://yoursite.com/2021/09/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/SCSS/"/>
    <id>http://yoursite.com/2021/09/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/SCSS/</id>
    <published>2021-09-15T14:17:50.000Z</published>
    <updated>2021-09-18T13:46:43.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h2><h3 id="CSS预处理器出现的原因"><a href="#CSS预处理器出现的原因" class="headerlink" title="CSS预处理器出现的原因"></a>CSS预处理器出现的原因</h3><ol><li>无法嵌套书写导致代码繁重、冗杂、逻辑混乱。</li><li>没有变量和样式复用机制，属性值只能以字面量的形式重复输出。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 总结：代码复用性低；不易于维护</span><br><span class="line"># 注：现在，现在的CSS是可以定义变量的！！！</span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --red: <span class="number">#f3e1e1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出名的CSS预处理器介绍"><a href="#出名的CSS预处理器介绍" class="headerlink" title="出名的CSS预处理器介绍"></a>出名的CSS预处理器介绍</h3><h4 id="1-SCSS-SASS"><a href="#1-SCSS-SASS" class="headerlink" title="1. SCSS/SASS"></a>1. SCSS/SASS</h4><p>SASS (.scss)。于2007年诞生，最早也是最成熟的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS。</p><h4 id="2-LESS"><a href="#2-LESS" class="headerlink" title="2. LESS"></a>2. LESS</h4><p>LESS (.less)。于2009年诞生，借鉴了SASS的长处，并兼容了CSS语法，使得开发者使用起来更为方便顺手，但是相比于SASS，其编程功能不够丰富，反而促使SASS进化成为了SCSS。</p><h4 id="3-Stylus"><a href="#3-Stylus" class="headerlink" title="3. Stylus"></a>3. Stylus</h4><p>Stylus (.styl)。于2010年诞生，出自Node.js社区，主要用来给Node项目进行CSS预处理支持，人气较前两者偏低。</p><h3 id="SCSS和SASS之间的关系"><a href="#SCSS和SASS之间的关系" class="headerlink" title="SCSS和SASS之间的关系"></a>SCSS和SASS之间的关系</h3><p>简而言之：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sass有两套语法：</span><br><span class="line"></span><br><span class="line">1.第一种或更新的语法被称为SCSS。它是CSS语法的扩展。这意味着每个有效的CSS样式表都是具有相同含义的有效SCSS文件。下文描述的Sass功能增强了此语法。使用此语法的文件扩展名为.scss。</span><br><span class="line"></span><br><span class="line">2.第二种或更旧的语法被称为SASS。提供了一种更为简洁的CSS编写方式。它使用缩进而不是方括号来表示选择器的嵌套，并使用换行符而不是分号来分隔属性。使用此语法的文件扩展名为.sass。</span><br><span class="line"></span><br><span class="line">任何一种格式可以直接 导入 (@import) 到另一种格式中使用，或者通过 sass-convert 命令行工具转换成另一种格式</span><br></pre></td></tr></table></figure><h3 id="使用CSS预处理器的优劣"><a href="#使用CSS预处理器的优劣" class="headerlink" title="使用CSS预处理器的优劣"></a>使用CSS预处理器的优劣</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1.优点"></a>1.优点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题。支持嵌套、变量和逻辑等。可以让CSS更加简洁、提高代码复用性、逻辑分明等等</span><br></pre></td></tr></table></figure><h4 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2.缺点"></a>2.缺点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css的文件体积和复杂度不可控；增加了调试难度和成本等。</span><br></pre></td></tr></table></figure><h3 id="选择SCSS的原因"><a href="#选择SCSS的原因" class="headerlink" title="选择SCSS的原因"></a>选择SCSS的原因</h3><ol><li><p>官方介绍</p><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了<strong>变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports)</strong> 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件，以及更高效地开发项目。</p></li><li><p>特色功能</p><ul><li>完全兼容 CSS3</li><li>在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能</li><li>通过函数进行颜色值与属性值的运算</li><li>提供控制指令 (control directives)等高级功能</li><li>自定义输出格式</li></ul></li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>less、scss(sass)和stylus代码并不能被浏览器直接解析，所以必须先将它们编译成css代码</p><p>现有框架已经提供了css预处理器选项，编译相关配置会自动帮我们生成！所以只有在”练习”情况下才有必要安装该环境</p><h3 id="安装分类"><a href="#安装分类" class="headerlink" title="安装分类"></a>安装分类</h3><h4 id="1-不依赖编辑器"><a href="#1-不依赖编辑器" class="headerlink" title="1.不依赖编辑器"></a>1.不依赖编辑器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装scss预处理器，使用终端命令实现编译</span><br><span class="line"></span><br><span class="line">a. Node环境下的node-sass模块</span><br><span class="line">b. Node环境下的dart-sass模块</span><br><span class="line">c. Ruby环境下的sass模块</span><br><span class="line">d. Dart环境下的sass模块</span><br><span class="line"></span><br><span class="line"># 注：这里的推荐顺序针对的是&quot;练习&quot;场景，而开发环境下推荐使用的是dart-sass</span><br><span class="line"># 本质：某个语言的第三方库或者命令行工具</span><br></pre></td></tr></table></figure><h4 id="2-依赖编辑器"><a href="#2-依赖编辑器" class="headerlink" title="2.依赖编辑器"></a>2.依赖编辑器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. IDE代表：Webstrom前提是安装上述&quot;1&quot;中的命令行编译工具，配置自动命令，另安装一个代码提示插件scss</span><br><span class="line">b. 编辑器代表：vscode   安装Easy Sass（编译）和Sass（代码提示）两个插件</span><br></pre></td></tr></table></figure><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="1-不依赖编辑器-1"><a href="#1-不依赖编辑器-1" class="headerlink" title="1.不依赖编辑器"></a>1.不依赖编辑器</h4><h5 id="Node环境"><a href="#Node环境" class="headerlink" title="Node环境"></a>Node环境</h5><h6 id="node-sass"><a href="#node-sass" class="headerlink" title="- node-sass"></a>- node-sass</h6><p>a.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 安装node  https://nodejs.org(官网) 或 https://npm.taobao.org/mirrors/node(镜像)</span><br><span class="line">2. *安装cnpm(不推荐直接将源换为淘宝镜像!!) $npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">3. 安装node-sass $npm i -g node-sass  或  $cnpm i -g node-sass</span><br><span class="line">4. 检查是否安装成功$node-sass -v</span><br></pre></td></tr></table></figure><p>b.使用</p><ol><li><p>单文件编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">node-sass  原有的scss文件 生成的css文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node-sass  原有的scss文件 -o 生成目录</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node-sass a.scss b.css</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node-sass a.scss css_files</span></span><br></pre></td></tr></table></figure></li><li><p>多文件编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">node-sass 原有的scss文件目录 -o 生成的css文件目录</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node-sass c -o d</span></span><br></pre></td></tr></table></figure></li><li><p>文件监听模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在<span class="string">&quot;1&quot;</span>和<span class="string">&quot;2&quot;</span>的基础上填加<span class="string">&quot;-w&quot;</span>命令行参数即可</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node-sass -w 原有的scss文件 -o 生成目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node-sass -w 原有的scss文件目录 -o 生成的css文件目录</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node-sass -w scss -o css</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 效果：编译进程不结束，监听文件内容</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="dart-sass"><a href="#dart-sass" class="headerlink" title="- dart-sass"></a>- dart-sass</h6><p>a.安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 安装node  https://nodejs.org(官网) 或 https://npm.taobao.org/mirrors/node(镜像)</span><br><span class="line">2. *安装cnpm(不推荐直接将源换为淘宝镜像!!) $npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">3. 安装dart-sass $npm i -g sass  或  $cnpm i -g sass</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：该模块为第三方库，所以可以考虑使用cnpm i sass -D(-D == --save-dev)仅对某个小项目当做开发时依赖进行使用</span></span><br></pre></td></tr></table></figure><p>b.使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 该模块的官方文档：https://sass-lang.com/documentation/js-api */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sass.render(&#123;<span class="attr">file</span>: scss_filename&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;);</span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="keyword">const</span> result = sass.renderSync(&#123;<span class="attr">file</span>: scss_filename&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：默认情况下renderSync()的速度是render()的两倍以上，这是由于异步回调所带来的开销而导致的</span></span><br></pre></td></tr></table></figure><h5 id="Ruby环境"><a href="#Ruby环境" class="headerlink" title="Ruby环境"></a>Ruby环境</h5><h6 id="a-安装"><a href="#a-安装" class="headerlink" title="a.安装"></a>a.安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.安装Rubyhttps://rubyinstaller.org/downloads</span><br><span class="line">2.*配置镜像$gem sources -a https://gems.ruby-china.com/ -r https://rubygems.org/</span><br><span class="line">3.*查看源 $gem sources -l # 确保只有gems.ruby-china.com一个源</span><br><span class="line">4.安装scss $gem install sass</span><br><span class="line">5.检查是否安装成功 $sass -v</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注：如果出现了SSL错误，修改 ~/.gemrc 文件，增加 ssl_verify_mode: 0 配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ~表示用户根目录，windows的文件位置为C:\Users\用户名\.gemrc</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.com</span><br><span class="line">:ssl_verify_mode: 0</span><br></pre></td></tr></table></figure><h6 id="b-使用"><a href="#b-使用" class="headerlink" title="b.使用"></a>b.使用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注：最好带上&quot;-C --sourcemap=none &quot;参数</span><br><span class="line"># 注：Sass 命令行工具根据文件的拓展名判断所使用的语法格式，没有文件名时 sass 命令默认编译 .sass 文件，添加 --scss 选项或者使用 scss 命令编译 SCSS 文件。</span><br></pre></td></tr></table></figure><ol><li><p>单文件编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sass  原有的scss文件[:]生成的css文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sass a.scss b.css</span></span><br></pre></td></tr></table></figure></li><li><p>多文件编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sass --watch 原有的scss文件目录:生成的css文件目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：必须加<span class="string">&quot;--watch&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>文件监听模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sass --watch 原有的scss文件:生成的css文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sass --watch 原有的scss文件目录:生成的css文件目录</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sass --watch -C --sourcemap=none scss:css</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 效果：编译进程不结束，监听文件内容</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="Dart环境"><a href="#Dart环境" class="headerlink" title="Dart环境"></a>Dart环境</h5><h6 id="a-安装-1"><a href="#a-安装-1" class="headerlink" title="a.安装"></a>a.安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.安装Darthttps://dart.dev/tools/sdk/archive</span><br><span class="line">2.*配置镜像，添加环境变量 https://pub.flutter-io.cn 或 https://mirrors.tuna.tsinghua.edu.cn/dart-pub/</span><br><span class="line">windows打开此电脑,添加系统变量 PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">Linux键入$echo &#x27;export PUB_HOSTED_URL=&quot;https://pub.flutter-io.cn&quot;&#x27; &gt;&gt; ~/.bashrc 或 /etc/profile</span><br><span class="line"></span><br><span class="line">4.安装sass</span><br><span class="line">全局安装：$pub global activate sass(可执行文件)</span><br><span class="line">项目安装：pubspec.yaml填写好依赖后，执行 $pub get  (.dart代码)</span><br><span class="line">5.检查是否安装成功$sass -v</span><br></pre></td></tr></table></figure><h6 id="b-使用-1"><a href="#b-使用-1" class="headerlink" title="b.使用"></a>b.使用</h6><p>全局安装模式</p><ol><li><p>单文件编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sass  原有的scss文件[:]生成的css文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sass a.scss b.css</span></span><br></pre></td></tr></table></figure></li><li><p>多文件编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sass 原有的scss文件目录/:生成的css文件目录/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sass scss/:css/</span></span><br></pre></td></tr></table></figure></li><li><p>文件监听模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sass --watch 原有的scss文件:生成的css文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sass --watch 原有的scss文件目录:生成的css文件目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：都必须加上<span class="string">&quot;:&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example:</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sass --watch scss:css</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 效果：编译进程不结束，监听文件内容</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="局部安装模式"><a href="#局部安装模式" class="headerlink" title="局部安装模式"></a>局部安装模式</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">2.运行.dart代码</span><br><span class="line">    // 前提是在pubsepc.yaml文件中添加依赖</span><br><span class="line">    // dev_dependencies:</span><br><span class="line">  //sass: lastest</span><br><span class="line"></span><br><span class="line">// main.dart</span><br><span class="line">import &#x27;package:sass/sass.dart&#x27; as sass;</span><br><span class="line"></span><br><span class="line">void main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(sass.compile(args.first));</span><br><span class="line">&#125;</span><br><span class="line">// or</span><br><span class="line">void main(List&lt;String&gt; args) &#123;</span><br><span class="line">  var result = sass.compile(arguments[0]);</span><br><span class="line">  new File(arguments[1]).writeAsStringSync(result);</span><br><span class="line">&#125;</span><br><span class="line">// dart main.dart styles.scss styles.css</span><br></pre></td></tr></table></figure><h4 id="2-依赖编辑器-1"><a href="#2-依赖编辑器-1" class="headerlink" title="2.依赖编辑器"></a>2.依赖编辑器</h4><h5 id="WebStrom"><a href="#WebStrom" class="headerlink" title="WebStrom"></a>WebStrom</h5><ul><li>安装上述命令行工具之一（以node-sass为例演示）</li><li>依次打开并点击：webstrom -&gt; Settings -&gt; Tools -&gt; Files Watchers -&gt; + -&gt; 选择SCSS文件标识</li><li>Name随意写，供自己看而已</li><li>File Type选择SCSS Style Sheet</li><li>Scope选择All Places</li><li>Program选择可执行文件的路径（这里以node-sass为例）</li><li>Arguments按需选择（这里以<em>$FileName$:$FileNameWithoutExtension$.css</em>为例）</li><li>Output paths to refresh按需选择（这里以<em>$FileNameWithoutExtension$.css</em>为例）</li><li>点击OK，配置完成</li></ul><h5 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h5><ul><li><p>安装<code>Easy Sass</code>（编译）和<code>Sass</code>（代码提示）两个插件（注意大小写，否则找不到）</p></li><li><p>点击插件右下角的设置图标后点击”扩展设置”，最后点击”在settings.json中编辑”，开始设置关于Easy Sass的配置</p></li><li><p>会自动生成下方图片内的配置</p></li><li><p>添加*”easysass.targetDir”: $path<em>，可将编译后的css文件放入</em>$path*路径下(默认为当前路径)。例如生成到css文件下内</p></li></ul><h2 id="SassScript"><a href="#SassScript" class="headerlink" title="SassScript"></a>SassScript</h2><p>在 CSS 属性的基础上 Sass 提供了一些名为 SassScript 的新功能。 SassScript 可作用于任何属性，允许属性使用变量、算数运算等额外功能。</p><p><strong>弱类型语言</strong>, 对语法要求没那么严格</p><h3 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h3><ol><li>Sass 支持标准的 CSS 多行注释 <code>/* */</code>，以及单行注释 <code>//</code>，前者会被完整输出到编译后的 CSS 文件中，而后者则不会。</li><li>将 <code>!</code> 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息。</li><li>插值语句 (interpolation) 也可写进多行注释中输出变量值</li></ol><p>例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// compile scss files to css</span></span><br><span class="line"><span class="comment">// it&#x27;s ready to do it.</span></span><br><span class="line"><span class="variable">$pink</span>: <span class="number">#f3e1e1</span>;</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$pink</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$author</span>: <span class="string">&#x27;gdream@126.com&#x27;</span>;</span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">Author: #&#123;$author&#125;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>开发模式编译后:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f3e1e1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">Author: &#x27;gdream@126.com&#x27;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>压缩输出模式编译后：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f3e1e1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">Author: &#x27;gdream@126.com&#x27;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p>变量以美元符号开头，赋值方法与 CSS 属性的写法一样</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">1600px</span>;</span><br><span class="line"><span class="variable">$pen-size</span>: <span class="number">3em</span>;</span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><p>直接使用变量的名称即可调用变量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$pen-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h4><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 <code>!global</code> 声明</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#foo</span> &#123;</span><br><span class="line">  <span class="variable">$width</span>: <span class="number">5em</span> !global;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#foo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h3><p>SassScript 支持 7 种主要的数据类型：</p><ul><li>数字，<code>1, 2, 13, 10px</code></li><li>字符串，有引号字符串与无引号字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li><li>颜色，<code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li><li>布尔型，<code>true, false</code></li><li>空值，<code>null</code></li><li>数组 (list)，用空格或逗号作分隔符，<code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li><li>maps, 相当于 JavaScript 的 object，<code>(key1: value1, key2: value2)</code></li></ul><p>SassScript 也支持其他 CSS 属性值，比如 Unicode 字符集，或 <code>!important</code> 声明。然而Sass 不会特殊对待这些属性值，一律视为无引号字符串。</p><p>判断数据类型的方式：<code>type-of($value)</code></p><h4 id="1-字符串-Strings"><a href="#1-字符串-Strings" class="headerlink" title="1.字符串 (Strings)"></a>1.字符串 (Strings)</h4><p>SassScript 支持 CSS 的两种字符串类型：<code>有引号字符串 (quoted strings)</code>，和<code>无引号字符串 (unquoted strings)</code>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: <span class="string">&#x27;Tom Bob&#x27;</span>;</span><br><span class="line"><span class="variable">$container</span>: <span class="string">&quot;top bottom&quot;</span>;</span><br><span class="line"><span class="variable">$what</span>: heart;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 `#&#123;&#125;` (interpolation) 时，有引号字符串将被编译为无引号字符串，这样便于在 mixin 中引用选择器名</span></span><br></pre></td></tr></table></figure><h4 id="2-数字-Numbers"><a href="#2-数字-Numbers" class="headerlink" title="2.数字(Numbers)"></a>2.数字(Numbers)</h4><p>SassScript支持两种数字类型：<code>带单位数字</code>和<code>不带单位数字</code>。（可正可负可为零，可正可浮点）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$my-age</span>: <span class="number">19</span>; </span><br><span class="line"><span class="variable">$your-age</span>: <span class="number">19.5</span>;</span><br><span class="line"><span class="variable">$height</span>: <span class="number">120px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：单位会和数字当做一个整体，进行算数运算</span></span><br></pre></td></tr></table></figure><h4 id="3-空值-Null"><a href="#3-空值-Null" class="headerlink" title="3.空值(Null)"></a>3.空值(Null)</h4><p>只有一个取值<code>null</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span>: null;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：由于它代表空，所以不能够使用它与任何类型进行算数运算</span></span><br></pre></td></tr></table></figure><h4 id="4-布尔型-Booleans"><a href="#4-布尔型-Booleans" class="headerlink" title="4.布尔型(Booleans)"></a>4.布尔型(Booleans)</h4><p>只有两个取值：<code>true</code>和<code>false</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: true;</span><br><span class="line"><span class="variable">$b</span>: false;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：只有自身是false和null才会返回false，其他一切都将返回true</span></span><br></pre></td></tr></table></figure><h4 id="5-数组-Lists"><a href="#5-数组-Lists" class="headerlink" title="5.数组 (Lists)"></a>5.数组 (Lists)</h4><p>通过空格或者逗号分隔的一系列的值。事实上，独立的值也被视为数组 —— 只包含一个值的数组。索引从<code>1</code>开始</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list0</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">6px</span>;</span><br><span class="line"><span class="variable">$list1</span>: <span class="number">1px</span> <span class="number">2px</span>, <span class="number">5px</span> <span class="number">6px</span>;</span><br><span class="line"><span class="variable">$list2</span>: (<span class="number">1px</span> <span class="number">2px</span>) (<span class="number">5px</span> <span class="number">6px</span>);</span><br></pre></td></tr></table></figure><p>数组中可以包含子数组，比如 <code>1px 2px, 5px 6px</code> 是包含 <code>1px 2px</code> 与 <code>5px 6px</code> 两个数组的数组。如果内外两层数组使用相同的分隔方式，需要用圆括号包裹内层，所以也可以写成 <code>(1px 2px) (5px 6px)</code>。变化是，之前的 <code>1px 2px, 5px 6px</code> 使用逗号分割了两个子数组 (comma-separated)，而 <code>(1px 2px) (5px 6px)</code> 则使用空格分割(space-separated)。</p><p>当数组被编译为 CSS 时，Sass 不会添加任何圆括号（CSS 中没有这种写法），所以 <code>(1px 2px) (5px 6px)</code> 与 <code>1px 2px, 5px 6px</code> 在编译后的 CSS 文件中是完全一样的，但是它们在 Sass 文件中却有不同的意义，前者是包含两个数组的数组，而后者是包含四个值的数组。</p><p>用 <code>()</code> 表示不包含任何值的空数组（在 Sass 3.3 版之后也视为空的 map）。空数组不可以直接编译成 CSS，比如编译 <code>font-family: ()</code> Sass 将会报错。如果数组中包含空数组或空值，编译时将被清除，比如 <code>1px 2px () 3px</code> 或 <code>1px 2px null 3px</code>。</p><p>基于逗号分隔的数组允许保留结尾的逗号，这样做的意义是强调数组的结构关系，尤其是需要声明只包含单个值的数组时。例如 <code>(1,)</code> 表示只包含 <code>1</code> 的数组，而 <code>(1 2 3,)</code> 表示包含 <code>1 2 3</code> 这个以空格分隔的数组的数组。</p><h4 id="6-映射-Maps"><a href="#6-映射-Maps" class="headerlink" title="6.映射(Maps)"></a>6.映射(Maps)</h4><p>Maps必须被圆括号包围，可以映射任何类型键值对（任何类型，包括内嵌maps，不过不推荐这种内嵌方式）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$map</span>: ( </span><br><span class="line">  <span class="variable">$key1</span>: value1, </span><br><span class="line">  <span class="variable">$key2</span>: value2, </span><br><span class="line">  <span class="variable">$key3</span>: value3 </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="7-颜色-Colors"><a href="#7-颜色-Colors" class="headerlink" title="7.颜色 (Colors)"></a>7.颜色 (Colors)</h4><p>CSS原有颜色类型，十六进制、RGB、RGBA、HSL、HSLA和色彩单词</p><p>SCSS提供了内置Colors函数，从而更方便地使用颜色</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color0</span>: green;</span><br><span class="line"><span class="variable">$color1</span>: lighten(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color2</span>: darken(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color3</span>: saturate(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color4</span>: desaturate(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color5</span>: (green + red);</span><br></pre></td></tr></table></figure><h3 id="四、运算"><a href="#四、运算" class="headerlink" title="四、运算"></a>四、运算</h3><h4 id="1-数字运算符"><a href="#1-数字运算符" class="headerlink" title="1.数字运算符"></a>1.数字运算符</h4><p>SassScript 支持数字的加减乘除、取整等运算 (<code>+, -, *, /, %</code>)，如果必要会在不同单位间转换值</p><p>如果要保留运算符号，则应该使用插值语法</p><ul><li><p><code>+</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 纯数字</span></span><br><span class="line"><span class="variable">$add1</span>: <span class="number">1</span> + <span class="number">2</span>;<span class="comment">// 3</span></span><br><span class="line"><span class="variable">$add2</span>: <span class="number">1</span> + <span class="number">2px</span>; <span class="comment">// 3px</span></span><br><span class="line"><span class="variable">$add3</span>: <span class="number">1px</span> + <span class="number">2</span>; <span class="comment">// 3px</span></span><br><span class="line"><span class="variable">$add4</span>: <span class="number">1px</span> + <span class="number">2px</span>;<span class="comment">//3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 纯字符串</span></span><br><span class="line"><span class="variable">$add5</span>: <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>; <span class="comment">// &quot;ab&quot;</span></span><br><span class="line"><span class="variable">$add6</span>: <span class="string">&quot;a&quot;</span> + b;  <span class="comment">// &quot;ab&quot;</span></span><br><span class="line"><span class="variable">$add7</span>: a + <span class="string">&quot;b&quot;</span>;  <span class="comment">// ab</span></span><br><span class="line"><span class="variable">$add8</span>: a + b;  <span class="comment">// ab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字和字符串</span></span><br><span class="line"><span class="variable">$add9</span>: <span class="number">1</span> + a;<span class="comment">// 1a</span></span><br><span class="line"><span class="variable">$adda</span>: a + <span class="number">1</span>;<span class="comment">// a1</span></span><br><span class="line"><span class="variable">$addb</span>: <span class="string">&quot;1&quot;</span> + a; <span class="comment">// &quot;1a&quot;</span></span><br><span class="line"><span class="variable">$addc</span>: <span class="number">1</span> + <span class="string">&quot;a&quot;</span>; <span class="comment">// &quot;1a&quot;</span></span><br><span class="line"><span class="variable">$addd</span>: <span class="string">&quot;a&quot;</span> + <span class="number">1</span>; <span class="comment">// &quot;a1&quot;</span></span><br><span class="line"><span class="variable">$adde</span>: a + <span class="string">&quot;1&quot;</span>; <span class="comment">// a1</span></span><br><span class="line"><span class="variable">$addf</span>: <span class="number">1</span> + <span class="string">&quot;1&quot;</span>; <span class="comment">// &quot;11&quot;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>纯数字：只要有单位，结果必有单位</li><li>纯字符串：第一个字符串有无引号决定结果是否有引号</li><li>数字和字符串：第一位有引号，结果必为引号；第一位对应数字非数字且最后一位带有引号，则结果必为引号</li></ul></li><li><p><code>-</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$add1</span>: <span class="number">1</span> - <span class="number">2</span>;<span class="comment">// -1</span></span><br><span class="line"><span class="variable">$add2</span>: <span class="number">1</span> - <span class="number">2px</span>; <span class="comment">// -1px</span></span><br><span class="line"><span class="variable">$add3</span>: <span class="number">1px</span> - <span class="number">2</span>; <span class="comment">// -1px</span></span><br><span class="line"><span class="variable">$add4</span>: <span class="number">1px</span> - <span class="number">2px</span>;<span class="comment">//-1px</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sub1</span>: a - <span class="number">1</span>;  <span class="comment">// a-1</span></span><br><span class="line"><span class="variable">$sub2</span>: <span class="number">1</span> - a;  <span class="comment">// 1-a</span></span><br><span class="line"><span class="variable">$sub3</span>: <span class="string">&quot;a&quot;</span> - <span class="number">1</span>;<span class="comment">// &quot;a&quot;-1</span></span><br><span class="line"><span class="variable">$sub4</span>: a - <span class="string">&quot;1&quot;</span>;<span class="comment">// a-&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>每个字段必须前部分为数字，且两个字段只能一个后部分是字符(因为此时后缀被当被单位看待了)。<br>只要其中一个值首位不为数字的，结果就按顺序去除空格后拼接起来</p></li><li><p><code>*</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num1</span>: <span class="number">1</span> * <span class="number">2</span>;    <span class="comment">// 2</span></span><br><span class="line"><span class="variable">$mul2</span>: <span class="number">1</span> * <span class="number">2px</span>;  <span class="comment">// 2px</span></span><br><span class="line"><span class="variable">$num3</span>: <span class="number">1px</span> * <span class="number">2</span>;  <span class="comment">// 2px</span></span><br><span class="line"><span class="variable">$num4</span>: <span class="number">2px</span> * <span class="number">2px</span>;<span class="comment">// 编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$num5</span>: <span class="number">1</span> * <span class="number">2</span>abc; <span class="comment">// 2abc</span></span><br></pre></td></tr></table></figure><p>每个字段必须前部分为数字，且两个字段只能一个后部分是字符(因为此时后缀被当被单位看待了)。其余编译不通过</p></li><li><p><code>/</code></p><p>不会四舍五入，精确到小数点后5位<br>每个字段必须前部分为数字，且当前者只是单纯数字无单位时，后者(除数)后部分不能有字符。其余结果就按顺序去除空格后拼接起来。<br>(因为此时后缀被当被单位看待了)</p></li><li><p><code>%</code></p><p>值与”%”之间必须要有空格，否则会被看做字符串</p></li></ul><h4 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h4><p>大前提：两端必须为<code>数字</code> 或 <code>前部分数字后部分字符</code></p><p>返回值：<code>true</code> or <code>false</code></p><ul><li><p><code>&gt;</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &gt; <span class="number">2</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &gt; <span class="number">2</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>&gt;=</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &gt;= <span class="number">2</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;=</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &lt;= <span class="number">2</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-相等运算符"><a href="#3-相等运算符" class="headerlink" title="3.相等运算符"></a>3.相等运算符</h4><p>作用范围：相等运算 <code>==, !=</code> 可用于所有数据类型</p><p>返回值：<code>true</code> or <code>false</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> == <span class="number">1px</span>; <span class="comment">// true</span></span><br><span class="line"><span class="variable">$b</span>: <span class="string">&quot;a&quot;</span> == a; <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 总结：</span></span><br><span class="line">前部分为不带引号数字时，对比的仅仅是数字部分；反之，忽略引号，要求字符一一对应</span><br></pre></td></tr></table></figure><h4 id="4-布尔运算符"><a href="#4-布尔运算符" class="headerlink" title="4.布尔运算符"></a>4.布尔运算符</h4><p>SassScript 支持布尔型的 <code>and</code> <code>or</code> 以及 <code>not</code> 运算。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span>&gt;<span class="number">0</span> and <span class="number">0</span>&gt;=<span class="number">5</span>; <span class="comment">// fasle</span></span><br><span class="line"><span class="comment">// 总结：</span></span><br><span class="line">值与&quot;and&quot;、&quot;or&quot;和&quot;not&quot;之间必须要有空格，否则会被看做字符串</span><br></pre></td></tr></table></figure><h4 id="5-颜色值运算"><a href="#5-颜色值运算" class="headerlink" title="5.颜色值运算"></a>5.颜色值运算</h4><p>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值</p><ul><li><p><code>颜色值与颜色值</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 01 + 04 = 05 02 + 05 = 07 03 + 06 = 09，然后编译为</span></span><br><span class="line"><span class="comment">// p &#123;</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#050709</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>颜色值与数字</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 01 * 2 = 02 02 * 2 = 04 03 * 2 = 06，然后编译为</span></span><br><span class="line"><span class="comment">// p &#123;</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#020406</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>RGB和HSL</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果颜色值包含 alpha channel（rgba 或 hsla 两种颜色值），必须拥有相等的 alpha 值才能进行运算，因为算术运算不会作用于 alpha 值。</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) + rgba(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p &#123;</span></span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>); &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-运算优先级"><a href="#6-运算优先级" class="headerlink" title="6.运算优先级"></a>6.运算优先级</h4><ol><li><code>()</code></li><li><code>*</code>、<code>/</code>、<code>%</code></li><li><code>+</code>、<code>-</code></li><li><code>&gt;</code> 、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code></li></ol><h3 id="五、杂货语法"><a href="#五、杂货语法" class="headerlink" title="五、杂货语法"></a>五、杂货语法</h3><h4 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1.插值语法"></a>1.<code>插值语法</code></h4><p>通过 <code>#&#123;&#125;</code> 插值语句可以在选择器、属性名和属性值中使用变量。</p><p>但大多数情况下，这样使用属性值可能还不如直接使用变量方便，但是使用 <code>#&#123;&#125;</code> 可以避免 Sass 运行运算表达式，直接编译 CSS。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: foo;</span><br><span class="line"><span class="variable">$attr</span>: border;</span><br><span class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后：</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: foo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-amp-in-SassScript"><a href="#2-amp-in-SassScript" class="headerlink" title="2.&amp; in SassScript"></a>2.<code>&amp; in SassScript</code></h4><p><code>&amp;</code>为父选择器</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: blank;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-default"><a href="#3-default" class="headerlink" title="3.!default"></a>3.<code>!default</code></h4><p>可以在变量的结尾添加 <code>!default</code> 给一个未通过 <code>!default</code> 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span>: <span class="string">&quot;First content&quot;</span>;</span><br><span class="line"><span class="variable">$content</span>: <span class="string">&quot;Second content?&quot;</span> !default;</span><br><span class="line"><span class="variable">$new_content</span>: <span class="string">&quot;First time reference&quot;</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">$content</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="variable">$new_content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;First content&quot;</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="string">&quot;First time reference&quot;</span>; &#125;</span><br></pre></td></tr></table></figure><p>注意：变量是 null 空值时将视为未被 <code>!default</code> 赋值。</p><h4 id="3-global"><a href="#3-global" class="headerlink" title="3.!global"></a>3.<code>!global</code></h4><p>将局部变量提升为全局变量</p><h4 id="4-optional"><a href="#4-optional" class="headerlink" title="4.!optional"></a>4.<code>!optional</code></h4><p>如果 <code>@extend</code> 失败会收到错误提示，比如，这样写 <code>a.important &#123;@extend .notice&#125;</code>，当没有 <code>.notice</code> 选择器时，将会报错，只有 <code>h1.notice</code> 包含 <code>.notice</code> 时也会报错，因为 <code>h1</code> 与 <code>a</code> 冲突，会生成新的选择器。</p><p>如果要求 <code>@extend</code> 不生成新选择器，可以通过 <code>!optional</code> 声明达到这个目的.</p><p>简而言之：当<code>@extend</code>相关代码出现语法错误时，编译器可能会给我们”乱”编译为css，我们加上这个参数可以在出现问题后不让他编译该部分代码</p><h3 id="六、-Rules与指令"><a href="#六、-Rules与指令" class="headerlink" title="六、@-Rules与指令"></a>六、@-Rules与指令</h3><h4 id="1-import"><a href="#1-import" class="headerlink" title="1.@import"></a>1.<code>@import</code></h4><p>Sass 拓展了 <code>@import</code> 的功能，允许其导入 SCSS 或 SASS 文件。被导入的文件将合并编译到同一个 CSS 文件中，另外，被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。</p><p>通常，<code>@import</code> 寻找 Sass 文件并将其导入，但在以下情况下，<code>@import</code> 仅作为普通的 CSS 语句，不会导入任何 Sass 文件。</p><ul><li>文件拓展名是 <code>.css</code>；</li><li>文件名以 <code>http://</code> 开头；</li><li>文件名是 <code>url()</code>；</li><li><code>@import</code> 包含 media queries。</li></ul><p>如果不在上述情况内，文件的拓展名是 <code>.scss</code> 或 <code>.sass</code>，则导入成功。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为 <code>.scss</code> 或 <code>.sass</code> 的文件并将其导入。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo.scss&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="comment">// 以上两种方式均可</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下方式均不可行</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo.css&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo&quot;</span> screen;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;http://foo.com/bar&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> url(foo);</span><br></pre></td></tr></table></figure><p>Sass 允许同时导入多个文件，例如同时导入 rounded-corners 与 text-shadow 两个文件：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;rounded-corners&quot;</span>, <span class="string">&quot;text-shadow&quot;</span>;</span><br></pre></td></tr></table></figure><p>导入文件也可以使用 <code>#&#123; &#125;</code> 插值语句，但不是通过变量动态导入 Sass 文件，只能作用于 CSS 的 <code>url()</code> 导入方式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$family</span>: unquote(<span class="string">&quot;Droid+Sans&quot;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=\#&#123;$family&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=Droid+Sans&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件，  这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。  然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。</p><p>除此之外，还支持嵌套 @import,但是不可以在混合指令 (mixin) 或控制指令 (control directives) 中嵌套 <code>@import</code>。</p><h4 id="2-media"><a href="#2-media" class="headerlink" title="2.@media"></a>2.<code>@media</code></h4><p>Sass 中 <code>@media</code> 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 <code>@media</code> 嵌套在 CSS 规则内，编译时，<code>@media</code> 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 <code>@media</code> 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span>`的 queries 允许互相嵌套使用，编译时，Sass 自动添加 `<span class="keyword">and</span></span><br><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p><code>@media</code> 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$media</span>: screen;</span><br><span class="line"><span class="variable">$feature</span>: -webkit-min-device-pixel-ratio;</span><br><span class="line"><span class="variable">$value</span>: <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> #&#123;<span class="variable">$media</span>&#125; and ($feature: $value) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">1.5</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><h4 id="3-extend"><a href="#3-extend" class="headerlink" title="3.*@extend"></a>3.<code>*@extend</code></h4><p><code>@extend</code>即<code>继承</code>。在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。</p><p>总的来看：支持层叠继承、多继承、允许延伸任何定义给单个元素的选择器（但是允许不一定好用）</p><p>a. <code>基本延伸</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面代码的意思是将 .error 下的所有样式继承给 .seriousError，border-width: 3px; 是单独给 .seriousError 设定特殊样式，这样，使用 .seriousError 的地方可以不再使用 .error。</span></span><br></pre></td></tr></table></figure><p><code>@extend</code> 的作用是将重复使用的样式 (<code>.error</code>) 延伸 (extend) 给需要包含这个样式的特殊样式（<code>.seriousError</code>）</p><p>注意理解以下情况：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/image/hacked.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span>, <span class="selector-class">.seriousError</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/image/hacked.png&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当合并选择器时，<code>@extend</code> 会很聪明地避免无谓的重复，<code>.seriousError.seriousError</code> 将编译为 <code>.seriousError</code>，不能匹配任何元素的选择器也会删除。</p><p>b.  <code>延伸复杂的选择器</code>：Class 选择器并不是唯一可以被延伸 (extend) 的，Sass 允许延伸任何定义给单个元素的选择器，比如 <code>.special.cool</code>，<code>a:hover</code> 或者 <code>a.user[href^=&quot;http://&quot;]</code> 等</p><p>c. <code>多重延伸</code>：同一个选择器可以延伸给多个选择器，它所包含的属性将继承给所有被延伸的选择器</p><p>d. <code>继续延伸</code>：当一个选择器延伸给第二个后，可以继续将第二个选择器延伸给第三个</p><p>e.<code>*选择器列</code>：暂时不可以将选择器列 (Selector Sequences)，比如 <code>.foo .bar</code> 或 <code>.foo + .bar</code>，延伸给其他元素，但是，却可以将其他元素延伸给选择器列。</p><p>尽量不使用<code>合并选择器列</code>，因为如果凭个人推理的话，会出现排列组合的情况，所以SASS编译器只会保留有用的组合形式，但依旧会存在排列组合的情况，有可能会留下隐患。</p><ol><li><p>当两个列合并时，如果没有包含相同的选择器，将生成两个新选择器：第一列出现在第二列之前，或者第二列出现在第一列之前</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果两个列包含了相同的选择器，相同部分将会合并在一起，其他部分交替输出 </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为</span></span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure></li></ol><p>f. <code>在指令中延伸</code></p><p>在指令中使用 <code>@extend</code> 时（比如在 <code>@media</code> 中）有一些限制：Sass 不可以将 <code>@media</code> 层外的 CSS 规则延伸给指令层内的 CSS.</p><p>g.  <code>%placeholder</code>为选择器占位符，配合<code>@extend-Only选择器</code>使用。</p><p>效果：只定义了样式，但不会对原有选择器匹配的元素生效</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example1:</span></span><br><span class="line">%<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.path</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> %img;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译后：</span></span><br><span class="line"><span class="selector-class">.path</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// example2:</span></span><br><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">a</span>%extreme &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %extreme;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译后：</span></span><br><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">a</span><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：必须是&quot;.&quot;和&quot;#&quot;选择器</span></span><br></pre></td></tr></table></figure><h4 id="4-at-root"><a href="#4-at-root" class="headerlink" title="4.@at-root"></a>4.<code>@at-root</code></h4><blockquote><p>The @at-root directive causes one or more rules to be emitted at the  root of the document, rather than being nested beneath their parent  selectors. It can either be used with a single inline selector</p></blockquote><p>译文：@at root指令使一个或多个规则在文档的根发出，而不是嵌套在其父选择器下。它可以与单个内联选择器一起使用</p><p>且@at-root 使多个规则跳出嵌套</p><p>@at-root默认情况下并不能使规则或者选择器跳出指令，通过使用without和with可以解决该问题</p><p>了解即可</p><h4 id="5-debug"><a href="#5-debug" class="headerlink" title="5.@debug"></a>5.<code>@debug</code></h4><p>用于调试，按标准错误输出流输出</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$size</span>: <span class="number">9px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file</span>&#123;</span><br><span class="line">  <span class="keyword">@debug</span> <span class="variable">$size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-warn"><a href="#6-warn" class="headerlink" title="6.@warn"></a>6.<code>@warn</code></h4><p>用于警告，按标准错误输出流输出</p><h4 id="7-error"><a href="#7-error" class="headerlink" title="7.@error"></a>7.<code>@error</code></h4><p>用于报错，按标准错误输出流输出</p><table><thead><tr><th>序列</th><th>@-rules</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>@import</td><td>导入sass或scss文件</td></tr><tr><td>2</td><td>@media</td><td>用于将样式规则设置为不同的媒体类型</td></tr><tr><td>3</td><td>@extend</td><td>以继承的方式共享选择器</td></tr><tr><td>4</td><td>@at-root</td><td>转到根节点</td></tr><tr><td>5</td><td>@debug</td><td>用于调试，按标准错误输出流输出</td></tr><tr><td>6</td><td>@warn</td><td>用于警告，按标准错误输出流输出</td></tr><tr><td>7</td><td>@error</td><td>用于报错，按标准错误输出流输出</td></tr></tbody></table><h3 id="八、控制指令"><a href="#八、控制指令" class="headerlink" title="八、控制指令"></a>八、控制指令</h3><h4 id="1-if"><a href="#1-if" class="headerlink" title="1.if()"></a>1.<code>if()</code></h4><p><em>三元运算符</em></p><p>表达式：<code>if(expression, value1, value2)</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: if(<span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span>, green, yellow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-if"><a href="#2-if" class="headerlink" title="2.@if"></a>2.<code>@if</code></h4><p><em>条件语句</em></p><p>当 <code>@if</code> 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>&#123;&#125;</code> 内的代码</p><p><code>@if</code> 声明后面可以跟多个 <code>@else if</code> 声明，或者一个 <code>@else</code> 声明。如果 <code>@if</code> 声明失败，Sass 将逐条执行 <code>@else if</code> 声明，如果全部失败，最后执行 <code>@else</code> 声明</p><ul><li><p><code>单@if</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@if - @else</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> != <span class="number">2</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@if - @else if - @else</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$age</span>: <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="keyword">@if</span> <span class="variable">$age</span> == <span class="number">18</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125; <span class="keyword">@else</span> if <span class="variable">$age</span> == <span class="number">19</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-for"><a href="#3-for" class="headerlink" title="3.@for"></a>3.<code>@for</code></h4><p><em>循环语句</em></p><p>表达式：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 或 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code></p><p>through 和 to 的相同点与不同点：</p><ul><li>相同点：两者均包含的值</li><li>不同点：through包含的值，但to不包含的值</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>; </span><br><span class="line">&#125;<span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; </span><br><span class="line">&#125;<span class="selector-class">.item-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6em</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-while"><a href="#4-while" class="headerlink" title="4.@while"></a>4.<code>@while</code></h4><p><em>循环语句</em></p><p>表达式：<code>@while expression</code></p><p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code>。这样可以实现比 <code>@for</code> 更复杂的循环，只是很少会用到</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="5-each"><a href="#5-each" class="headerlink" title="5.@each"></a>5.<code>@each</code></h4><p><em>循环语句</em></p><p>表达式：<code>$var in $vars</code></p><p><code>$var</code> 可以是任何变量名</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vars</span>` 只能是`Lists`或者`Maps</span><br></pre></td></tr></table></figure><ul><li><p>一维列表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/puma.png&#x27;</span>); &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/sea-slug.png&#x27;</span>); &#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/egret.png&#x27;</span>); &#125;</span><br><span class="line"><span class="selector-class">.salamander-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/salamander.png&#x27;</span>); &#125;</span><br></pre></td></tr></table></figure></li><li><p>二维列表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span>, <span class="variable">$color</span>, <span class="variable">$cursor</span> in (puma, black, default),</span><br><span class="line">                                  (sea-slug, blue, <span class="attribute">pointer</span>),</span><br><span class="line">                                  (egret, white, move) &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="variable">$cursor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/puma.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">cursor</span>: default; &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/sea-slug.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer; &#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/egret.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">cursor</span>: move; &#125;</span><br></pre></td></tr></table></figure></li><li><p>maps</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>) &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>; &#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>; &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="九、混合指令"><a href="#九、混合指令" class="headerlink" title="九、混合指令"></a>九、混合指令</h3><blockquote><p>混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 <code>.float-left</code>。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。</p></blockquote><p>注意：这不是函数！没有返回值！！</p><p>1.定义混合指令</p><p>混合指令的用法是在 <code>@mixin</code> 后添加名称与样式，以及需要的参数（可选）。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">@mixin</span> name &#123;</span><br><span class="line">    <span class="comment">// 样式....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// example：</span></span><br><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-引用混合样式"><a href="#2-引用混合样式" class="headerlink" title="2.引用混合样式"></a>2.引用混合样式</h4><p>使用 <code>@include</code> 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">@include</span> name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：无参数或参数都有默认值时，带不带括号都可以</span></span><br><span class="line"><span class="comment">// example：</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> large-text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-参数"><a href="#3-参数" class="headerlink" title="3.参数"></a>3.参数</h4><p>格式：按照变量的格式，通过逗号分隔，将参数写进Mixin名称后的圆括号里</p><p>支持默认值；支持多参数；支持不定参数；支持位置传参和关键词传参</p><h5 id="a-位置传参"><a href="#a-位置传参" class="headerlink" title="a. 位置传参"></a>a. 位置传参</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mp(<span class="variable">$width</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> mp(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-关键词传参"><a href="#b-关键词传参" class="headerlink" title="b.关键词传参"></a>b.关键词传参</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mp(<span class="variable">$width</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> mp(<span class="variable">$width</span>: <span class="number">300px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-参数默认值"><a href="#c-参数默认值" class="headerlink" title="c.参数默认值"></a>c.参数默认值</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mp(<span class="variable">$width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> mp(<span class="variable">$width</span>: <span class="number">300px</span>);</span><br><span class="line">    <span class="comment">// or</span></span><br><span class="line">    <span class="keyword">@include</span> mp(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-不定参数"><a href="#d-不定参数" class="headerlink" title="d.不定参数"></a>d.不定参数</h5><blockquote><p>官方：Variable Arguments</p><p>译文：参数变量</p><p>有时，不能确定混合指令需要使用多少个参数。这时，可以使用参数变量 <code>…</code> 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mar(<span class="variable">$value</span>...) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-向混合样式中导入内容"><a href="#4-向混合样式中导入内容" class="headerlink" title="4.向混合样式中导入内容"></a>4.向混合样式中导入内容</h4><p>在引用混合样式的时候，可以<strong>先将一段代码导入到混合指令中，然后再输出混合样式</strong>，额外导入的部分将出现在 <code>@content</code> 标志的地方</p><p>可以看作参数的升级版</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> example &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="keyword">@content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> example&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九、函数指令"><a href="#九、函数指令" class="headerlink" title="九、函数指令"></a>九、函数指令</h3><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><blockquote><p>Sass 支持自定义函数，并能在任何属性值或 Sass script 中使用</p><p>Params: 与Mixin一致</p><p>支持返回值</p></blockquote><p><strong>基本格式：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> fn-name(<span class="variable">$params</span>...) &#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="variable">$params</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// example:</span></span><br><span class="line"><span class="keyword">@function</span> fn-name(<span class="variable">$params</span>...) &#123;</span><br><span class="line">    <span class="keyword">@return</span> nth(<span class="variable">$params</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: fn-name(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compiled:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十、细节与展望"><a href="#十、细节与展望" class="headerlink" title="十、细节与展望"></a>十、细节与展望</h3><h4 id="1-细节"><a href="#1-细节" class="headerlink" title="1.细节"></a>1.细节</h4><p>a. @extend、@Mixin和@function的选择</p><blockquote><p><code>minxins</code>在网络传输中比<code>@extend</code> 拥有更好的性能.尽管有些文件未压缩时更大，但使用<code>gzip</code>压缩后，依然可以保证我们拥有更好的性能。</p></blockquote><p><strong>所以@extend我们就尽量不要使用了，而@Mixin和@function的差别在定义和使用上</strong></p><blockquote><p>定义方式不同： <code>@function</code> 需要调用<code>@return</code>输出结果。而 @mixin则不需要。</p><p>使用方式不同：<code>@mixin</code> 使用<code>@include</code>引用，而 <code>@function</code> 使用小括号执行函数。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;相关介绍&quot;&gt;&lt;a href=&quot;#相关介绍&quot; class=&quot;headerlink&quot; title=&quot;相关介绍&quot;&gt;&lt;/a&gt;相关介绍&lt;/h2&gt;&lt;h3 id=&quot;CSS预处理器出现的原因&quot;&gt;&lt;a href=&quot;#CSS预处理器出现的原因&quot; class=&quot;headerlink&quot; title=&quot;CSS预处理器出现的原因&quot;&gt;&lt;/a&gt;CSS预处理器出现的原因&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;无法嵌套书写导致代码繁重、冗杂、逻辑混乱。&lt;/li&gt;
&lt;li&gt;没有变量和样式复用机制，属性值只能以字面量的形式重复输出。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 总结：代码复用性低；不易于维护&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 注：现在，现在的CSS是可以定义变量的！！！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --red: &lt;span class=&quot;number&quot;&gt;#f3e1e1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;出名的CSS预处理器介绍&quot;&gt;&lt;a href=&quot;#出名的CSS预处理器介绍&quot; class=&quot;headerlink&quot; title=&quot;出名的CSS预处理器介绍&quot;&gt;&lt;/a&gt;出名的CSS预处理器介绍&lt;/h3&gt;&lt;h4 id=&quot;1-SCSS-SASS&quot;&gt;&lt;a href=&quot;#1-SCSS-SASS&quot; class=&quot;headerlink&quot; title=&quot;1. SCSS/SASS&quot;&gt;&lt;/a&gt;1. SCSS/SASS&lt;/h4&gt;&lt;p&gt;SASS (.scss)。于2007年诞生，最早也是最成熟的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS。&lt;/p&gt;
&lt;h4 id=&quot;2-LESS&quot;&gt;&lt;a href=&quot;#2-LESS&quot; class=&quot;headerlink&quot; title=&quot;2. LESS&quot;&gt;&lt;/a&gt;2. LESS&lt;/h4&gt;&lt;p&gt;LESS (.less)。于2009年诞生，借鉴了SASS的长处，并兼容了CSS语法，使得开发者使用起来更为方便顺手，但是相比于SASS，其编程功能不够丰富，反而促使SASS进化成为了SCSS。&lt;/p&gt;
&lt;h4 id=&quot;3-Stylus&quot;&gt;&lt;a href=&quot;#3-Stylus&quot; class=&quot;headerlink&quot; title=&quot;3. Stylus&quot;&gt;&lt;/a&gt;3. Stylus&lt;/h4&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="http://yoursite.com/2021/09/09/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/axios/"/>
    <id>http://yoursite.com/2021/09/09/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/axios/</id>
    <published>2021-09-09T14:57:52.000Z</published>
    <updated>2021-09-15T10:37:27.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、axios介绍"><a href="#一、axios介绍" class="headerlink" title="一、axios介绍"></a>一、axios介绍</h2><h3 id="json-server介绍"><a href="#json-server介绍" class="headerlink" title="json-server介绍"></a>json-server介绍</h3><p>github： <a href="https://github.com/typicode/json-server">https://github.com/typicode/json-server</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><p>用来快速搭建 REST API 的工具包</p><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>github:  <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p><p>运行在浏览器和node.js,用于发送Ajax请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;http://localhost:3000/posts?title=json-server&amp;author=typicode&#x27;</span>);</span><br><span class="line">axios.post(<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;yyyy&#x27;</span>&#125;) <span class="comment">// 保存数据</span></span><br><span class="line">axios.put(<span class="string">&#x27;http://localhost:3000/comments/2&#x27;</span>, &#123;<span class="attr">body</span>: <span class="string">&#x27;yyy&#x27;</span>, postI d: <span class="number">2</span>&#125;)</span><br><span class="line">axios.delete(<span class="string">&#x27;http://localhost:3000/comments/2&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li><p>基本 promise 的异步 ajax 请求库 </p></li><li><p>浏览器端/node 端都可以使用 </p></li><li><p>支持请求／响应拦截器 </p></li><li><p>支持请求取消 </p></li><li><p>请求/响应数据转换 </p></li><li><p>批量发送多个请求</p></li></ol><h3 id="axios配置对象"><a href="#axios配置对象" class="headerlink" title="axios配置对象"></a>axios配置对象</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: &#x27;/user&#x27;,<span class="comment">//url</span></span><br><span class="line"></span><br><span class="line">  method: &#x27;get&#x27;, <span class="comment">// 请求类型</span></span><br><span class="line"></span><br><span class="line">  baseURL: &#x27;https:<span class="comment">//some-domain.com/api/&#x27;,//基础url</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//对请求参数和响应结果做预处理</span></span><br><span class="line">  transformRequest: [function (data, headers) &#123;</span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  transformResponse: [function (data) &#123;</span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">//请求头信息</span></span><br><span class="line">  headers: &#123;&#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设定url参数</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数序列化，用的少</span></span><br><span class="line">  paramsSerializer: function (params) &#123;</span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: &#x27;brackets&#x27;&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求体设置，json和参数</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#x27;Fred&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  data: &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超时时间</span></span><br><span class="line">  timeout: <span class="number">1000</span>, <span class="comment">// default is `0` (no timeout)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//跨域请求时，是否携带cookie</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求适配器</span></span><br><span class="line">  adapter: function (config) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对请求基础</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: &#x27;janedoe&#x27;,</span><br><span class="line">    password: &#x27;s00pers3cret&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  responseType: &#x27;json&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  responseEncoding: &#x27;utf8&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//胯域请求标识</span></span><br><span class="line">  xsrfCookieName: &#x27;XSRF-TOKEN&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  xsrfHeaderName: &#x27;X-XSRF-TOKEN&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上传下载的回调</span></span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// http响应体最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"> <span class="comment">// http请求体最大尺寸</span></span><br><span class="line">  maxBodyLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对响应结果的成功进行设置</span></span><br><span class="line">  validateStatus: function (status) &#123;</span><br><span class="line">    return status &gt;= 200 &amp;&amp; status &lt; 300; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最大跳转</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// socket连接，用于向docker守护进程发送信息</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户请求</span></span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代理请求，node.js</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    protocol: &#x27;https&#x27;,</span><br><span class="line">    host: &#x27;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#x27;,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: &#x27;mikeymike&#x27;,</span><br><span class="line">      password: &#x27;rapunz3l&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于取消ajax请求</span></span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解压缩</span></span><br><span class="line">  decompress: <span class="literal">true</span> <span class="comment">// default</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="axios创建实例对象"><a href="#axios创建实例对象" class="headerlink" title="axios创建实例对象"></a>axios创建实例对象</h3><ol><li><p>根据指定配置<strong>创建一个新的 axios</strong>, 也就就每个新 axios 都有自己的配置 </p></li><li><p>新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的 </p></li><li><p>为什么要设计这个语法? </p><p>(1) 需求: 项目中有<strong>部分接口需要的配置与另一部分接口需要的配置</strong>不太一 样, 如何处理 </p><p>(2) 解决: 创建 2 个新 axios, 每个都有自己特有的配置, 分别应用到不同要 求的接口请求中 </p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line"><span class="attr">baseURL</span>: <span class="string">&quot;http://api.apiopen.top&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span></span><br><span class="line">&#125;)</span><br><span class="line">request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/getJoke&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(request)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h3><ol><li><p>说明: 调用 axios()并<strong>不是立即发送 ajax 请求</strong>, 而是需要经历一个较长的流程 </p></li><li><p>流程: <strong>请求拦截器2 =&gt; 请求拦截器 1 =&gt; 发ajax请求 =&gt; 响应拦截器1 =&gt; 响应拦截器 2 =&gt; 请求的回调</strong> </p></li><li><p>注意: 此流程是<strong>通过 promise 串连</strong>起来的, 请求拦截器传递的是<strong>config</strong>, 响应 拦截器传递的是 <strong>response</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 例如给请求头添加token</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;<span class="comment">//请求拦截器失败</span></span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断请求服务器返回数据</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断请求失败原因</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><ol><li><p>基本流程 </p><p>配置 cancelToken 对象<br>缓存用于取消请求的 cancel 函数<br>在后面特定时机调用 cancel 函数取消请求<br>在错误回调中判断如果 error 是 cancel, 做相应处理 </p></li><li><p>实现功能</p><p>点击按钮, 取消某个正在请求中的请求<br>在请求一个接口前, 取消前面一个未完成的请求 </p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cancel  <span class="comment">// 用于保存取消请求的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProducts1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在准备发请求前, 取消未完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> cancel===<span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        cancel(<span class="string">&#x27;取消请求&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    axios(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:4000/products1&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.CancelToken(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123; <span class="comment">// c是用于取消当前请求的函数</span></span><br><span class="line">            <span class="comment">// 保存取消函数, 用于之后可能需要取消当前请求</span></span><br><span class="line">            cancel = c</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(</span><br><span class="line">        <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            cancel = <span class="literal">null</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求1成功了&#x27;</span>, response.data)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (axios.isCancel(error)) &#123;</span><br><span class="line">                <span class="comment">// cancel = null</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;请求1取消的错误&#x27;</span>, error.message)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 请求出错了</span></span><br><span class="line">                cancel = <span class="literal">null</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;请求1失败了&#x27;</span>, error.message)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProducts2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在准备发请求前, 取消未完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> cancel===<span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        cancel(<span class="string">&#x27;取消请求&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    axios(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:4000/products2&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.CancelToken(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123; <span class="comment">// c是用于取消当前请求的函数</span></span><br><span class="line">            <span class="comment">// 保存取消函数, 用于之后可能需要取消当前请求</span></span><br><span class="line">            cancel = c</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(</span><br><span class="line">        <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            cancel = <span class="literal">null</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求2成功了&#x27;</span>, response.data)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (axios.isCancel(error)) &#123;</span><br><span class="line">                <span class="comment">// cancel = null</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;请求2取消的错误&#x27;</span>, error.message)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 请求出错了</span></span><br><span class="line">                cancel = <span class="literal">null</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;请求2失败了&#x27;</span>, error.message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelReq</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// alert(&#x27;取消请求&#x27;)</span></span><br><span class="line">    <span class="comment">// 执行取消请求的函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> cancel === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        cancel(<span class="string">&#x27;强制取消请求&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;没有可取消的请求&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、axios源码"><a href="#二、axios源码" class="headerlink" title="二、axios源码"></a>二、axios源码</h2><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── /dist/ # 项目输出目录 </span><br><span class="line">├── /lib/ # 项目源码目录 </span><br><span class="line">│ ├── /adapters/ # 定义请求的适配器 xhr、http </span><br><span class="line">│ │ ├── http.js # 实现 http 适配器(包装 http 包) </span><br><span class="line">│ │└── xhr.js # 实现 xhr 适配器(包装 xhr 对象) </span><br><span class="line">│ ├── /cancel/ # 定义取消功能</span><br><span class="line">│ ├── /core/ # 一些核心功能 </span><br><span class="line">│ │ ├── Axios.js # axios 的核心主类 </span><br><span class="line">│ │ ├── dispatchRequest.js # 用来调用 http 请求适配器方法发送请求的函数 </span><br><span class="line">│ │ ├── InterceptorManager.js # 拦截器的管理器 </span><br><span class="line">│ │ └── settle.js # 根据 http 响应状态，改变 Promise 的状态 </span><br><span class="line">│ ├── /helpers/ # 一些辅助方法 </span><br><span class="line">│ ├── axios.js # 对外暴露接口 </span><br><span class="line">│ ├── defaults.js # axios 的默认配置 </span><br><span class="line">│ └── utils.js # 公用工具 </span><br><span class="line">├── package.json # 项目信息 </span><br><span class="line">├── index.d.ts # 配置 TypeScript 的声明文件 </span><br><span class="line">└── index.js</span><br></pre></td></tr></table></figure><h3 id="create流程"><a href="#create流程" class="headerlink" title="create流程"></a>create流程</h3><h4 id="axios的创建流程"><a href="#axios的创建流程" class="headerlink" title="axios的创建流程"></a>axios的创建流程</h4><p>通过<code>createInstance()</code>函数将传入默认配置创建一个axios对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bind = <span class="built_in">require</span>(<span class="string">&#x27;./helpers/bind&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> Axios = <span class="built_in">require</span>(<span class="string">&#x27;./core/Axios&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mergeConfig = <span class="built_in">require</span>(<span class="string">&#x27;./core/mergeConfig&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> defaults = <span class="built_in">require</span>(<span class="string">&#x27;./defaults&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create an instance of Axios</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>defaultConfig The default config for the instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Axios&#125;</span> </span>A new instance of Axios</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">defaultConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  创建Axios的实例</span></span><br><span class="line"><span class="comment">      原型对象上有一些用来发请求的方法: get()/post()/put()/delete()/request()</span></span><br><span class="line"><span class="comment">      自身上有2个重要属性: defaults/interceptors</span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> Axios(defaultConfig);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// axios和axios.create()对应的就是request函数</span></span><br><span class="line">  <span class="comment">// Axios.prototype.request.bind(context)</span></span><br><span class="line">  <span class="keyword">var</span> instance = bind(Axios.prototype.request, context); <span class="comment">// axios</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将Axios原型对象上的方法拷贝到instance上: request()/get()/post()/put()/delete()</span></span><br><span class="line">  utils.extend(instance, Axios.prototype, context); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将Axios实例对象上的属性拷贝到instance上: defaults和interceptors属性</span></span><br><span class="line">  utils.extend(instance, context);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the default instance to be exported</span></span><br><span class="line"><span class="comment">//通过配置创建axios对象</span></span><br><span class="line"><span class="keyword">var</span> axios = createInstance(defaults);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose Axios class to allow class inheritance</span></span><br><span class="line"><span class="comment">// axios 添加Axios属性，属性值为构造函数对象 </span></span><br><span class="line">axios.Axios = Axios;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Factory for creating new instances</span></span><br><span class="line"><span class="comment">// 工厂函数，用于返回创建实例对象的函数</span></span><br><span class="line">axios.create = <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">instanceConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createInstance(mergeConfig(axios.defaults, instanceConfig));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose Cancel &amp; CancelToken</span></span><br><span class="line">axios.Cancel = <span class="built_in">require</span>(<span class="string">&#x27;./cancel/Cancel&#x27;</span>);</span><br><span class="line">axios.CancelToken = <span class="built_in">require</span>(<span class="string">&#x27;./cancel/CancelToken&#x27;</span>);</span><br><span class="line">axios.isCancel = <span class="built_in">require</span>(<span class="string">&#x27;./cancel/isCancel&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose all/spread</span></span><br><span class="line">axios.all = <span class="function"><span class="keyword">function</span> <span class="title">all</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">&#125;;</span><br><span class="line">axios.spread = <span class="built_in">require</span>(<span class="string">&#x27;./helpers/spread&#x27;</span>);</span><br><span class="line"><span class="comment">//对外暴露</span></span><br><span class="line"><span class="built_in">module</span>.exports = axios;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow use of default import syntax in TypeScript</span></span><br><span class="line"><span class="built_in">module</span>.exports.default = axios;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Axios.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./../utils&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> buildURL = <span class="built_in">require</span>(<span class="string">&#x27;../helpers/buildURL&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> InterceptorManager = <span class="built_in">require</span>(<span class="string">&#x27;./InterceptorManager&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> dispatchRequest = <span class="built_in">require</span>(<span class="string">&#x27;./dispatchRequest&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mergeConfig = <span class="built_in">require</span>(<span class="string">&#x27;./mergeConfig&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Axios构造函数</span></span><br><span class="line"><span class="comment"> * Create a new instance of Axios</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>instanceConfig The default config for the instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Axios</span>(<span class="params">instanceConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将指定的config, 保存为defaults属性</span></span><br><span class="line">  <span class="built_in">this</span>.defaults = instanceConfig;</span><br><span class="line">  <span class="comment">// 将包含请求/响应拦截器管理器的对象保存为interceptors属性</span></span><br><span class="line">  <span class="built_in">this</span>.interceptors = &#123;</span><br><span class="line">    <span class="attr">request</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">    <span class="attr">response</span>: <span class="keyword">new</span> InterceptorManager()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于发请求的函数</span></span><br><span class="line"><span class="comment"> * 我们使用的axios就是此函数bind()返回的函数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Dispatch a request</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>config The config specific for this request (merged with this.defaults)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*eslint no-param-reassign:0*/</span></span><br><span class="line">  <span class="comment">// Allow for axios(&#x27;example/url&#x27;[, config]) a la fetch API</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> config === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    config = <span class="built_in">arguments</span>[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">    config.url = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config = config || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并配置</span></span><br><span class="line">  config = mergeConfig(<span class="built_in">this</span>.defaults, config);</span><br><span class="line">  <span class="comment">// 添加method配置, 默认为get</span></span><br><span class="line">  config.method = config.method ? config.method.toLowerCase() : <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  创建用于保存请求/响应拦截函数的数组</span></span><br><span class="line"><span class="comment">  数组的中间放发送请求的函数</span></span><br><span class="line"><span class="comment">  数组的左边放请求拦截器函数(成功/失败)</span></span><br><span class="line"><span class="comment">  数组的右边放响应拦截器函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后添加的请求拦截器保存在数组的前面</span></span><br><span class="line">  <span class="built_in">this</span>.interceptors.request.forEach(<span class="function"><span class="keyword">function</span> <span class="title">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.unshift(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 后添加的响应拦截器保存在数组的后面</span></span><br><span class="line">  <span class="built_in">this</span>.interceptors.response.forEach(<span class="function"><span class="keyword">function</span> <span class="title">pushResponseInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.push(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过promise的then()串连起所有的请求拦截器/请求方法/响应拦截器</span></span><br><span class="line">  <span class="keyword">while</span> (chain.length) &#123;</span><br><span class="line">    promise = promise.then(chain.shift(), chain.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回用来指定我们的onResolved和onRejected的promise</span></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来得到带query参数的url</span></span><br><span class="line">Axios.prototype.getUri = <span class="function"><span class="keyword">function</span> <span class="title">getUri</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config = mergeConfig(<span class="built_in">this</span>.defaults, config);</span><br><span class="line">  <span class="keyword">return</span> buildURL(config.url, config.params, config.paramsSerializer).replace(<span class="regexp">/^\?/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Provide aliases for supported request methods</span></span><br><span class="line">utils.forEach([<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>], <span class="function"><span class="keyword">function</span> <span class="title">forEachMethodNoData</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*eslint func-names:0*/</span></span><br><span class="line">  Axios.prototype[method] = <span class="function"><span class="keyword">function</span>(<span class="params">url, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(utils.merge(config || &#123;&#125;, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">url</span>: url</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">utils.forEach([<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>], <span class="function"><span class="keyword">function</span> <span class="title">forEachMethodWithData</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*eslint func-names:0*/</span></span><br><span class="line">  Axios.prototype[method] = <span class="function"><span class="keyword">function</span>(<span class="params">url, data, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(utils.merge(config || &#123;&#125;, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">url</span>: url,</span><br><span class="line">      <span class="attr">data</span>: data</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Axios;</span><br></pre></td></tr></table></figure><h4 id="模拟实现axios"><a href="#模拟实现axios" class="headerlink" title="模拟实现axios"></a>模拟实现axios</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Axios</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">this</span>.default = config;</span><br><span class="line">    <span class="built_in">this</span>.intercepters = &#123;</span><br><span class="line">        <span class="attr">request</span>:&#123;&#125;，</span><br><span class="line">        <span class="attr">response</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型添加相关方法</span></span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;发送ajax请求&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Axios.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.request(&#123;<span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">Axios.prototype.post = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.request(&#123;<span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//实例化一个对象</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">new</span> Axios(conif);<span class="comment">//context.get(),context.post() 不能当做函数使用 </span></span><br><span class="line">    <span class="comment">//创建请求对象函数</span></span><br><span class="line">    <span class="keyword">let</span> instance = Axios.protoype.request.bind(context);<span class="comment">//instance是一个函数，并且可以 instance(&#123;&#125;) 此时instance不能instance.get()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将Axios.prototype对象中的方法添加到instance实例对象中</span></span><br><span class="line">    <span class="built_in">Object</span>.key(Axios.prototype).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);</span><br><span class="line">        instance[key] = Axios.prototype[key].bind(context);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//为instance函数对象添加 default 与 interceptors</span></span><br><span class="line">    <span class="built_in">Object</span>.key(context).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        instance[key] = context[key] </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> axios = createInstance();</span><br><span class="line">axios.get(&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="Axios发送请求过程详解"><a href="#Axios发送请求过程详解" class="headerlink" title="Axios发送请求过程详解"></a>Axios发送请求过程详解</h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于发送请求 </span></span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*eslint no-param-reassign:0*/</span></span><br><span class="line">  <span class="comment">// Allow for axios(&#x27;example/url&#x27;[, config]) a la fetch API</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> config === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    config = <span class="built_in">arguments</span>[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">    config.url = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config = config || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并配置</span></span><br><span class="line">  config = mergeConfig(<span class="built_in">this</span>.defaults, config);</span><br><span class="line">  <span class="comment">// 添加method配置, 默认为get</span></span><br><span class="line">  config.method = config.method ? config.method.toLowerCase() : <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  创建用于保存请求/响应拦截函数的数组</span></span><br><span class="line"><span class="comment">  数组的中间放发送请求的函数</span></span><br><span class="line"><span class="comment">  数组的左边放请求拦截器函数(成功/失败)</span></span><br><span class="line"><span class="comment">  数组的右边放响应拦截器函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">   <span class="comment">//创建拦截器中间件，第一个参数用于发送请求，第二个参数用于补位</span></span><br><span class="line">  <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">  <span class="comment">//创建一个成功的promise，且成功的值为合并后的请求配置</span></span><br><span class="line">  <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后添加的请求拦截器保存在数组的前面</span></span><br><span class="line">  <span class="built_in">this</span>.interceptors.request.forEach(<span class="function"><span class="keyword">function</span> <span class="title">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.unshift(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 后添加的响应拦截器保存在数组的后面</span></span><br><span class="line">  <span class="built_in">this</span>.interceptors.response.forEach(<span class="function"><span class="keyword">function</span> <span class="title">pushResponseInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.push(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过promise的then()串连起所有的请求拦截器/请求方法/响应拦截器</span></span><br><span class="line">  <span class="keyword">while</span> (chain.length) &#123;</span><br><span class="line">    <span class="comment">//依次取出promise的回调函数并执行</span></span><br><span class="line">    promise = promise.then(chain.shift(), chain.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回用来指定我们的onResolved和onRejected的promise</span></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>dispatchRequest.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwIfCancellationRequested</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">    config.cancelToken.throwIfRequested();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dispatch a request to the server using the configured adapter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>config The config that is to be used for the request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&#125;</span> </span>The Promise to be fulfilled</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  如果请求已经被取消, 直接抛出异常</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  throwIfCancellationRequested(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  合并config中的baseURL和url</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (config.baseURL &amp;&amp; !isAbsoluteURL(config.url)) &#123;</span><br><span class="line">    config.url = combineURLs(config.baseURL, config.url);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ensure headers exist</span></span><br><span class="line">  config.headers = config.headers || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  对config中的data进行必要的转换处理</span></span><br><span class="line"><span class="comment">  设置相应的Content-Type请求头</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  config.data = transformData(</span><br><span class="line">    config.data,</span><br><span class="line">    config.headers,</span><br><span class="line">    config.transformRequest</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  整合config中所有的header</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  config.headers = utils.merge(</span><br><span class="line">    config.headers.common || &#123;&#125;,</span><br><span class="line">    config.headers[config.method] || &#123;&#125;,</span><br><span class="line">    config.headers || &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  utils.forEach(</span><br><span class="line">    [<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;common&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cleanHeaderConfig</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">delete</span> config.headers[method];</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adapter = config.adapter || defaults.adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> adapter(config).then(<span class="function"><span class="keyword">function</span> <span class="title">onAdapterResolution</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    throwIfCancellationRequested(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    对response中还没有解析的data数据进行解析</span></span><br><span class="line"><span class="comment">    json字符串解析为js对象/数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    response.data = transformData(</span><br><span class="line">      response.data,</span><br><span class="line">      response.headers,</span><br><span class="line">      config.transformResponse</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">onAdapterRejection</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isCancel(reason)) &#123;</span><br><span class="line">      throwIfCancellationRequested(config);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Transform response data</span></span><br><span class="line">      <span class="keyword">if</span> (reason &amp;&amp; reason.response) &#123;</span><br><span class="line">        reason.response.data = transformData(</span><br><span class="line">          reason.response.data,</span><br><span class="line">          reason.response.headers,</span><br><span class="line">          config.transformResponse</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(reason);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="模拟实现axios发送请求"><a href="#模拟实现axios发送请求" class="headerlink" title="模拟实现axios发送请求"></a>模拟实现axios发送请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Axios</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">&#125;</span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="comment">//创建一个promise对象</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line">    <span class="comment">//声明一个数组</span></span><br><span class="line">    <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>];<span class="comment">//undefined占位</span></span><br><span class="line">    <span class="comment">//循环处理</span></span><br><span class="line">    <span class="comment">//调用then方法指定回调</span></span><br><span class="line">    <span class="keyword">let</span> result = promise.then(chains[<span class="number">0</span>], chains[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.dispatchRequest</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用适配器发送请求</span></span><br><span class="line">    <span class="keyword">return</span> xhrAdapter(config).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        <span class="comment">//对响应结果做处理</span></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.adapter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xhrAdapter</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;xhrAdapter 函数执行&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//发送 AJAX请求</span></span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        xhr.open(config.method, config.url);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        xhr.send();</span><br><span class="line">        <span class="comment">//绑定事件</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="comment">//判断成功条件</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; x.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                    <span class="comment">//成功的状态</span></span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        <span class="comment">//配置</span></span><br><span class="line">                        <span class="attr">config</span>:config,</span><br><span class="line">                        <span class="comment">//响应体</span></span><br><span class="line">                        <span class="attr">data</span>: xhr.response,</span><br><span class="line">                        <span class="comment">//响应头，axios对其做了格式化</span></span><br><span class="line">                        <span class="attr">headers</span>: xhr.getAllResponseHeaders(),</span><br><span class="line">                        <span class="comment">//xhr请求对象</span></span><br><span class="line">                        <span class="attr">request</span>: xhr,</span><br><span class="line">                        <span class="comment">//响应状态码</span></span><br><span class="line">                        <span class="attr">status</span>: xhr.status,</span><br><span class="line">                        <span class="comment">//响应状态字符串</span></span><br><span class="line">                        <span class="attr">statusText</span>: xhr.statusText</span><br><span class="line">                    &#125;);                        </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//失败的状态</span></span><br><span class="line">                    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求失败，失败的状态码为&#x27;</span>+xhr.status));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.创建axios函数</span></span><br><span class="line"><span class="keyword">let</span> axios = Axios.prototype.request.bind(<span class="literal">null</span>);</span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http:localhost:3000/post&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h4><p>use方法只是把回调保存在了request和response对象上的handlers上，当创建Axios对象时，把请求拦截器放在数组最前面，响应拦截器放在数组最后面，最终通过循环的方式以跳板的形式（一组一组的放，响应执行响应，请求执行请求）。</p><p>requset中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 后添加的请求拦截器保存在数组的前面</span></span><br><span class="line"><span class="built_in">this</span>.interceptors.request.forEach(<span class="function"><span class="keyword">function</span> <span class="title">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">   chain.unshift(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">&#125;);</span><br><span class="line">  <span class="comment">// 后添加的响应拦截器保存在数组的后面</span></span><br><span class="line"><span class="built_in">this</span>.interceptors.response.forEach(<span class="function"><span class="keyword">function</span> <span class="title">pushResponseInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">  chain.push(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 通过promise的then()串连起所有的请求拦截器/请求方法/响应拦截器</span></span><br><span class="line"><span class="keyword">while</span> (chain.length) &#123;</span><br><span class="line">    promise = promise.then(chain.shift(), chain.shift());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InterceptorManager.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InterceptorManager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用来保存拦截器函数的数组, 数组中每个都是对象, 对象中包含fulfilled/rejected方法</span></span><br><span class="line">  <span class="built_in">this</span>.handlers = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a new interceptor to the stack</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>fulfilled The function to handle `then` for a `Promise`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>rejected The function to handle `reject` for a `Promise`</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Number&#125;</span> </span>An ID used to remove interceptor later</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">InterceptorManager.prototype.use = <span class="function"><span class="keyword">function</span> <span class="title">use</span>(<span class="params">fulfilled, rejected</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加成功和失败的拦截器函数</span></span><br><span class="line">  <span class="built_in">this</span>.handlers.push(&#123;</span><br><span class="line">    <span class="attr">fulfilled</span>: fulfilled,</span><br><span class="line">    <span class="attr">rejected</span>: rejected</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 返回拦截器对应的ID(也就是下标)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.handlers.length - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove an interceptor from the stack</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>id The ID that was returned by `use`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">InterceptorManager.prototype.eject = <span class="function"><span class="keyword">function</span> <span class="title">eject</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 移除指定id对应的拦截器</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.handlers[id]) &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers[id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Iterate over all the registered interceptors</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method is particularly useful for skipping over any</span></span><br><span class="line"><span class="comment"> * interceptors that may have become `null` calling `eject`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>fn The function to call for each interceptor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">InterceptorManager.prototype.forEach = <span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历处理所有保存的拦截器</span></span><br><span class="line">  utils.forEach(<span class="built_in">this</span>.handlers, <span class="function"><span class="keyword">function</span> <span class="title">forEachHandler</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h !== <span class="literal">null</span>) &#123;</span><br><span class="line">      fn(h);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = InterceptorManager;</span><br></pre></td></tr></table></figure><h4 id="模拟实现拦截器"><a href="#模拟实现拦截器" class="headerlink" title="模拟实现拦截器"></a>模拟实现拦截器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Axios</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">    <span class="built_in">this</span>.interceptors = &#123;</span><br><span class="line">        <span class="attr">request</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">        <span class="attr">response</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截器管理器的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InterceptorManager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InterceptorManager.prototype.use = <span class="function"><span class="keyword">function</span> (<span class="params">fulfilled, rejected</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers.push(&#123;</span><br><span class="line">        fulfilled,</span><br><span class="line">        rejected</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="comment">//创建一个promise对象</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line">    <span class="comment">//声明一个数组</span></span><br><span class="line">    <span class="comment">//undefined占位,因为dispatchRequest永远返回一个成功的promise</span></span><br><span class="line">    <span class="comment">//保证有偶数个的方法，两两执行作为成功和失败的方法。</span></span><br><span class="line">    <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理拦截器</span></span><br><span class="line">    <span class="comment">//将请求拦截器的回调压入chains的前面</span></span><br><span class="line">    <span class="built_in">this</span>.interceptors.request.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        chains.unshift(item.fulfilled, item.rejected);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//将响应拦截器的回调压入chains的前面</span></span><br><span class="line">    <span class="built_in">this</span>.interceptors.response.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        chains.push(item.fulfilled, item.rejected);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(chains);</span><br><span class="line">    <span class="comment">//循环处理</span></span><br><span class="line">    <span class="comment">//调用then方法指定回调</span></span><br><span class="line">    <span class="keyword">while</span> (chains.length) &#123;</span><br><span class="line">        promise = promise.then(chains.shift(), chains.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用then方法指定回调</span></span><br><span class="line">    <span class="keyword">let</span> result = promise.then(chains[<span class="number">0</span>], chains[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.dispatchRequest,简化了发送直接返回一个成功的promise对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用适配器发送请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;发送请求&quot;</span>);</span><br><span class="line">        resolve(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建实例</span></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Axios(&#123;&#125;);</span><br><span class="line"><span class="comment">//将context属性config interceptors添加至axios函数对象身上</span></span><br><span class="line"><span class="comment">//4.创建axios函数</span></span><br><span class="line"><span class="keyword">let</span> axios = Axios.prototype.request.bind(context);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(context).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    axios[key] = context[key];</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;请求拦截器&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cofnig;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">success</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;响应拦截器&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* console.dir(axios); */</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http:localhost:3000/post&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="axios取消请求工作原理"><a href="#axios取消请求工作原理" class="headerlink" title="axios取消请求工作原理"></a>axios取消请求工作原理</h3><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><p>创建对象时有一个<code>config:cancelToken</code>这个函数的状态只要已发送改变，就会取消请求，axios将取消函数暴露出来，二在xhr中会判断是否有这个属性，如果这个promise状态改变之后，就会停止ajax的发送。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cancel = c;</span><br><span class="line"><span class="keyword">let</span> cancelToken = <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>CancelToken.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Cancel = <span class="built_in">require</span>(<span class="string">&#x27;./Cancel&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于取消请求的对象构造函数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * A `CancelToken` is an object that can be used to request cancellation of an operation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>executor The executor function.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CancelToken</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;executor must be a function.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为取消请求准备一个promise对象, 并保存resolve函数</span></span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="built_in">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">promiseExecutor</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//将修改promise状态的函数暴露出去，会改变promise的状态，resolvePromise()</span></span><br><span class="line">    resolvePromise = resolve;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存当前token对象</span></span><br><span class="line">  <span class="keyword">var</span> token = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 立即执行接收的执行器函数, 并传入用于取消请求的cancel函数</span></span><br><span class="line">  executor(<span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果token中有reason了, 说明请求已取消</span></span><br><span class="line">    <span class="keyword">if</span> (token.reason) &#123;</span><br><span class="line">      <span class="comment">// Cancellation has already been requested</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将token的reason指定为一个Cancel对象</span></span><br><span class="line">    token.reason = <span class="keyword">new</span> Cancel(message);</span><br><span class="line">    <span class="comment">// 将取消请求的promise指定为成功, 值为reason</span></span><br><span class="line">    resolvePromise(token.reason);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果请求已经被取消, 抛出reason也就是Cancel对象的异常</span></span><br><span class="line"><span class="comment"> * Throws a `Cancel` if cancellation has been requested.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CancelToken.prototype.throwIfRequested = <span class="function"><span class="keyword">function</span> <span class="title">throwIfRequested</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.reason) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">this</span>.reason;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个包含token对象和cancel函数的对象, 并添加给CancelToken</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Returns an object that contains a new `CancelToken` and a function that, when called,</span></span><br><span class="line"><span class="comment"> * cancels the `CancelToken`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CancelToken.source = <span class="function"><span class="keyword">function</span> <span class="title">source</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cancel;</span><br><span class="line">  <span class="keyword">var</span> token = <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">token</span>: token,</span><br><span class="line">    <span class="attr">cancel</span>: cancel</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CancelToken;</span><br></pre></td></tr></table></figure><p>在xhr.js中有这样一段代码 xhr.about</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果配置了cancelToken</span></span><br><span class="line"><span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">    <span class="comment">// 指定用于中断请求的回调函数,当promise状态改变之后会调用</span></span><br><span class="line">    config.cancelToken.promise.then(<span class="function"><span class="keyword">function</span> <span class="title">onCanceled</span>(<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 中断请求 </span></span><br><span class="line">        request.abort();</span><br><span class="line">        <span class="comment">// 让请求的promise失败</span></span><br><span class="line">        reject(cancel);</span><br><span class="line">        <span class="comment">// Clean up request</span></span><br><span class="line">        request = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟实现取消请求"><a href="#模拟实现取消请求" class="headerlink" title="模拟实现取消请求"></a>模拟实现取消请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Axios</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">&#125;</span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="comment">//创建一个promise对象</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line">    <span class="comment">//声明一个数组</span></span><br><span class="line">    <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>];<span class="comment">//undefined占位</span></span><br><span class="line">    <span class="comment">//循环处理</span></span><br><span class="line">    <span class="comment">//调用then方法指定回调</span></span><br><span class="line">    <span class="keyword">let</span> result = promise.then(chains[<span class="number">0</span>], chains[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> dispatchRequest(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.dispatchRequest</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用适配器发送请求</span></span><br><span class="line">    <span class="keyword">return</span> xhrAdapter(config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.adapter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xhrAdapter</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;xhrAdapter 函数执行&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//发送 AJAX请求</span></span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        xhr.open(config.method, config.url);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        xhr.send();</span><br><span class="line">        <span class="comment">//绑定事件</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="comment">//判断成功条件</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; x.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                    <span class="comment">//成功的状态</span></span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        <span class="comment">//配置</span></span><br><span class="line">                        <span class="attr">config</span>:config,</span><br><span class="line">                        <span class="comment">//响应体</span></span><br><span class="line">                        <span class="attr">data</span>: xhr.response,</span><br><span class="line">                        <span class="comment">//响应头，axios对其做了格式化</span></span><br><span class="line">                        <span class="attr">headers</span>: xhr.getAllResponseHeaders(),</span><br><span class="line">                        <span class="comment">//xhr请求对象</span></span><br><span class="line">                        <span class="attr">request</span>: xhr,</span><br><span class="line">                        <span class="comment">//响应状态码</span></span><br><span class="line">                        <span class="attr">status</span>: xhr.status,</span><br><span class="line">                        <span class="comment">//响应状态字符串</span></span><br><span class="line">                        <span class="attr">statusText</span>: xhr.statusText</span><br><span class="line">                    &#125;);                        </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//失败的状态</span></span><br><span class="line">                    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求失败，失败的状态码为&#x27;</span>+xhr.status));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关于取消请求</span></span><br><span class="line">        <span class="keyword">if</span>(config.cancelToken)&#123;</span><br><span class="line">            <span class="comment">//对cancelToken对象上的promise对象指定成功的回调</span></span><br><span class="line">            config.cancelToken.promise.then(<span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">                xhr.abort();</span><br><span class="line">            &#125;) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.创建axios函数</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> Axios(&#123;&#125;)</span><br><span class="line"><span class="keyword">let</span> axios = Axios.prototype.request.bind(context);</span><br><span class="line"><span class="comment">//CancelToken构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CancelToken</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//声明一个变量</span></span><br><span class="line">    <span class="keyword">var</span> resolvePormise;</span><br><span class="line">    <span class="built_in">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//将resolve赋值给resolvePormise</span></span><br><span class="line">        resolvePormise = resolve;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//调用executor函数,把执行的权限给executor函数</span></span><br><span class="line">    executor(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//执行resolvePromise函数</span></span><br><span class="line">        resolvePormise();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> CancelToken = <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http:localhost:3000/post&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><h3 id="1-axios-与-Axios-的关系"><a href="#1-axios-与-Axios-的关系" class="headerlink" title="1.axios 与 Axios 的关系?"></a>1.axios 与 Axios 的关系?</h3><ol><li>从语法上来说: axios  不是 Axios 的实例 </li><li>从功能上来说: axios 是 Axios 的实例 </li><li>axios 是 Axios.prototype.request 函数 bind()返回的函数</li><li>axios 作为对象有 Axios 原型对象上的所有方法, 有 Axios 对象上所有属性 </li></ol><h3 id="2-instance-与-axios-的区别"><a href="#2-instance-与-axios-的区别" class="headerlink" title="2.instance 与 axios 的区别?"></a>2.instance 与 axios 的区别?</h3><ol><li>相同:<ul><li>都是一个能发任意请求的函数: request(config) </li><li>都有发特定请求的各种方法: get()/post()/put()/delete()</li><li>都有默认配置和拦截器的属性: defaults/interceptors </li></ul></li><li>不同: <ul><li>默认匹配的值很可能不一样 </li><li>instance <strong>没有 axios 后面添加的一些方法</strong>: create()/CancelToken()/all()</li></ul></li></ol><h3 id="3-axios-运行的整体流程"><a href="#3-axios-运行的整体流程" class="headerlink" title="3.axios 运行的整体流程?"></a>3.axios 运行的整体流程?</h3><img src="/2021/09/09/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/axios/aixos运行的整体流程.png" alt="image-20210915181317823" style="zoom:67%;"><ol><li><p><strong>整体流程</strong>: request(config) ==&gt; dispatchRequest(config) ==&gt; xhrAdapter(config)</p></li><li><p><strong>request(config)</strong>: 将请求拦截器 / dispatchRequest() / 响应拦截器 通过 promise 链串连起来, 返回 promise </p></li><li><p><strong>dispatchRequest(config)</strong>: 转换请求数据 ===&gt; 调用 xhrAdapter()发请求 ===&gt; 请求返回后转换响应数 据. 返回 promise </p></li><li><p><strong>xhrAdapter(config)</strong>: 创建 XHR 对象, 根据 config 进行相应设置, 发送特定请求, 并接收响应数据, 返回 promise</p></li></ol><h3 id="4-axios-的请求-响应拦截器是什么"><a href="#4-axios-的请求-响应拦截器是什么" class="headerlink" title="4.axios 的请求/响应拦截器是什么?"></a>4.axios 的请求/响应拦截器是什么?</h3><p><img src="/2021/09/09/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/axios/%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="image-20210915181528784"></p><ol><li><p>请求拦截器: </p><ul><li>在真正发送请求前执行的回调函数 </li><li>可以<strong>对请求进行检查或配置进行特定处理</strong> </li><li>成功的回调函数, 传递的默认是 <code>config</code>(也必须是) </li><li>失败的回调函数, 传递的默认是 <code>error</code> </li></ul></li><li><p>响应拦截器</p><ul><li>在请求得到响应后执行的回调函数 </li><li>可以<strong>对响应数据进行特定处理</strong> </li><li>成功的回调函数, 传递的默认是 <code>response</code> </li><li>失败的回调函数, 传递的默认是 <code>error</code></li></ul></li></ol><h3 id="5-axios-的请求-响应数据转换器是什么"><a href="#5-axios-的请求-响应数据转换器是什么" class="headerlink" title="5.axios 的请求/响应数据转换器是什么?"></a>5.axios 的请求/响应数据转换器是什么?</h3><ol><li><p>请求转换器: 对请求头和请求体数据进行特定处理的函数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (utils.isObject(data)) &#123; </span><br><span class="line">    setContentTypeIfUnset(headers, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>); <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>响应转换器: 将响应体 json 字符串解析为 js 对象或数组的函数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.data = <span class="built_in">JSON</span>.parse(response.data)</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-response-的整体结构"><a href="#6-response-的整体结构" class="headerlink" title="6.response 的整体结构"></a>6.response 的整体结构</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; data, status, statusText, headers, config, request &#125;</span><br></pre></td></tr></table></figure><h3 id="7-error-的整体结构"><a href="#7-error-的整体结构" class="headerlink" title="7.error 的整体结构"></a>7.error 的整体结构</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; message,response, request, &#125;</span><br></pre></td></tr></table></figure><h3 id="8-如何取消未完成的请求"><a href="#8-如何取消未完成的请求" class="headerlink" title="8.如何取消未完成的请求?"></a>8.如何取消未完成的请求?</h3><ol><li>当配置了 cancelToken 对象时, 保存 cancel 函数<ul><li>创建一个用于将来中断请求的 cancelPromise </li><li>并定义了一个用于取消请求的 cancel 函数 </li><li>将 cancel 函数传递出来</li></ul></li><li>调用 cancel()取消请求 <ul><li>执行 cancel函数, 传入错误信息 message</li><li>内部会让 cancelPromise 变为成功, 且成功的值为一个 Cancel 对象</li><li>在 cancelPromise 的成功回调中中断请求, 并让发请求的 proimse 失败, 失败的 reason 为 Cancel对象</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、axios介绍&quot;&gt;&lt;a href=&quot;#一、axios介绍&quot; class=&quot;headerlink&quot; title=&quot;一、axios介绍&quot;&gt;&lt;/a&gt;一、axios介绍&lt;/h2&gt;&lt;h3 id=&quot;json-server介绍&quot;&gt;&lt;a href=&quot;#json-server介绍&quot; class=&quot;headerlink&quot; title=&quot;json-server介绍&quot;&gt;&lt;/a&gt;json-server介绍&lt;/h3&gt;&lt;p&gt;github： &lt;a href=&quot;https://github.com/typicode/json-server&quot;&gt;https://github.com/typicode/json-server&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g json-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用来快速搭建 REST API 的工具包&lt;/p&gt;
&lt;h3 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h3&gt;&lt;p&gt;github:  &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;https://github.com/axios/axios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行在浏览器和node.js,用于发送Ajax请求&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;axios.get(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:3000/posts?title=json-server&amp;amp;author=typicode&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.post(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:3000/posts&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;xxx&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;author&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;yyyy&amp;#x27;&lt;/span&gt;&amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 保存数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.put(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:3000/comments/2&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;attr&quot;&gt;body&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;yyy&amp;#x27;&lt;/span&gt;, postI d: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.delete(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:3000/comments/2&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基本 promise 的异步 ajax 请求库 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器端/node 端都可以使用 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持请求／响应拦截器 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持请求取消 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请求/响应数据转换 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;批量发送多个请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://yoursite.com/2021/09/08/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/es6/Promise/"/>
    <id>http://yoursite.com/2021/09/08/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/es6/Promise/</id>
    <published>2021-09-08T13:19:42.000Z</published>
    <updated>2021-09-15T10:34:51.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步编程是什么"><a href="#异步编程是什么" class="headerlink" title="异步编程是什么"></a>异步编程是什么</h2><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><ul><li>fs 文件操作  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).readFile(<span class="string">&#x27;./index.html&#x27;</span>, <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li>数据库操作</li><li>AJAX <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li>定时器 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="为什么要用-Promise"><a href="#为什么要用-Promise" class="headerlink" title="为什么要用 Promise"></a><strong>为什么要用</strong> Promise</h3><p><strong>1.2.1.</strong> <strong>指定回调函数的方式更加灵活</strong></p><ol><li><p>旧的: 必须在启动异步任务前指定</p></li><li><p>promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给<strong>promise对象绑定回调函数</strong>(甚至可以在异步任务结束后指定/多个) </p></li></ol><p><strong>1.2.2.</strong> <strong>支持链式调用</strong>, <strong>可以解决回调地狱问题</strong></p><ol><li><p>什么是回调地狱? 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</p></li><li><p>回调地狱的缺点? </p><ul><li>不便于阅读</li><li>不便于异常处理</li></ul></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-promise实现对定时器的封装。"><a href="#1-promise实现对定时器的封装。" class="headerlink" title="1.promise实现对定时器的封装。"></a>1.promise实现对定时器的封装。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">crossorigin</span>=<span class="string">&#x27;anonymous&#x27;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>Promise 初体验<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击抽奖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//生成随机数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">rand</span>(<span class="params">m,n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * (n-m+<span class="number">1</span>)) + m-<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            点击按钮,  1s 后显示是否中奖(30%概率中奖)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                若中奖弹出    恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                若未中奖弹出  再接再厉</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//绑定单击事件</span></span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定时器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// setTimeout(() =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     //30%  1-100  1 2 30</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     //获取从1 - 100的一个随机数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     let n = rand(1, 100);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     //判断</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     if(n &lt;= 30)&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         alert(&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券&#x27;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;else&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         alert(&#x27;再接再厉&#x27;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;, 1000);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//Promise 形式实现</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// resolve 解决  函数类型的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// reject  拒绝  函数类型的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//30%  1-100  1 2 30</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//获取从1 - 100的一个随机数</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> n = rand(<span class="number">1</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//判断</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(n &lt;= <span class="number">30</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        resolve(n); <span class="comment">// 将 promise 对象的状态设置为 『成功』</span></span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        reject(n); <span class="comment">// 将 promise 对象的状态设置为 『失败』</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(p);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//调用 then 方法</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// value 值</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// reason 理由</span></span></span><br><span class="line"><span class="javascript">            p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 &#x27;</span> + value);</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;再接再厉, 您的号码为 &#x27;</span> + reason);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-实现对读取文件函数的封装"><a href="#2-实现对读取文件函数的封装" class="headerlink" title="2.实现对读取文件函数的封装"></a>2.实现对读取文件函数的封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装一个函数 mineReadFile 读取文件内容</span></span><br><span class="line"><span class="comment"> * 参数:  path  文件路径</span></span><br><span class="line"><span class="comment"> * 返回:  promise 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mineReadFile</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).readFile(path, <span class="function">(<span class="params">err, data</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">            <span class="comment">//成功</span></span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mineReadFile(<span class="string">&#x27;./resource/content.txt&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//输出文件内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-util-promisify方法"><a href="#3-util-promisify方法" class="headerlink" title="3-util.promisify方法"></a>3-util.promisify方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * util.promisify 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//引入 util 模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//返回一个新的函数</span></span><br><span class="line"><span class="keyword">let</span> mineReadFile = util.promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line">mineReadFile(<span class="string">&#x27;./resource/content.txt&#x27;</span>).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-封装getAjax操作"><a href="#4-封装getAjax操作" class="headerlink" title="4.封装getAjax操作"></a>4.封装getAjax操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise封装AJAX操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 封装一个函数 sendAJAX 发送 GET AJAX 请求</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 参数   URL</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 返回结果 Promise 对象</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sendAJAX</span>(<span class="params">url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                xhr.open(<span class="string">&quot;GET&quot;</span>, url);</span></span><br><span class="line"><span class="javascript">                xhr.send();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//处理结果</span></span></span><br><span class="line"><span class="javascript">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//判断成功</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//成功的结果</span></span></span><br><span class="line"><span class="javascript">                            resolve(xhr.response);</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                            reject(xhr.status);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">        sendAJAX(<span class="string">&#x27;https://api.apiopen.top/getJok&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.warn(reason);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Promise的理解"><a href="#Promise的理解" class="headerlink" title="Promise的理解"></a>Promise的理解</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><h4 id="Promise-的状态"><a href="#Promise-的状态" class="headerlink" title="Promise 的状态"></a>Promise 的状态</h4><p>实例对象中的一个属性 『<code>PromiseState</code>』</p><ul><li>pending  未决定的</li><li>resolved / fullfilled  成功</li><li>rejected  失败</li></ul><ol><li><p>pending 变为 resolved</p></li><li><p>pending 变为 rejected</p></li></ol><p>说明: 只有这 2 种, 且一个 promise 对象<strong>只能改变一次</strong>， 无论变为成功还是失败, <strong>都会有一个结果数据</strong>，成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</p><h4 id="Promise-对象的值"><a href="#Promise-对象的值" class="headerlink" title="Promise 对象的值"></a>Promise 对象的值</h4><p>实例对象中的另一个属性 『PromiseResult』<br>保存着异步任务『成功/失败』的结果</p><ul><li>resolve</li><li>reject </li></ul><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><p><img src="/2021/09/08/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/es6/Promise/Promise%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="Promise执行流程"></p><h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h3><ol><li><p>Promise 构造函数: Promise (excutor) {}</p><p>(1) executor 函数: 执行器 (resolve, reject) =&gt; {} </p><p>(2) resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {}</p><p>(3) reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {}</p></li></ol><p>说明: executor 会在 Promise 内部立即<strong>同步调用</strong>,异步操作在<strong>执行器中执行</strong></p><ol start="2"><li><p><code>Promise.prototype.then</code> 方法: (onResolved, onRejected) =&gt; {}</p><p>(1) onResolved 函数: 成功的回调函数 (value) =&gt; {}</p><p>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p></li></ol><p>说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调返回一个新的 promise 对象</p><ol start="3"><li><p><code>Promise.prototype.catch</code> 方法: (onRejected) =&gt; {}</p><p>(1) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p></li></ol><p>说明: <strong>then()的语法糖</strong>, 相当于: then(undefined, onRejected)</p><ol start="4"><li><p><code>Promise.resolve</code> 方法: (value) =&gt; {}</p><p>(1) value: 成功的数据或 promise 对象</p></li></ol><p>说明: <strong>返回一个成功/失败的 promise 对象</strong></p><ol start="5"><li><p><code>Promise.reject</code> 方法: (reason) =&gt; {}</p><p>(1) reason: 失败的原因</p></li></ol><p>说明: <strong>返回一个失败的 promise 对象</strong></p><ol start="6"><li><p><code>Promise.all</code> 方法: (promises) =&gt; {}</p><p>(1) promises: 包含 n 个 promise 的数组</p></li></ol><p>说明: 返回一个新的 promise, <strong>只有所有的 promise 都成功才成功, 只要有一个失败了就直接失败</strong></p><ol start="7"><li><p><code>Promise.race</code> 方法: (promises) =&gt; {}</p><p>(1) promises: 包含 n 个 promise 的数组</p></li></ol><p>说明: 返回一个新的 promise, <strong>第一个完成的 promise 的结果状态就是最终的结果状态</strong> </p><h3 id="几个关键问题"><a href="#几个关键问题" class="headerlink" title="几个关键问题"></a>几个关键问题</h3><ol><li><p>如何改变 promise 的状态?</p><ul><li><code>resolve(value)</code>: 如果当前是 pending 就会变为 resolved</li><li><code>reject(reason)</code>: 如果当前是 pending 就会变为 rejected</li><li>抛出异常: 如果当前是 pending 就会变为 rejected</li></ul></li><li><p>一个 promise 指定多个成功/失败回调函数, 都会调用吗? </p><ul><li>当 promise <strong>改变为对应状态时都会调用</strong></li></ul></li><li><p>改变 promise 状态和指定回调函数谁先谁后?</p><ul><li>都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</li><li>如何<strong>先改状态再指定回调</strong>? <ul><li>在执行器中直接调用 resolve()/reject()</li><li>延迟更长时间才调用 then()</li></ul></li><li>什么时候才能得到数据? <ul><li>如果先指定的回调, <strong>那当状态发生改变时, 回调函数就会调用</strong>, 得到数据</li><li>如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ul></li></ul></li><li><p>promise.then()返回的新 promise 的结果状态由什么决定?</p><ul><li>简单表达: 由 then()指定的<strong>回调函数执行的结果决定</strong></li><li>详细表达: <ul><li>如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</li><li>如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</li><li>如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li></ul></li></ul></li><li><p>promise 如何串连多个操作任务?</p><ul><li>promise 的 then()返回一个新的 promise, 可以开成 then()的链式调用</li><li>通过 <strong>then 的链式调用串连多个同步/异步任务</strong></li></ul></li><li><p>promise 异常传透?</p><ul><li>当使用 promise 的 then 链式调用时, 可以<strong>在最后指定失败的回调,</strong> </li><li>前面任何操作出了异常, 都会传到最后失败的回调中处理</li></ul></li><li><p>中断 promise 链?</p><ul><li>当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</li><li>办法: 在回调函数中<strong>返回一个 pendding 状态的 promise 对象</strong></li></ul></li></ol><h2 id="自定义-手写-Promise"><a href="#自定义-手写-Promise" class="headerlink" title="自定义(手写)Promise"></a>自定义(手写)Promise</h2><h3 id="定义整体结构"><a href="#定义整体结构" class="headerlink" title="定义整体结构"></a>定义整体结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自定义 Promise</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">window</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Promise 构造函数</span></span><br><span class="line"><span class="comment">excutor: 内部同步执行的函数 (resolve, reject) =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为 promise 指定成功/失败的回调函数</span></span><br><span class="line"><span class="comment">函数的返回值是一个新的 promise 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为 promise 指定失败的回调函数</span></span><br><span class="line"><span class="comment">是 then(null, onRejected)的语法糖</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个指定了成功 value 的 promise 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个指定了失败 reason 的 promise 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个 promise, 只有 promises 中所有 promise 都成功时, 才最终成功, 只要有一个失败就直接</span></span><br><span class="line"><span class="comment">失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个 promise， 一旦某个 promise 解决或拒绝， 返回的 promise 就会解决或拒绝。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">// 暴露构造函数</span></span><br><span class="line"><span class="built_in">window</span>.Promise = <span class="built_in">Promise</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><h3 id="Promise-构造函数的实现"><a href="#Promise-构造函数的实现" class="headerlink" title="Promise 构造函数的实现"></a>Promise 构造函数的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Promise 构造函数</span></span><br><span class="line"><span class="comment">excutor: 内部同步执行的函数 (resolve, reject) =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">    self.status = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 状态值, 初始状态为 pending, 成功了变为resolved, 失败了变为 rejected</span></span><br><span class="line">    self.data = <span class="literal">undefined</span> <span class="comment">// 用来保存成功 value 或失败 reason 的属性</span></span><br><span class="line">    self.callbacks = [] <span class="comment">// 用来保存所有待调用的包含 onResolved 和 onRejected 回调函数的对象的数组</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    异步处理成功后应该调用的函数</span></span><br><span class="line"><span class="comment">    value: 将交给 onResolve()的成功数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(self.status!==<span class="string">&#x27;pending&#x27;</span>) &#123; <span class="comment">// 如果当前不是 pending, 直接结束</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">        <span class="comment">// 立即更新状态, 保存数据</span></span><br><span class="line">        self.status = <span class="string">&#x27;resolved&#x27;</span></span><br><span class="line">        self.data = value</span><br><span class="line">        <span class="comment">// 异步调用所有待处理的 onResolved 成功回调函数</span></span><br><span class="line">        <span class="keyword">if</span> (self.callbacks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.callbacks.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">            obj.onResolved(value)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    异步处理失败后应该调用的函数</span></span><br><span class="line"><span class="comment">    reason: 将交给 onRejected()的失败数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(self.status!==<span class="string">&#x27;pending&#x27;</span>) &#123; <span class="comment">// 如果当前不是 pending, 直接结束</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 立即更新状态, 保存数据</span></span><br><span class="line">        self.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        self.data = reason</span><br><span class="line">        <span class="comment">// 异步调用所有待处理的 onRejected 回调函数</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.callbacks.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">            obj.onRejected(reason)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 立即同步调用 excutor()处理</span></span><br><span class="line">        excutor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123; <span class="comment">// 如果出了异常, 直接失败</span></span><br><span class="line">    reject(error) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-then-catch-的实现"><a href="#promise-then-catch-的实现" class="headerlink" title="promise.then()/catch()的实现"></a>promise.then()/catch()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为 promise 指定成功/失败的回调函数</span></span><br><span class="line"><span class="comment">函数的返回值是一个新的 promise 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line"><span class="comment">// 如果 onResolved/onRejected 不是函数, 可它指定一个默认的函数</span></span><br><span class="line">    onResolved = <span class="keyword">typeof</span> onResolved===<span class="string">&#x27;function&#x27;</span> ? onResolved : <span class="function"><span class="params">value</span> =&gt;</span> value <span class="comment">// 指定返回的 promise 为一个成功状态, 结果值为 value</span></span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125; <span class="comment">// 指定返回的 promise 为一个失败状态, 结果值为 reason</span></span><br><span class="line">    <span class="comment">// 返回一个新的 promise 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        专门抽取的用来处理 promise 成功/失败结果的函数</span></span><br><span class="line"><span class="comment">        callback: 成功/失败的回调函数</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 抛出异常 ===&gt; 返回的 promise 变为 rejected</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> x = callback(self.data)</span><br><span class="line">                <span class="comment">// 2. 返回一个新的 promise ===&gt; 得到新的 promise 的结果值作为返回的promise 的结果值</span></span><br><span class="line">                <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">                    x.then(resolve, reject) <span class="comment">// 一旦 x 成功了, resolve(value), 一旦 x失败了: reject(reason)</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 3. 返回一个一般值(undefined) ===&gt; 将这个值作为返回的 promise 的成功值</span></span><br><span class="line">                    resolve(x) </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">reject(error) </span><br><span class="line">            &#125; </span><br><span class="line">     &#125;</span><br><span class="line">        <span class="keyword">if</span> (self.status === <span class="string">&#x27;resolved&#x27;</span>) &#123; <span class="comment">// 当前 promise 已经成功了</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                handle(onResolved)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">&#x27;rejected&#x27;</span>) &#123; <span class="comment">// 当前 promise 已经失败了</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                handle(onRejected)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前 promise 还未确定 pending</span></span><br><span class="line">            <span class="comment">// 将 onResolved 和 onRejected 保存起来</span></span><br><span class="line">            self.callbacks.push(&#123;</span><br><span class="line">                <span class="function"><span class="title">onResolved</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">                    handle(onResolved)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">onRejected</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">                    handle(onRejected) </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为 promise 指定失败的回调函数</span></span><br><span class="line"><span class="comment">是 then(null, onRejected)的语法糖</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Promise-resolve-reject-的实现"><a href="#2-4-Promise-resolve-reject-的实现" class="headerlink" title="2.4. Promise.resolve()/reject()的实现"></a>2.4. Promise.resolve()/reject()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个指定了成功 value 的 promise 对象</span></span><br><span class="line"><span class="comment">value: 一般数据或 promise</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">        value.then(resolve, reject) </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(value) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个指定了失败 reason 的 promise 对象</span></span><br><span class="line"><span class="comment">reason: 一般数据/error</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(reason)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-Promise-all-race-的实现"><a href="#2-5-Promise-all-race-的实现" class="headerlink" title="2.5. Promise.all/race()的实现"></a>2.5. Promise.all/race()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个新的 promise 对象, 只有 promises 中所有 promise 都产生成功 value 时, 才</span></span><br><span class="line"><span class="comment">最终成功, 只要有一个失败就直接失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个新的 promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 已成功的数量</span></span><br><span class="line">        <span class="keyword">let</span> resolvedCount = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 待处理的 promises 数组的长度</span></span><br><span class="line">        <span class="keyword">const</span> promisesLength = promises.length</span><br><span class="line">        <span class="comment">// 准备一个保存成功值的数组</span></span><br><span class="line">        <span class="keyword">const</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>(promisesLength)</span><br><span class="line">        <span class="comment">// 遍历每个待处理的 promise</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promisesLength; i++) &#123;</span><br><span class="line">            <span class="comment">// promises 中元素可能不是一个数组, 需要用 resolve 包装一下</span></span><br><span class="line">            <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">                <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 成功当前 promise 成功的值到对应的下标</span></span><br><span class="line">                    values[i] = value</span><br><span class="line">                    <span class="comment">// 成功的数量加 1</span></span><br><span class="line">                    resolvedCount++</span><br><span class="line">                    <span class="comment">// 一旦全部成功</span></span><br><span class="line">                    <span class="keyword">if</span>(resolvedCount===promisesLength) &#123;</span><br><span class="line">                    <span class="comment">// 将所有成功值的数组作为返回 promise 对象的成功结果值</span></span><br><span class="line">                    resolve(values) </span><br><span class="line">                    &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">            <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 一旦有一个promise产生了失败结果值, 将其作为返回promise对象的失败结果值</span></span><br><span class="line">            reject(reason) </span><br><span class="line">                &#125;</span><br><span class="line">            ) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个 promise，一旦某个 promise 解决或拒绝， 返回的 promise 就会解决或拒绝。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回新的 promise 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历所有 promise</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">                <span class="built_in">Promise</span>.resolve(promises[i]).then( <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="comment">// 只要有一个成功了, 返回的 promise 就成功了</span></span><br><span class="line">                    resolve(value)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="comment">// 只要有一个失败了, 返回的结果就失败了</span></span><br><span class="line">                    reject(reason) </span><br><span class="line">                &#125;) </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-Promise-resolveDelay-rejectDelay-的实现"><a href="#2-6-Promise-resolveDelay-rejectDelay-的实现" class="headerlink" title="2.6. Promise.resolveDelay()/rejectDelay()的实现"></a>2.6. Promise.resolveDelay()/rejectDelay()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个延迟指定时间才确定结果的 promise 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.resolveDelay = <span class="function"><span class="keyword">function</span> (<span class="params">value, time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123; <span class="comment">// 如果 value 是一个 promise, 取这个promise 的结果值作为返回的 promise 的结果值</span></span><br><span class="line">                value.then(resolve, reject) <span class="comment">// 如果 value 成功, 调用</span></span><br><span class="line">                resolve(val), 如果 value 失败了, 调用 reject(reason)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(value) </span><br><span class="line">            &#125;</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回一个延迟指定时间才失败的 Promise 对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Promise</span>.rejectDelay = <span class="function"><span class="keyword">function</span> (<span class="params">reason, time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        reject(reason)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、async-与-await"><a href="#四、async-与-await" class="headerlink" title="四、async 与 await"></a>四、async 与 await</h2><h3 id="3-1-async-函数"><a href="#3-1-async-函数" class="headerlink" title="3.1. async 函数"></a>3.1. async 函数</h3><ol><li><p>函数的返回值为 promise 对象</p></li><li><p>promise 对象的结果由 async 函数执行的返回值决定</p></li></ol><h3 id="3-2-await-表达式"><a href="#3-2-await-表达式" class="headerlink" title="3.2. await 表达式"></a>3.2. await 表达式</h3><ol><li><p>await <strong>右侧的表达式一般为 promise 对象,</strong> 但也可以是其它的值</p></li><li><p>如果表达式是 promise 对象, await 返回的是 promise 成功的值</p></li><li><p>如果表达式是其它值, 直接将此值作为 await 的返回值</p></li></ol><h3 id="3-3注意"><a href="#3-3注意" class="headerlink" title="3.3注意"></a>3.3注意</h3><ol><li><p>await 必须<strong>写在 async 函数中</strong>, 但 async 函数中可以没有 await</p></li><li><p>如果 await 的 promise 失败了, <strong>就会抛出异常, 需要通过 try…catch 捕获处理</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mineReadFile = util.promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数的方式</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./resource/1.html&#x27;, (err, data1) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     if(err) throw err;</span></span><br><span class="line"><span class="comment">//     fs.readFile(&#x27;./resource/2.html&#x27;, (err, data2) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         if(err) throw err;</span></span><br><span class="line"><span class="comment">//         fs.readFile(&#x27;./resource/3.html&#x27;, (err, data3) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             if(err) throw err;</span></span><br><span class="line"><span class="comment">//             console.log(data1 + data2 + data3);</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//async 与 await</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//读取第一个文件的内容</span></span><br><span class="line">        <span class="keyword">let</span> data1 = <span class="keyword">await</span> mineReadFile(<span class="string">&#x27;./resource/1x.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data2 = <span class="keyword">await</span> mineReadFile(<span class="string">&#x27;./resource/2.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data3 = <span class="keyword">await</span> mineReadFile(<span class="string">&#x27;./resource/3.html&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data1 + data2 + data3);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异步编程是什么&quot;&gt;&lt;a href=&quot;#异步编程是什么&quot; class=&quot;headerlink&quot; title=&quot;异步编程是什么&quot;&gt;&lt;/a&gt;异步编程是什么&lt;/h2&gt;&lt;h3 id=&quot;异步编程&quot;&gt;&lt;a href=&quot;#异步编程&quot; class=&quot;headerlink&quot; title=&quot;异步编程&quot;&gt;&lt;/a&gt;异步编程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;fs 文件操作  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;fs&amp;#x27;&lt;/span&gt;).readFile(&lt;span class=&quot;string&quot;&gt;&amp;#x27;./index.html&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;err,data&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;数据库操作&lt;/li&gt;
&lt;li&gt;AJAX &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$.get(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/server&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;定时器 &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;为什么要用-Promise&quot;&gt;&lt;a href=&quot;#为什么要用-Promise&quot; class=&quot;headerlink&quot; title=&quot;为什么要用 Promise&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么要用&lt;/strong&gt; Promise&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.2.1.&lt;/strong&gt; &lt;strong&gt;指定回调函数的方式更加灵活&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;旧的: 必须在启动异步任务前指定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;promise: 启动异步任务 =&amp;gt; 返回promie对象 =&amp;gt; 给&lt;strong&gt;promise对象绑定回调函数&lt;/strong&gt;(甚至可以在异步任务结束后指定/多个) &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1.2.2.&lt;/strong&gt; &lt;strong&gt;支持链式调用&lt;/strong&gt;, &lt;strong&gt;可以解决回调地狱问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是回调地狱? 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回调地狱的缺点? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不便于阅读&lt;/li&gt;
&lt;li&gt;不便于异常处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;1-promise实现对定时器的封装。&quot;&gt;&lt;a href=&quot;#1-promise实现对定时器的封装。&quot; class=&quot;headerlink&quot; title=&quot;1.promise实现对定时器的封装。&quot;&gt;&lt;/a&gt;1.promise实现对定时器的封装。&lt;/h4&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Vue3基础</title>
    <link href="http://yoursite.com/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/</id>
    <published>2021-08-29T05:11:47.000Z</published>
    <updated>2021-09-01T15:08:53.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Vue3-0基础"><a href="#一、Vue3-0基础" class="headerlink" title="一、Vue3.0基础"></a>一、Vue3.0基础</h2><p>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></p><h3 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h3 id="创建vue3-0工程"><a href="#创建vue3-0工程" class="headerlink" title="创建vue3.0工程"></a>创建vue3.0工程</h3><h4 id="使用vue-cli"><a href="#使用vue-cli" class="headerlink" title="使用vue-cli"></a>使用vue-cli</h4><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h4><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p><ul><li><strong>新一代前端构建工具。</strong></li><li>优势如下：<ul><li>开发环境中，<strong>无需打包</strong>操作，可快速的冷启动。</li><li>轻量快速的<strong>热重载</strong>（HMR）。</li><li>真正的<strong>按需编译</strong>，不再等待整个应用编译完成。</li></ul></li></ul><p><strong>传统构建 与 vite构建对比图</strong></p><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/传统构建方式.png" style="width:500px;height:280px;"><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/vite构建.png" style="width:480px;height:280px"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载</span></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="二、常用的-Composition-API"><a href="#二、常用的-Composition-API" class="headerlink" title="二、常用的 Composition API"></a>二、常用的 Composition API</h2><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><ol><li>理解：Vue3.0中一个新的配置项，值为一个<strong>函数。</strong></li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：<strong>数据、方法</strong>等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（<strong>后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合</strong>）</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>a的值是：&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHello&quot;</span>&gt;</span>说话(Vue3所配置的——sayHello)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayWelcome&quot;</span>&gt;</span>说话(Vue2所配置的——sayWelcome)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>测试一下在Vue2的配置中去读取Vue3中的数据、方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>测试一下在Vue3的setup配置中去读取Vue2中的数据、方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// import &#123;h&#125; from &#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">a</span>:<span class="number">100</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">sayWelcome</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&#x27;欢迎来到尚硅谷学习&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.sex)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.sayHello)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//此处只是测试一下setup，暂时不考虑响应式的问题。</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">async</span> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> age = <span class="number">18</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> a = <span class="number">200</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//方法</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">`我叫<span class="subst">$&#123;name&#125;</span>，我<span class="subst">$&#123;age&#125;</span>岁了，你好啊！`</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//不能获得vue2的属性</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(name)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(age)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sayHello)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.sex)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.sayWelcome)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">name,</span></span><br><span class="line"><span class="javascript">age,</span></span><br><span class="line"><span class="javascript">sayHello,</span></span><br><span class="line"><span class="javascript">test2,</span></span><br><span class="line"><span class="javascript">a</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个函数（渲染函数）</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// return ()=&gt; h(&#x27;h1&#x27;,&#x27;尚硅谷&#x27;)</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li><strong>基本类型</strong>的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li><strong>对象类型</strong>的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作种类：&#123;&#123;job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作薪水：&#123;&#123;job.salary&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeInfo&quot;</span>&gt;</span>修改人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//数据 </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> name = ref(<span class="string">&#x27;张三&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> age = ref(<span class="number">18</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> job = ref(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">salary</span>:<span class="string">&#x27;30K&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//方法</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeInfo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// name.value = &#x27;李四&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// age.value = 48</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(job.value)</span></span><br><span class="line"><span class="javascript"><span class="comment">// job.value.type = &#x27;UI设计师&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// job.value.salary = &#x27;60K&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(name,age)</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">name,</span></span><br><span class="line"><span class="javascript">age,</span></span><br><span class="line"><span class="javascript">job,</span></span><br><span class="line"><span class="javascript">changeInfo</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h3><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“<strong>深层次的</strong>”。</li><li>内部基于 ES6 的 Proxy 实现，<strong>通过代理对象操作源对象内部数据进行操作</strong>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作种类：&#123;&#123;person.job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作薪水：&#123;&#123;person.job.salary&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：&#123;&#123;person.hobby&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试的数据c：&#123;&#123;person.job.a.b.c&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeInfo&quot;</span>&gt;</span>修改人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> person = reactive(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">salary</span>:<span class="string">&#x27;30K&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">a</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">b</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">c</span>:<span class="number">666</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//方法</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeInfo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">person.name = <span class="string">&#x27;李四&#x27;</span></span></span><br><span class="line"><span class="javascript">person.age = <span class="number">48</span></span></span><br><span class="line"><span class="javascript">person.job.type = <span class="string">&#x27;UI设计师&#x27;</span></span></span><br><span class="line"><span class="javascript">person.job.salary = <span class="string">&#x27;60K&#x27;</span></span></span><br><span class="line"><span class="javascript">person.job.a.b.c = <span class="number">999</span></span></span><br><span class="line"><span class="javascript">person.hobby[<span class="number">0</span>] = <span class="string">&#x27;学习&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">person,</span></span><br><span class="line"><span class="javascript">changeInfo</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a>Vue3.0中的响应式原理</h3><h4 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h4><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（<strong>对数组的变更方法进行了包裹</strong>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li><strong>新增属性、删除属性</strong>, 界面不会更新。</li><li>直接通过<strong>下标修改数组</strong>, 界面不会自动更新。</li></ul></li></ul><h4 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h4><ul><li><p>实现原理: </p><ul><li><p>通过<strong>Proxy（代理）</strong>:  <strong>拦截对象中任意属性的变化</strong>, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过<strong>Reflect（反射）</strong>:  <strong>对源对象的属性进行操作</strong>。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//源数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//模拟Vue2中实现响应式</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#region </span></span></span><br><span class="line"><span class="javascript"><span class="comment">/* let p = &#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">Object.defineProperty(p,&#x27;name&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">configurable:true,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">get()&#123; //有人读取name时调用</span></span></span><br><span class="line"><span class="comment"><span class="javascript">return person.name</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">set(value)&#123; //有人修改name时调用</span></span></span><br><span class="line"><span class="comment"><span class="javascript">console.log(&#x27;有人修改了name属性，我发现了，我要去更新界面！&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">person.name = value</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">Object.defineProperty(p,&#x27;age&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">get()&#123; //有人读取age时调用</span></span></span><br><span class="line"><span class="comment"><span class="javascript">return person.age</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">set(value)&#123; //有人修改age时调用</span></span></span><br><span class="line"><span class="comment"><span class="javascript">console.log(&#x27;有人修改了age属性，我发现了，我要去更新界面！&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">person.age = value</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;) */</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#endregion</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//模拟Vue3中实现响应式</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#region </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person,&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//有人读取p的某个属性时调用</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">get</span>(<span class="params">target,propName</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">`有人读取了p身上的<span class="subst">$&#123;propName&#125;</span>属性`</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,propName)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//有人修改p的某个属性、或给p追加某个属性时调用</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">set</span>(<span class="params">target,propName,value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">`有人修改了p身上的<span class="subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">Reflect</span>.set(target,propName,value)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//有人删除p的某个属性时调用</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">deleteProperty</span>(<span class="params">target,propName</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">`有人删除了p身上的<span class="subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target,propName)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">//#endregion</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//通过Object.defineProperty去操作</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#region </span></span></span><br><span class="line"><span class="javascript"><span class="comment">/* try &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">get()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">return 3</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">get()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">return 4</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125; catch (error) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">console.log(error)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125; */</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#endregion</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//通过Reflect.defineProperty去操作</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#region </span></span></span><br><span class="line"><span class="javascript"><span class="comment">/* const x1 = Reflect.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">get()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">return 3</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">console.log(x1)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">const x2 = Reflect.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">get()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">return 4</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;) </span></span></span><br><span class="line"><span class="comment"><span class="javascript">if(x2)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">console.log(&#x27;某某某操作成功了！&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;else&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">console.log(&#x27;某某某操作失败了！&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125; */</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#endregion</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;@@@&#x27;)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="reactive对比ref"><a href="#reactive对比ref" class="headerlink" title="reactive对比ref"></a>reactive对比ref</h3><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h3 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h3><ul><li><p>setup执行的时机</p><ul><li><strong>在beforeCreate之前执行一次</strong>，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：<strong>组件外部传递过来</strong>，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试触发一下Demo组件的Hello事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:[<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;school&#x27;</span>],</span></span><br><span class="line"><span class="javascript"><span class="attr">emits</span>:[<span class="string">&#x27;hello&#x27;</span>],</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;---setup---&#x27;,props)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;---setup---&#x27;,context)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;---setup---&#x27;,context.attrs) //相当与Vue2中的$attrs</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;---setup---&#x27;,context.emit) //触发自定义事件的。</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>,context.slots) <span class="comment">//插槽</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> person = reactive(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//方法</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">context.emit(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">person,</span></span><br><span class="line"><span class="javascript">test</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h3><h4 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h4><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.firstName = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.lastName = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h4><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：<strong>oldValue无法正确获取</strong>、<strong>强制开启了深度监视</strong>（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：<strong>deep配置有效</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line">watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)                                              </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line">watch([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;                                                                          </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">watch(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line">watch([<span class="function">()=&gt;</span>person.job,<span class="function">()=&gt;</span>person.name],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h4><ul><li><p>watch的套路是：既要指明<strong>监视的属性</strong>，也要指明<strong>监视的回调</strong>。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的<strong>回调中用到哪个属性</strong>，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的<strong>计算出来的值</strong>（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更<strong>注重的是过程</strong>（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line">watchEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.value</span><br><span class="line">    <span class="keyword">const</span> x2 = person.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/lifecycle.png" alt="lifecycle" style="zoom: 33%;"><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/lifecycle3.svg" alt="lifecycle3" style="zoom: 50%;"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref,onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---setup---&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> sum = ref(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//通过组合式API的形式去使用生命周期钩子</span></span></span><br><span class="line"><span class="javascript">onBeforeMount(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---onBeforeMount---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">onMounted(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---onMounted---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">onBeforeUpdate(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---onBeforeUpdate---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">onUpdated(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---onUpdated---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">onBeforeUnmount(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---onBeforeUnmount---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">onUnmounted(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---onUnmounted---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;sum&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//通过配置项的形式使用生命周期钩子</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//#region </span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---beforeCreate---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---created---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---beforeMount---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---mounted---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---beforeUpdate---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---updated---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">beforeUnmount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---beforeUnmount---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">unmounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;---unmounted---&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//#endregion</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h3 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h3><ul><li><p>什么是hook？—— 本质是一个函数，把<strong>setup函数中使用的Composition API进行了封装</strong>。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: <strong>复用代码,</strong> 让setup中的逻辑更清楚易懂。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前点击时鼠标的坐标为：x：&#123;&#123;point.x&#125;&#125;，y：&#123;&#123;point.y&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> usePoint <span class="keyword">from</span> <span class="string">&#x27;../hooks/usePoint&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> sum = ref(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> point = usePoint()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;sum,point&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted,onBeforeUnmount&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的数据</span></span><br><span class="line"><span class="keyword">let</span> point = reactive(&#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">savePoint</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">point.x = event.pageX</span><br><span class="line">point.y = event.pageY</span><br><span class="line"><span class="built_in">console</span>.log(event.pageX,event.pageY)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的生命周期钩子</span></span><br><span class="line">onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> point</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h3><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的<strong>某个属性单独提供给外部使用时</strong>。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;person&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;age++&quot;</span>&gt;</span>增长年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref,reactive,toRef,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> person = reactive(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">j1</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">salary</span>:<span class="number">20</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// const name1 = person.name</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;%%%&#x27;,name1)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// const name2 = toRef(person,&#x27;name&#x27;)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;####&#x27;,name2)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> x = toRefs(person)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;******&#x27;</span>,x)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//返回一个对象（常用）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">person,</span></span><br><span class="line"><span class="javascript"><span class="comment">// name:toRef(person,&#x27;name&#x27;),</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// age:toRef(person,&#x27;age&#x27;),</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// salary:toRef(person.job.j1,&#x27;salary&#x27;),</span></span></span><br><span class="line"><span class="javascript">...toRefs(person)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h2><h3 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h3><ul><li><p>shallowReactive：只处理对象<strong>最外层属性的响应式</strong>（浅响应式）。</p></li><li><p>shallowRef：只处理<strong>基本数据类型的响应式</strong>, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h3 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h3><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望<strong>数据被修改</strong>时。</li></ul><h3 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h3><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的<strong>第三方类库</strong>等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><ul><li><p>作用：创建一个<strong>自定义的 ref</strong>，并对其<strong>依赖项跟踪</strong>和<strong>更新触发</strong>进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;keyword&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref,customRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//自定义一个myRef</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myRef</span>(<span class="params">value,delay</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> timer</span></span><br><span class="line"><span class="javascript"><span class="comment">//通过customRef去实现自定义</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> customRef(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">track() <span class="comment">//告诉Vue这个value值是需要被“追踪”的</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> value</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="javascript">timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">value = newValue</span></span><br><span class="line"><span class="javascript">trigger() <span class="comment">//告诉Vue去更新界面</span></span></span><br><span class="line"><span class="javascript">&#125;,delay)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> keyword = myRef(<span class="string">&#x27;hello&#x27;</span>,<span class="number">500</span>) <span class="comment">//使用程序员自定义的ref</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">keyword</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h3><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/components_provide.png" style="width:300px"></li><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = reactive(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    provide(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = inject(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h3><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h2 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h2><h3 id="Options-API-存在的问题"><a href="#Options-API-存在的问题" class="headerlink" title="Options API 存在的问题"></a>Options API 存在的问题</h3><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><p><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/传统OptionsAPI2.gif" alt="传统OptionsAPI2" style="zoom:50%;"><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/传统OptionsAPI1.gif" alt="传统OptionsAPI1" style="zoom: 50%;"></p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><p><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/CompositionAPI2.gif" alt="CompositionAPI2" style="zoom:50%;"><img src="/2021/08/29/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue3%E5%9F%BA%E7%A1%80/CompositionAPI1.gif" alt="CompositionAPI1" style="zoom: 50%;"></p><h2 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h2><h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h3><ul><li><p>等待异步组件时<strong>渲染一些额外内容</strong>，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件：这就可以返回一个async setup了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Child = defineAsyncComponent(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><h3 id="全局API的转移"><a href="#全局API的转移" class="headerlink" title="全局API的转移"></a>全局API的转移</h3><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.focus()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h3 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h3><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Vue3-0基础&quot;&gt;&lt;a href=&quot;#一、Vue3-0基础&quot; class=&quot;headerlink&quot; title=&quot;一、Vue3.0基础&quot;&gt;&lt;/a&gt;一、Vue3.0基础&lt;/h2&gt;&lt;p&gt;github上的tags地址：&lt;a href=&quot;https://github.com/vuejs/vue-next/releases/tag/v3.0.0&quot;&gt;https://github.com/vuejs/vue-next/releases/tag/v3.0.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;新的特性&quot;&gt;&lt;a href=&quot;#新的特性&quot; class=&quot;headerlink&quot; title=&quot;新的特性&quot;&gt;&lt;/a&gt;新的特性&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Composition API（组合API）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup配置&lt;/li&gt;
&lt;li&gt;ref与reactive&lt;/li&gt;
&lt;li&gt;watch与watchEffect&lt;/li&gt;
&lt;li&gt;provide与inject&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新的内置组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fragment &lt;/li&gt;
&lt;li&gt;Teleport&lt;/li&gt;
&lt;li&gt;Suspense&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他改变&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的生命周期钩子&lt;/li&gt;
&lt;li&gt;data 选项应始终被声明为一个函数&lt;/li&gt;
&lt;li&gt;移除keyCode支持作为 v-on 的修饰符&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;创建vue3-0工程&quot;&gt;&lt;a href=&quot;#创建vue3-0工程&quot; class=&quot;headerlink&quot; title=&quot;创建vue3.0工程&quot;&gt;&lt;/a&gt;创建vue3.0工程&lt;/h3&gt;&lt;h4 id=&quot;使用vue-cli&quot;&gt;&lt;a href=&quot;#使用vue-cli&quot; class=&quot;headerlink&quot; title=&quot;使用vue-cli&quot;&gt;&lt;/a&gt;使用vue-cli&lt;/h4&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create&quot;&gt;https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vue --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 安装或者升级你的@vue/cli&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g @vue/cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vue create vue_test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; vue_test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm run serve&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;使用-vite-创建&quot;&gt;&lt;a href=&quot;#使用-vite-创建&quot; class=&quot;headerlink&quot; title=&quot;使用 vite 创建&quot;&gt;&lt;/a&gt;使用 vite 创建&lt;/h4&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://v3.cn.vuejs.org/guide/installation.html#vite&quot;&gt;https://v3.cn.vuejs.org/guide/installation.html#vite&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
    <category term="Vue基础" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
    <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://yoursite.com/2021/08/24/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/TypeScript/"/>
    <id>http://yoursite.com/2021/08/24/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/TypeScript/</id>
    <published>2021-08-24T14:16:06.000Z</published>
    <updated>2021-08-25T15:57:23.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TypeScript简介"><a href="#TypeScript简介" class="headerlink" title="TypeScript简介"></a>TypeScript简介</h2><ol><li>TypeScript是JavaScript的<strong>超集</strong>。</li><li>它对JS进行了扩展，向JS中引入了<strong>类型</strong>的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器<strong>编译为JS</strong>，然后再交由JS解析器执行。</li><li>TS完全<strong>兼容JS</strong>，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了<strong>静态类型</strong>，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，<strong>减小了运行时异常的出现的几率</strong>；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><p>全局安装：<code>npm i -g typescript</code></p><p>创建一个ts文件，编译：<code>tsc xxx.ts</code></p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ul><li><p><strong>类型声明</strong>是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会<strong>自动检查值</strong>是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h3><ul><li><p>TS拥有自动的类型判断机制</p></li><li><p>当对变量的声明和赋值是同时进行的，TS编译器会<strong>自动判断变量</strong>的类型</p></li><li><p>所以如果你的变量的<strong>声明和赋值时同时</strong>进行的，可以省略掉类型声明</p></li><li><p>类型：</p><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, <code>hi</code></td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型(<strong>不建议</strong>，赋值时会影响别人)</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><pre><code class="typescript"><span class="keyword">let</span> color: <span class="string">'red'</span> | <span class="string">'blue'</span> | <span class="string">'black'</span>;<span class="keyword">let</span> num: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;&lt;!--code￼<span class="number">1</span>--&gt;</code></pre></li></ul></li><li><p>void,一般是<strong>函数</strong>使用；</p><ul><li><pre><code class="typescript"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;&lt;!--code￼<span class="number">2</span>--&gt;</code></pre></li></ul></li><li><p>object（<strong>没啥用</strong>）,用来指定对象中包含的属性值，必须匹配。</p><ul><li><pre><code class="typescript"><span class="keyword">let</span> obj: object = &#123;&#125;;<span class="keyword">let</span> obj: &#123;name <span class="built_in">string</span>&#125;<span class="comment">//表示任意类型的属性</span><span class="keyword">let</span> ovj:&#123;name:<span class="built_in">string</span>,&#123;propName:<span class="built_in">string</span>&#125;:<span class="built_in">any</span>&#125;    &lt;!--code￼<span class="number">3</span>--&gt;</code></pre></li></ul></li><li><p>tuple</p><ul><li><pre><code class="typescript"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];x = [<span class="string">"hello"</span>, <span class="number">10</span>]; &lt;!--code￼<span class="number">4</span>--&gt;</code></pre></li></ul></li></ul><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li><pre><code class="typescript"><span class="keyword">let</span> someValue: unknown = <span class="string">"this is a string"</span>;<span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;&lt;!--code￼<span class="number">5</span>--&gt;</code></pre></li></ul></li></ul></li></ul><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><p>编译文件时，使用 -w 指令后，TS编译器会<strong>自动监视文件的变化</strong>，并在文件发生变化时对文件进行重新编译。</p><ul><li><p>示例：</p><ul><li><pre><code class="powershell">tsc xxx.ts <span class="literal">-w</span>&lt;!-<span class="literal">-code</span>￼<span class="number">6</span>--&gt;- 上述示例中，所有src目录和tests目录下的文件都会被编译</code></pre></li></ul></li><li><p>exclude</p><ul><li><p>定义需要<strong>排除在外</strong>的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><ul><li><pre><code class="json">"exclude": ["./src/hello/**/*"]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 上述示例中，src下hello目录下的文件都不会被编译</span><br><span class="line"></span><br><span class="line">- extends</span><br><span class="line"></span><br><span class="line">  - 定义被**继承的配置文件**</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```json</span><br><span class="line">      &quot;extends&quot;: &quot;./configs/base&quot;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p></li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被<strong>编译文件的列表</strong>，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><ul><li><pre><code class="json">"files": [    "core.ts",    "sys.ts",    "types.ts",    "scanner.ts",    "parser.ts",    "utilities.ts",    "binder.ts",    "checker.ts",    <span class="string">"tsc.ts"</span>  ]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 列表中的文件都会被TS编译器所编译</span><br><span class="line"></span><br><span class="line">- compilerOptions</span><br><span class="line"></span><br><span class="line">  - 编译选项是配置文件中非常重要也**比较复杂的配置选项**</span><br><span class="line"></span><br><span class="line">  - 在compilerOptions中包含多个子选项，用来完成对**编译的配置**</span><br><span class="line"></span><br><span class="line">    - 项目选项</span><br><span class="line"></span><br><span class="line">      - **target**</span><br><span class="line"></span><br><span class="line">        - 设置ts代码编译的**目标版本**</span><br><span class="line"></span><br><span class="line">        - 可选值：</span><br><span class="line"></span><br><span class="line">          - ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</span><br><span class="line"></span><br><span class="line">        - 示例：</span><br><span class="line"></span><br><span class="line">          - ```json</span><br><span class="line">            &quot;compilerOptions&quot;: &#123;</span><br><span class="line">                &quot;target&quot;: &quot;ES6&quot;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>      - 如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码  - **lib**    - 指定**代码运行时所包含的库**（宿主环境）    - 可选值：      - ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......    - 示例：      - ```json        "compilerOptions": &#123;            "target": "ES6",            "lib": ["ES6", "DOM"],            "outDir": "dist",            "outFile": "dist/aa.js"        &#125;        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **module**</span><br><span class="line"></span><br><span class="line">  - 设置编译后代码使用的**模块化系统**</span><br><span class="line"></span><br><span class="line">  - 可选值：</span><br><span class="line"></span><br><span class="line">    - CommonJS、UMD、AMD、System、ES2020、ESNext、None</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```typescript</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;module&quot;: &quot;CommonJS&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - **outDir**    - **编译后文件的所在目录**    - 默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置    - 示例：      - ```json        "compilerOptions": &#123;            "outDir": "dist"        &#125;        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 设置后编译后的js文件将会生成到dist目录</span><br><span class="line"></span><br><span class="line">- **outFile**</span><br><span class="line"></span><br><span class="line">  - 将**所有的文件编译为一个js文件**</span><br><span class="line"></span><br><span class="line">  - 默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```json</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;outFile&quot;: &quot;dist/app.js&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - **rootDir**    - 指定**代码的根目录**，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录    - 示例：      - ```json        "compilerOptions": &#123;            "rootDir": "./src"        &#125;        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- allowJs</span><br><span class="line"></span><br><span class="line">  - **是否对js文件编译**</span><br><span class="line"></span><br><span class="line">- checkJs</span><br><span class="line"></span><br><span class="line">  - 是否**对js文件进行检查**</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```json</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;allowJs&quot;: true,</span><br><span class="line">          &quot;checkJs&quot;: true</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - **removeComments**    - 是否**删除注释**    - 默认值：false  - noEmit    - **不对代码进行编译**    - 默认值：false  - sourceMap    - 是否生成sourceMap，    - 默认值：false</code></pre></li></ul></li></ul></li></ul><pre><code>- 严格检查  - strict    - 启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查  - alwaysStrict    - 总是以严格模式对代码进行编译  - noImplicitAny    - 禁止隐式的any类型  - noImplicitThis    - 禁止类型不明确的this  - strictBindCallApply    - 严格检查bind、call和apply的参数列表  - strictFunctionTypes    - 严格检查函数的类型  - strictNullChecks    - 严格的空值检查  - strictPropertyInitialization    - 严格检查属性是否初始化- 额外检查  - noFallthroughCasesInSwitch    - 检查switch语句包含正确的break  - noImplicitReturns    - 检查函数没有隐式的返回值  - noUnusedLocals    - 检查未使用的局部变量  - noUnusedParameters    - 检查未使用的参数- 高级  - allowUnreachableCode    - 检查不可达代码    - 可选值：      - true，忽略不可达代码      - false，不可达代码将引起错误  - noEmitOnError    - 有错误的情况下不进行编译    - 默认值：false</code></pre><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><ul><li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p></li><li><p>步骤：</p><ol><li><p>初始化项目</p><ul><li>进入项目根目录，执行命令 <code>npm init -y</code><ul><li>主要作用：创建package.json文件</li></ul></li></ul></li><li><p>下载构建工具</p><ul><li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul><li>共安装了7个包<ul><li><strong>webpack</strong><ul><li>构建工具webpack</li></ul></li><li><strong>webpack-cli</strong><ul><li>webpack的命令行工具</li></ul></li><li><strong>webpack-dev-server</strong><ul><li>webpack的开发服务器</li></ul></li><li><strong>typescript</strong><ul><li>ts编译器</li></ul></li><li><strong>ts-loader</strong><ul><li>ts加载器，用于在webpack中编译ts文件</li></ul></li><li><strong>html-webpack-plugin</strong><ul><li>webpack中html插件，用来自动创建html文件</li></ul></li><li><strong>clean-webpack-plugin</strong><ul><li>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li></ul></li></ul></li><li><p>根目录下创建webpack的配置文件webpack.config.js</p><ul><li><pre><code class="javascript"><span class="comment">//引入一个包</span><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);<span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);<span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);<span class="built_in">module</span>.exports = &#123;    optimization:&#123;        minimize: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span>    &#125;,    <span class="comment">//指定入口文件</span>    entry: <span class="string">"./src/index.ts"</span>,    devtool: <span class="string">"inline-source-map"</span>,    devServer: &#123;        contentBase: <span class="string">'./dist'</span>    &#125;,    <span class="comment">//指定打包文件所在目录</span>    output: &#123;        <span class="comment">//打包文件目录</span>        path: path.resolve(__dirname, <span class="string">"dist"</span>),        <span class="comment">//打包后文件的文件</span>        filename: <span class="string">"bundle.js"</span>,        environment: &#123;            arrowFunction: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span>        &#125;    &#125;,    <span class="comment">//用来设置引用模块</span>    resolve: &#123;        extensions: [<span class="string">".ts"</span>, <span class="string">".js"</span>]    &#125;,    <span class="comment">//webpack打包时要使用的模块</span>    <span class="built_in">module</span>: &#123;        rules: [            &#123;                test: <span class="regexp">/\.ts$/</span>,                <span class="comment">//排除loader</span>                use: &#123;                   loader: <span class="string">"ts-loader"</span>                     &#125;,                exclude: <span class="regexp">/node_modules/</span>            &#125;        ]    &#125;,    plugins: [        <span class="keyword">new</span> CleanWebpackPlugin(),        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;            title:<span class="string">'TS测试'</span>            <span class="comment">//根据模板实现</span>            template:<span class="string">'./src/index.html'</span>        &#125;),    ]&#125;&lt;!--code￼<span class="number">12</span>--&gt;</code></pre></li></ul></li><li><p>修改package.json添加如下配置</p><ul><li><pre><code class="json">&#123;  ...略...  "scripts": &#123;    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",    "build": "webpack",    "start": "webpack serve --open chrome.exe"  &#125;,  ...略...&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  6. 在src下创建ts文件，并在并命令行执行```npm run build```对代码进行编译，或者执行```npm start```来启动开发服务器</span><br><span class="line"></span><br><span class="line">## Babel</span><br><span class="line"></span><br><span class="line">经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</span><br><span class="line"></span><br><span class="line">1. 安装依赖包：</span><br><span class="line"></span><br><span class="line">   - ```npm i -D @babel/core @babel/preset-env babel-loader core-js```</span><br><span class="line">   - 共安装了4个包，分别是：</span><br><span class="line">     - **@babel/core**</span><br><span class="line">       - babel的**核心工具**</span><br><span class="line">     - **@babel/preset-env**</span><br><span class="line">       - babel的**预定义环境**</span><br><span class="line">     - **@babel-loader**</span><br><span class="line">       - babel在webpack中的**加载器**</span><br><span class="line">     - **core-js**</span><br><span class="line">       - core-js用来使**老版本的浏览器**支持新版ES语法</span><br><span class="line"></span><br><span class="line">2. 修改webpack.config.js配置文件</span><br><span class="line"></span><br><span class="line">   - ```javascript</span><br><span class="line">     ...略...</span><br><span class="line">     module: &#123;</span><br><span class="line">         rules: [</span><br><span class="line">             &#123;</span><br><span class="line">                 test: /\.ts$/,</span><br><span class="line">                 use: [</span><br><span class="line">                     //配置babel</span><br><span class="line">                     &#123;</span><br><span class="line">                         //指定加载器</span><br><span class="line">                         loader: &quot;babel-loader&quot;,</span><br><span class="line">                         //设置babel</span><br><span class="line">                         options:&#123;</span><br><span class="line">                             presets: [</span><br><span class="line">                                 [</span><br><span class="line">                                     &quot;@babel/preset-env&quot;,</span><br><span class="line">                                     &#123;</span><br><span class="line">                                         &quot;targets&quot;:&#123;</span><br><span class="line">                                             &quot;chrome&quot;: &quot;58&quot;,</span><br><span class="line">                                             &quot;ie&quot;: &quot;11&quot;</span><br><span class="line">                                         &#125;,</span><br><span class="line">                                         //指定版本</span><br><span class="line">                                         &quot;corejs&quot;:&quot;3&quot;,</span><br><span class="line">                                         //按需加载</span><br><span class="line">                                         &quot;useBuiltIns&quot;: &quot;usage&quot;</span><br><span class="line">                                     &#125;</span><br><span class="line">                                 ]</span><br><span class="line">                             ]</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;,</span><br><span class="line">                     &#123;</span><br><span class="line">                         loader: &quot;ts-loader&quot;,</span><br><span class="line">     </span><br><span class="line">                     &#125;</span><br><span class="line">                 ],</span><br><span class="line">                 exclude: /node_modules/</span><br><span class="line">             &#125;</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line">     ...略...</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如此一来，使用ts编译后的文件将会<strong>再次被babel处理</strong>，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p></li></ul></li></ol></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h3 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h3><p>定义类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">参数: 类型</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p></li><li><p>默认情况下，对象的属性是<strong>可以任意的修改</strong>的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个<code>readonly</code>，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul><p>public:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    <span class="keyword">public</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure><p>project:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure><p>private:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.name = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li><li><p>属性存取器</p><ul><li>对于一些<strong>不希望被任意修改的属性</strong>，可以将其设置为private</li><li>直接将其设置为private将导致无法再通过对象修改其中的属性</li><li>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</li><li>读取属性的方法叫做<code>setter</code>方法，设置属性的方法叫做<code>getter</code>方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.name); <span class="comment">// 通过getter读取name属性</span></span><br><span class="line">p1.name = <span class="string">&#x27;猪八戒&#x27;</span>; <span class="comment">// 通过setter修改name属性</span></span><br></pre></td></tr></table></figure></li><li><p>静态属性</p><ul><li>静态属性（方法），也称为类属性。使用静态属性<strong>无需创建实例，通过类即可直接使用</strong></li><li>静态属性（方法）使用static开头</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tools.PI);</span><br><span class="line"><span class="built_in">console</span>.log(Tools.sum(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li><li><p>this</p><ul><li>在类中，使用this表示当前对象</li></ul></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>通过继承可以将其他类中的属性和方法引入到当前类中</li><li>通过继承可以在不修改类的情况下完成对<strong>类的扩展</strong></li><li><strong>重写</strong><ul><li>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</li><li>在子类中可以使用<code>super</code>来完成对父类的引用</li></ul></li><li><strong>抽象类</strong>（abstract class）:抽象类是专门用来被其他类所继承的类，它<strong>只能被其他类所继承不能用来创建实例</strong>,使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</li></ul><h3 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h3><p>接口中的所有方法和属性<strong>都是没有实值</strong>的，换句话说接口中的<strong>所有方法都是抽象方法。</strong>接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中<strong>要保护接口中的所有属性。接口可以在定义类的时候去限制类的结构。</strong>定义了一个标准，需要我们去实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">per: Person</span>)</span>&#123;</span><br><span class="line">    per.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h3><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在<strong>函数中使用T来表示该类型。</strong>所以泛型其实很好理解，就表示某个类型。</p><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><ul><li><pre><code class="typescript">test(<span class="number">10</span>)&lt;!--code￼<span class="number">22</span>--&gt;</code></pre></li><li><p>也可以在函数后手动指定泛型</p></li></ul></li><li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><ul><li><pre><code class="typescript"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt;(<span class="params">a: T, b: K</span>): <span class="title">K</span></span>&#123;    <span class="keyword">return</span> b;&#125;test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">"hello"</span>);&lt;!--code￼<span class="number">23</span>--&gt;</code></pre></li></ul></li><li><p>也可以对泛型的范围进行约束</p><ul><li><pre><code class="typescript"><span class="keyword">interface</span> MyInter&#123;    length: <span class="built_in">number</span>;&#125;<span class="comment">//泛型T必须是Inter的实现类</span><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">MyInter</span>&gt;(<span class="params">arg: T</span>): <span class="title">number</span></span>&#123;    <span class="keyword">return</span> arg.length;&#125;</code></pre></li><li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TypeScript简介&quot;&gt;&lt;a href=&quot;#TypeScript简介&quot; class=&quot;headerlink&quot; title=&quot;TypeScript简介&quot;&gt;&lt;/a&gt;TypeScript简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;TypeScript是JavaScript的&lt;strong&gt;超集&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它对JS进行了扩展，向JS中引入了&lt;strong&gt;类型&lt;/strong&gt;的概念，并添加了许多新的特性。&lt;/li&gt;
&lt;li&gt;TS代码需要通过编译器&lt;strong&gt;编译为JS&lt;/strong&gt;，然后再交由JS解析器执行。&lt;/li&gt;
&lt;li&gt;TS完全&lt;strong&gt;兼容JS&lt;/strong&gt;，换言之，任何的JS代码都可以直接当成JS使用。&lt;/li&gt;
&lt;li&gt;相较于JS而言，TS拥有了&lt;strong&gt;静态类型&lt;/strong&gt;，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，&lt;strong&gt;减小了运行时异常的出现的几率&lt;/strong&gt;；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全局安装：&lt;code&gt;npm i -g typescript&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建一个ts文件，编译：&lt;code&gt;tsc xxx.ts&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;h3 id=&quot;类型声明&quot;&gt;&lt;a href=&quot;#类型声明&quot; class=&quot;headerlink&quot; title=&quot;类型声明&quot;&gt;&lt;/a&gt;类型声明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;类型声明&lt;/strong&gt;是TS非常重要的一个特点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过类型声明可以指定TS中变量（参数、形参）的类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定类型后，当为变量赋值时，TS编译器会&lt;strong&gt;自动检查值&lt;/strong&gt;是否符合类型声明，符合则赋值，否则报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; 变量: 类型;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; 变量: 类型 = 值;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;参数: 类型, 参数: 类型&lt;/span&gt;): 类型&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;自动类型判断&quot;&gt;&lt;a href=&quot;#自动类型判断&quot; class=&quot;headerlink&quot; title=&quot;自动类型判断&quot;&gt;&lt;/a&gt;自动类型判断&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TS拥有自动的类型判断机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当对变量的声明和赋值是同时进行的，TS编译器会&lt;strong&gt;自动判断变量&lt;/strong&gt;的类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以如果你的变量的&lt;strong&gt;声明和赋值时同时&lt;/strong&gt;进行的，可以省略掉类型声明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;类型&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;例子&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;number&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1, -33, 2.5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;任意数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;string&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;‘hi’, “hi”, &lt;code&gt;hi&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;任意字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;boolean&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;true、false&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;布尔值true或false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;字面量&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;其本身&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;限制变量的值就是该字面量的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;any&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;*&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;任意类型(&lt;strong&gt;不建议&lt;/strong&gt;，赋值时会影响别人)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;unknown&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;*&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;类型安全的any&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;void&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;空值（undefined）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;没有值（或undefined）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;never&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;没有值&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;不能是任何值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;object&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;{name:’孙悟空’}&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;任意的JS对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;array&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;[1,2,3]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;任意JS数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;tuple&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;[4,5]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;元素，TS新增类型，固定长度数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;enum&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;enum{A, B}&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;枚举，TS中新增类型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字面量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; color: &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&#39;black&#39;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; num: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;
&amp;lt;!--code￼&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;--&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void,一般是&lt;strong&gt;函数&lt;/strong&gt;使用；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; unusable: &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;
&amp;lt;!--code￼&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;--&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;object（&lt;strong&gt;没啥用&lt;/strong&gt;）,用来指定对象中包含的属性值，必须匹配。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj: object = &amp;#123;&amp;#125;;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj: &amp;#123;name &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;#125;
&lt;span class=&quot;comment&quot;&gt;//表示任意类型的属性&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ovj:&amp;#123;name:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&amp;#123;propName:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;#125;:&lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;&amp;#125;    
&amp;lt;!--code￼&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;--&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tuple&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x: [&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;];
x = [&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]; 
&amp;lt;!--code￼&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类型断言&quot;&gt;&lt;a href=&quot;#类型断言&quot; class=&quot;headerlink&quot; title=&quot;类型断言&quot;&gt;&lt;/a&gt;类型断言&lt;/h3&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>k8s中的副本控制器</title>
    <link href="http://yoursite.com/2021/08/23/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes/k8s%E4%B8%AD%E7%9A%84%E5%89%AF%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2021/08/23/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes/k8s%E4%B8%AD%E7%9A%84%E5%89%AF%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
    <published>2021-08-23T13:43:24.000Z</published>
    <updated>2021-08-24T14:11:45.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Replication-Controller详解"><a href="#Replication-Controller详解" class="headerlink" title="Replication Controller详解"></a>Replication Controller详解</h2><p>Replication Controller简称RC，它能够保证Pod持续运行，并且在任何时候都有指定数量的Pod副本，在此基础上提供一些高级特性，比如滚动升级和弹性伸缩。</p><ul><li><strong>确保pod数量</strong>：它会确保Kubernetes中有指定数量的Pod在运行。如果少于指定数量的pod，Replication Controller会创建新的，反之则会删除掉多余的以保证Pod数量不变。</li><li><strong>确保pod健康</strong>：当pod不健康，运行出错或者无法提供服务时，Replication Controller也会杀死不健康的pod，重新创建新的。</li><li><a href="https://cloud.tencent.com/product/as?from=10680"><strong>弹性伸缩</strong></a> ：在业务高峰或者低峰期的时候，可以通过Replication Controller动态的调整pod的数量来提高资源的利用率。同时，配置相应的监控功能（Hroizontal Pod Autoscaler），会定时自动从监控平台获取Replication Controller关联pod的整体资源使用情况，做到自动伸缩。</li><li><strong>滚动升级</strong>：滚动升级为一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定，在初始化升级的时候就可以及时发现和解决问题，避免问题不断扩大。</li></ul><p>当我们需要启动多个pod的时候我们就可以通过以下方式来确保pod的启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spec.replicas：副本数量3</span><br><span class="line"> spec.selector：RC通过spec.selector来筛选要控制的Pod</span><br><span class="line"> spec.template：这里写Pod的定义（但不需要apiVersion和kind）</span><br><span class="line"> spec.template.metadata.labels：Pod的label，可以看到这个label与spec.selector相同</span><br></pre></td></tr></table></figure><h2 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h2><p>ReplicaSet是下一代复本控制器。ReplicaSet和 <em>Replication Controller</em>之间的唯一区别是现在的选择器支持。<em>Replication Controller**</em>只支持基于等式的selector<strong>（env=dev或environment!=qa），但ReplicaSet还支持新的，基于</strong>集合的selector**（version in (v1.0, v2.0)或env notin (dev, qa)）。</p><p>ReplicaSet可确保指定数量的pod“replicas”在任何设定的时间运行。然而，Deployments是一个更高层次的概念，它管理ReplicaSets，并提供对pod的声明性更新以及许多其他的功能。因此，我们建议您使用Deployments而不是直接使用ReplicaSets，除非您<strong>需要自定义更新编排</strong>或根本不需要更新。</p><p>直接使用Deployments并在规范部分定义应用程序。</p><h2 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h2><p>Deployment为Pod和Replica Set（下一代Replication Controller）提供<strong>声明式</strong>更新。</p><p>你只需要在Deployment中描述你想要的<strong>目标状态是什么</strong>，Deployment controller就会帮你将Pod和Replica  Set的实际状态改变到你的目标状态。你可以定义一个全新的Deployment，也可以创建一个新的替换旧的Deployment。</p><p><strong>Deployment拥有更加灵活强大的升级、回滚功能。</strong></p><p>在执行过程中也只能通过ctrl+C来终止，进行恢复。<strong>当rc升级完成后就没有办法回滚了，因为新的rc会替换掉旧的rc</strong>.</p><p>一个Deployment<strong>控制多个rs主要是为了支持回滚机制</strong>，每当Deployment操作时，Kubernetes会重新生成一个Replica Set并保留，以后有需要的话就可以回滚至之前的状态。 </p><ul><li>使用Deployment来创建ReplicaSet。ReplicaSet在后台创建pod。检查启动状态，看它是成功还是失败。</li><li>然后，通过更新Deployment的<strong>PodTemplateSpec</strong>字段来声明Pod的新状态。这会创建一个新的ReplicaSet，Deployment会按照控制的速率将pod从旧的ReplicaSet移动到新的ReplicaSet中。</li><li>如果当前状态不稳定，<strong>回滚</strong>到之前的Deployment revision。每次回滚都会更新Deployment的revision。</li><li>扩容Deployment以满足更高的负载。</li><li>暂停Deployment来应用PodTemplateSpec的多个修复，然后恢复上线。</li><li>根据Deployment 的状态判断上线是否hang住了。</li><li>清除旧的不必要的ReplicaSet。</li></ul><p><img src="/2021/08/23/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes/k8s%E4%B8%AD%E7%9A%84%E5%89%AF%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%99%A8/Deployment.png" alt="Deployment"></p><h2 id="声明式的升级应用"><a href="#声明式的升级应用" class="headerlink" title="声明式的升级应用"></a>声明式的升级应用</h2><h3 id="rc的滚动升级"><a href="#rc的滚动升级" class="headerlink" title="rc的滚动升级"></a>rc的滚动升级</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rolling-update kubia-v1 kubia-v2 --image=luksa/kubia:v2</span><br></pre></td></tr></table></figure><p>使用kubia-v2版本应用来替换运行着kubia-v1的RC，将新的复制控制器命名为kubia-v2，并使用luksa/kubia:v2最为镜像。</p><p>升级完成后使<code>kubectl describe rc kubia-v2</code>查看升级后的状态。</p><p>1.直接更新pod和RC的标签并不是一个很的方案；</p><p>2.kubectl只是<strong>执行升级中的客户端</strong>，但如果执行kubectl过程中失去了网络连接，升级将会被中断，pod和RC将会处于一个中间的状态，<strong>所以才有了Deployment资源</strong>的引入。</p><p> RC的滚动升级不具有Deployment在应用版本升级过程中的历史记录、新旧版本数量的精细控制等功能</p><h3 id="使用Deployment声明式的升级应用"><a href="#使用Deployment声明式的升级应用" class="headerlink" title="使用Deployment声明式的升级应用"></a>使用Deployment声明式的升级应用</h3><h4 id="升级应用"><a href="#升级应用" class="headerlink" title="升级应用"></a>升级应用</h4><p>　　Rs替代Rc来复制个管理pod。</p><p>　　创建Deployment前确保删除所有的RC和pod，但是暂时保留Service，</p><p>　　kubectl delete rc –all</p><p>　　创建Deployment</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#kubectl create -f kubectl.depl-v1.yaml --record //--record可以记录历史版本</span><br><span class="line"></span><br><span class="line">#查看Deployment的相关信息</span><br><span class="line">#kubectl get deployment</span><br><span class="line">#kubectl describe deployment</span><br><span class="line"></span><br><span class="line">#查看部署状态：</span><br><span class="line">#kubectl rollout status deployment kubia</span><br></pre></td></tr></table></figure><h4 id="触发deployment升级"><a href="#触发deployment升级" class="headerlink" title="触发deployment升级"></a>触发deployment升级</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#kubectl edit deployment kubia //修改完后资源对象会被更新</span><br><span class="line">#kubectl patch deployment kubia -p &#x27;&#123;...&#125;&#x27; //只能包含想要更新的字段</span><br><span class="line">#kubectl apply -f kubia-deploy-v2.yml //如果yml中定义的资源不存在，会自动被创建</span><br><span class="line">#kubectl replace -f kubia-deploy-v2.yml //如果yml中定义的资源不存在，则会报错</span><br></pre></td></tr></table></figure><p>　　修改configmap并不会触发升级，如果想要触发，可以创建新的configmap并修改pod模板引用新的configmap。</p><h4 id="回滚deployment"><a href="#回滚deployment" class="headerlink" title="回滚deployment"></a>回滚deployment</h4><p>　　在上述升级deployment过程中可以使用如下命令来观察升级的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubectl rollout status deployment kubia</span><br></pre></td></tr></table></figure><p>　　如果出现报错，如何进行停止？可以使用如下命令进行回滚到先前部署的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubectl rollout undo deployment kubia</span><br></pre></td></tr></table></figure><p>　　如何显示deployment的历史版本？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubectl rollout history deployment kubia</span><br></pre></td></tr></table></figure><p>　　如何回滚到特定的版本？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubectl rollout undo deployment kubia --to-revision=1</span><br></pre></td></tr></table></figure><h4 id="控制滚动升级的速率"><a href="#控制滚动升级的速率" class="headerlink" title="控制滚动升级的速率"></a>控制滚动升级的速率</h4><p>　　在deployment的滚动升级过程中，<strong>有两个属性决定一次替换多少个pod</strong>：maxSurge、maxUnavailable,可以通过strategy字段下的rollingUpdate的属性来配置，</p><p>　　maxSurge：决定期望的副本数，默认值为25%，如果副本数设置为4个，则在滚动升级过程中，不会运行超过5个pod。</p><p>　　maxUnavaliable: 决定允许多少个pod处于不可用状态，默认值为25%，如果副本数为4，那么只能有一个pod处于不可用状态，</p><p>​    默认情况下如果10分钟内没有升级完成，将被视为失败，如果要修改这个参数可以使用kubectl describe deploy kubia 查看到一条ProgressDeadline-Exceeded的记录，可以修改此项参数修改判断时间。</p><h2 id="升级策略"><a href="#升级策略" class="headerlink" title="升级策略"></a>升级策略</h2><h3 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h3><p>是默认的更新策略</p><p>它在删除一部分旧版本Pod资源的同时，补充创建一部分新版本的Pod对象进行应用升级，其优势是升级期间，容器中应用提供的服务不会中断，但要求应用程序能够应对新旧版本同时工作的情形，例如新旧版本兼容同一个数据库方案等。不过，<strong>更新操作期间，不同客户端得到的响应内容可能会来自不同版本的应用。</strong><br>Deployment控制器的滚动更新操作并非在同一个ReplicaSet控制器对象下删除并创建Pod资源，而是将它们分置于两个不同的控制器之下：<strong>旧控制器的Pod对象数量不断减少的同时，新控制器的Pod对象数量不断增加，直到旧控制器不再拥有Pod对象</strong>，而新控制器的副本数量变得完全符合期望值为止</p><p>滚动更新时，应用升级期间还要确保可用的Pod对象数量不低于某阈值以确保可以持续处理客户端的服务请求，变动的方式和Pod对象的数量范围将通过<strong>spec.strategy.rollingUpdate.maxSurge和spec.strategy.rollingUpdate.maxUnavailable</strong>两个属性协同进行定义，它们的功用如图所示</p><p><img src="/2021/08/23/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes/k8s%E4%B8%AD%E7%9A%84%E5%89%AF%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%99%A8/%E6%BB%9A%E5%8A%A8%E5%8D%87%E7%BA%A7" alt="滚动升级"></p><p>eployment控制器也支持用户保留其滚动更新历史中的旧ReplicaSet对象版本,这赋予了控制器进行应用回滚的能力：用户可按需回滚到指定的历史版本。控制器可保存的历史版本数量由“spec.revisionHistoryLimit”属性进行定义。当然，也只有保存于revision历史中的ReplicaSet版本可用于回滚，因此，用户要习惯性地在更新操作时指定保留旧版本。<br><img src="/2021/08/23/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes/k8s%E4%B8%AD%E7%9A%84%E5%89%AF%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%99%A8/%E5%9B%9E%E6%BB%9A%E6%93%8D%E4%BD%9C" alt="回滚操作"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Replication-Controller详解&quot;&gt;&lt;a href=&quot;#Replication-Controller详解&quot; class=&quot;headerlink&quot; title=&quot;Replication Controller详解&quot;&gt;&lt;/a&gt;Replication Controller详解&lt;/h2&gt;&lt;p&gt;Replication Controller简称RC，它能够保证Pod持续运行，并且在任何时候都有指定数量的Pod副本，在此基础上提供一些高级特性，比如滚动升级和弹性伸缩。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;确保pod数量&lt;/strong&gt;：它会确保Kubernetes中有指定数量的Pod在运行。如果少于指定数量的pod，Replication Controller会创建新的，反之则会删除掉多余的以保证Pod数量不变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确保pod健康&lt;/strong&gt;：当pod不健康，运行出错或者无法提供服务时，Replication Controller也会杀死不健康的pod，重新创建新的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/product/as?from=10680&quot;&gt;&lt;strong&gt;弹性伸缩&lt;/strong&gt;&lt;/a&gt; ：在业务高峰或者低峰期的时候，可以通过Replication Controller动态的调整pod的数量来提高资源的利用率。同时，配置相应的监控功能（Hroizontal Pod Autoscaler），会定时自动从监控平台获取Replication Controller关联pod的整体资源使用情况，做到自动伸缩。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;滚动升级&lt;/strong&gt;：滚动升级为一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定，在初始化升级的时候就可以及时发现和解决问题，避免问题不断扩大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们需要启动多个pod的时候我们就可以通过以下方式来确保pod的启动&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spec.replicas：副本数量3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; spec.selector：RC通过spec.selector来筛选要控制的Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; spec.template：这里写Pod的定义（但不需要apiVersion和kind）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; spec.template.metadata.labels：Pod的label，可以看到这个label与spec.selector相同&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ReplicaSet&quot;&gt;&lt;a href=&quot;#ReplicaSet&quot; class=&quot;headerlink&quot; title=&quot;ReplicaSet&quot;&gt;&lt;/a&gt;ReplicaSet&lt;/h2&gt;&lt;p&gt;ReplicaSet是下一代复本控制器。ReplicaSet和 &lt;em&gt;Replication Controller&lt;/em&gt;之间的唯一区别是现在的选择器支持。&lt;em&gt;Replication Controller**&lt;/em&gt;只支持基于等式的selector&lt;strong&gt;（env=dev或environment!=qa），但ReplicaSet还支持新的，基于&lt;/strong&gt;集合的selector**（version in (v1.0, v2.0)或env notin (dev, qa)）。&lt;/p&gt;
&lt;p&gt;ReplicaSet可确保指定数量的pod“replicas”在任何设定的时间运行。然而，Deployments是一个更高层次的概念，它管理ReplicaSets，并提供对pod的声明性更新以及许多其他的功能。因此，我们建议您使用Deployments而不是直接使用ReplicaSets，除非您&lt;strong&gt;需要自定义更新编排&lt;/strong&gt;或根本不需要更新。&lt;/p&gt;
&lt;p&gt;直接使用Deployments并在规范部分定义应用程序。&lt;/p&gt;
&lt;h2 id=&quot;Deployments&quot;&gt;&lt;a href=&quot;#Deployments&quot; class=&quot;headerlink&quot; title=&quot;Deployments&quot;&gt;&lt;/a&gt;Deployments&lt;/h2&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://yoursite.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
    <category term="容器云" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由</title>
    <link href="http://yoursite.com/2021/08/22/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2021/08/22/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E8%B7%AF%E7%94%B1/</id>
    <published>2021-08-22T12:38:25.000Z</published>
    <updated>2021-08-22T16:41:43.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue路由解释"><a href="#vue路由解释" class="headerlink" title="vue路由解释"></a>vue路由解释</h2><p>vue 的一个插件库，专门用来实现 SPA 应用 </p><ol><li>单页 Web 应用（single page web application，SPA）。 </li><li>整个应用<strong>只有一个完整的页面</strong>。 </li><li>点击页面中的导航链接不会刷新页面，只会做页面的<strong>局部更新</strong>。</li><li>数据需要<strong>通过 ajax 请求获取</strong>。</li></ol><p><strong>什么是路由?</strong> </p><ol><li>一个路由就是一组<strong>映射关系</strong>（key - value）</li><li>key 为路径, value 可能是 function 或 component</li></ol><p><strong>路由分类</strong></p><ol><li>后端路由：  <ol><li>理解：value 是 function, 用于处理客户端提交的请求。</li><li>工作过程：服务器接收到一个请求时, <strong>根据请求路径找到匹配的函数 来处理请求, 返回响应数据。</strong> </li></ol></li><li>前端路由：<ol><li>理解：value 是 component，用于<strong>展示页面内容</strong>。</li><li>工作过程：当浏览器的路径改变时, 对应的组件就会显示。</li></ol></li></ol><h2 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><strong>路由组件</strong>通常存放在<code>pages</code>文件夹，<strong>一般组件</strong>通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是<strong>被销毁掉的，需要的时候再去挂载。</strong></li><li>每个组件都有自己的<code>$route</code>属性，里面<strong>存储着自己的路由信息</strong>。</li><li>整个应用<strong>只有一个router</strong>，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="多级路由（多级路由）"><a href="#多级路由（多级路由）" class="headerlink" title="多级路由（多级路由）"></a>多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">routes:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:Message</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">path:&#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">   id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">            title:&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.query.id</span><br><span class="line">$route.query.title</span><br></pre></td></tr></table></figure></li></ol><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><ol><li><p>作用：可以<strong>简化路由</strong>的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Demo,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Test,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Hello,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--简化前，需要写完整的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/demo/test/welcome&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简化后，直接通过名字跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简化写法配合传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">name:&#x27;hello&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">   id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">            title:&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:Message,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:Detail</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail/666/你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">name:&#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">params:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">   id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">            title:&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则<strong>不能使用path配置项，必须使用name配置！</strong></p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Detail,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="function"><span class="title">props</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.query.id,</span><br><span class="line"><span class="attr">title</span>:route.query.title</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="&lt;router-link&gt;的replace属性"></a><code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">//前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">//后退</span></span><br><span class="line"><span class="built_in">this</span>.$router.go() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;m in messageList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m.id&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 跳转路由并携带params参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转路由并携带params参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">name:&#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">id:m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">title:m.title</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;m.title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;pushShow(m)&quot;</span>&gt;</span>push查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;replaceShow(m)&quot;</span>&gt;</span>replace查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Message&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">messageList</span>:[</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息001&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息002&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息003&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">pushShow</span>(<span class="params">m</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">query</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">id</span>:m.id,</span></span><br><span class="line"><span class="javascript"><span class="attr">title</span>:m.title</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">replaceShow</span>(<span class="params">m</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.replace(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">query</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">id</span>:m.id,</span></span><br><span class="line"><span class="javascript"><span class="attr">title</span>:m.title</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Vue Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;back&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;forward&quot;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试一下go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Banner&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">back</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.back()</span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(this.$router)</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">forward</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.forward()</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.go(<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件<strong>保持挂载</strong>，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span> <span class="comment">&lt;!--组件名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h3><ol><li>作用：路由组件所<strong>独有的两个钩子</strong>，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ol><li><p>作用：对路由进行<strong>权限控制</strong></p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;主页&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:News,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Message,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;消息&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Detail,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;详情&#x27;</span>&#125;,</span><br><span class="line"><span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.query.id,</span><br><span class="line"><span class="attr">title</span>:$route.query.title,</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;前置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断是否需要鉴权</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="built_in">document</span>.title = to.meta.title || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;主页&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:News,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;独享路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断是否需要鉴权</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Message,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;消息&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Detail,</span><br><span class="line"><span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;详情&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</span></span><br><span class="line"><span class="comment">// props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//props的第三种写法，值为函数</span></span><br><span class="line"><span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.query.id,</span><br><span class="line"><span class="attr">title</span>:$route.query.title,</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用</span></span><br><span class="line"><span class="comment">/* router.beforeEach((to,from,next)=&gt;&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;前置路由守卫&#x27;,to,from)</span></span><br><span class="line"><span class="comment">if(to.meta.isAuth)&#123; //判断是否需要鉴权</span></span><br><span class="line"><span class="comment">if(localStorage.getItem(&#x27;school&#x27;)===&#x27;atguigu&#x27;)&#123;</span></span><br><span class="line"><span class="comment">next()</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">alert(&#x27;学校名不对，无权限查看！&#x27;)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">next()</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="built_in">document</span>.title = to.meta.title || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vue路由解释&quot;&gt;&lt;a href=&quot;#vue路由解释&quot; class=&quot;headerlink&quot; title=&quot;vue路由解释&quot;&gt;&lt;/a&gt;vue路由解释&lt;/h2&gt;&lt;p&gt;vue 的一个插件库，专门用来实现 SPA 应用 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单页 Web 应用（single page web application，SPA）。 &lt;/li&gt;
&lt;li&gt;整个应用&lt;strong&gt;只有一个完整的页面&lt;/strong&gt;。 &lt;/li&gt;
&lt;li&gt;点击页面中的导航链接不会刷新页面，只会做页面的&lt;strong&gt;局部更新&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;数据需要&lt;strong&gt;通过 ajax 请求获取&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;什么是路由?&lt;/strong&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个路由就是一组&lt;strong&gt;映射关系&lt;/strong&gt;（key - value）&lt;/li&gt;
&lt;li&gt;key 为路径, value 可能是 function 或 component&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;路由分类&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后端路由：  &lt;ol&gt;
&lt;li&gt;理解：value 是 function, 用于处理客户端提交的请求。&lt;/li&gt;
&lt;li&gt;工作过程：服务器接收到一个请求时, &lt;strong&gt;根据请求路径找到匹配的函数 来处理请求, 返回响应数据。&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;前端路由：&lt;ol&gt;
&lt;li&gt;理解：value 是 component，用于&lt;strong&gt;展示页面内容&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;工作过程：当浏览器的路径改变时, 对应的组件就会显示。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;基本路由&quot;&gt;&lt;a href=&quot;#基本路由&quot; class=&quot;headerlink&quot; title=&quot;基本路由&quot;&gt;&lt;/a&gt;基本路由&lt;/h2&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装vue-router，命令：&lt;code&gt;npm i vue-router&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用插件：&lt;code&gt;Vue.use(VueRouter)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编写router配置项:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//引入VueRouter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; VueRouter &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;vue-router&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//引入Luyou 组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; About &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;../components/About&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Home &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;../components/Home&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建router实例对象，去管理一组一组的路由规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; router = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; VueRouter(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;routes&lt;/span&gt;:[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;#x27;/about&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;:About&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;#x27;/home&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;:Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//暴露router&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; router&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现切换（active-class可配置高亮样式）&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;router-link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;active-class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;active&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;router-link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定展示位置&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;router-view&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;router-view&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;




&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
    <category term="Vue基础" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件</title>
    <link href="http://yoursite.com/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/</id>
    <published>2021-08-19T13:32:14.000Z</published>
    <updated>2021-08-22T16:12:09.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue组件化编程"><a href="#Vue组件化编程" class="headerlink" title="Vue组件化编程"></a>Vue组件化编程</h1><h2 id="为什么要用组件？"><a href="#为什么要用组件？" class="headerlink" title="为什么要用组件？"></a>为什么要用组件？</h2><p>传统方式编写应用</p><p><img src="/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8.png" alt="传统方式编写应用"></p><p>组件方式编写应用</p><p><img src="/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E6%96%B9%E5%BC%8F%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8.png" alt="组件方式编写应用"></p><p><strong>模块</strong>：</p><ul><li>向外提供特定功能的 js 程序, 一般就是一个 js 文件</li><li>作用: 复用 js, 简化 js 的编写, 提高 js 运行效率</li><li>当应用中的js 都以模块来编写的, 那这个应用就是一个<strong>模块化</strong>的应用。 </li></ul><p><strong>组件</strong>：实现应用中<strong>局部</strong>功能<strong>代码</strong>和<strong>资源</strong>的集合</p><ul><li>用来实现局部(特定)功能效果的代码集合(html/css/js/image…..)</li><li>复用编码, 简化项目编码, 提高运行效率 </li><li>当应用中的功能都是多组件的方式来编写的, 那这个应用就是一个组件化的应用,。</li></ul><h2 id="组件的编写"><a href="#组件的编写" class="headerlink" title="组件的编写"></a>组件的编写</h2><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><p>一个文件中包含n个组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：创建school组件</span></span><br><span class="line"><span class="keyword">const</span> school = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div class=&quot;demo&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="comment">// el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">schoolName</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;北京昌平&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.schoolName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步：创建student组件</span></span><br><span class="line"><span class="keyword">const</span> student = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">studentName</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//第二步：注册组件（局部注册）</span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：创建hello组件</span></span><br><span class="line"><span class="keyword">const</span> hello = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//第二步：全局注册组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;hello&#x27;</span>,hello)</span><br></pre></td></tr></table></figure><p>使用组件：定义组件、注册组件、使用组件。</p><p>注意点：</p><ul><li>组件名：<ul><li>一个单词组成<ul><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ul></li><li>多个单词组成<ul><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li></ul></li><li>备注<ul><li>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</li><li>可以<strong>使用name</strong>配置项指定组件在开发者工具中呈现的名字。</li></ul></li></ul></li><li>关于组件标签<ul><li>第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code></li><li>第二种写法：<code>&lt;school/&gt;</code></li><li>备注：不用使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染。</li></ul></li></ul><p><code>const school = Vue.extend(options)</code> 可简写为：<code>const school = options</code></p><h4 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义student组件</span></span><br><span class="line"><span class="keyword">const</span> student = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;student&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义school组件</span></span><br><span class="line"><span class="keyword">const</span> school = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;student&gt;&lt;/student&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//注册组件（局部）</span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义hello组件</span></span><br><span class="line"><span class="keyword">const</span> hello = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;`</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;欢迎来到尚硅谷学习！&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义app组件</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="string">&lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">        hello</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;app&gt;&lt;/app&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="comment">//注册组件（局部）</span></span><br><span class="line">    <span class="attr">components</span>:&#123;app&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="VueComponent-重要"><a href="#VueComponent-重要" class="headerlink" title="VueComponent(重要)"></a>VueComponent(重要)</h4><ol><li>school组件本质是一个名为<code>VueComponent</code>的<strong>构造函数</strong>，且不是程序员定义的，是Vue.extend生成的。</li><li>我们只需要写<code>&lt;school/&gt;</code>或<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析时会<em>帮我们创建</em>school组件的实例对象，即Vue帮我们执行的：<code>new VueComponent(options)</code>。</li><li>注意：每次调用Vue.extend，返回的都是一个<strong>全新的VueComponent</strong>！</li><li>this指向：<ul><li><strong>组件配置</strong>中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</li><li><strong>new Vue(options)配置</strong>中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</li></ul></li><li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象，以后简称vm。（$children）vc不能写el,只有根实例可以写</li></ol><p><strong>一个重要的内置关系</strong>：</p><ul><li>一个重要的<strong>内置关系</strong>：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></li><li>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</li></ul><img src="/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/Vue与VueComponent的关系.png" alt="Vue与VueComponent的关系" style="zoom: 80%;"><h3 id="单文件组件："><a href="#单文件组件：" class="headerlink" title="单文件组件："></a>单文件组件：</h3><p>一个文件中只包含1个组件</p><p>代码高亮vetur，单文件组件的结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//School.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//组件交互相关的代码</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 组件样式 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">address</span>:<span class="string">&#x27;北京昌平&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="built_in">this</span>.name)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>汇总所有组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">School</span>&gt;</span><span class="tag">&lt;/<span class="name">School</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//引入组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> School <span class="keyword">from</span> <span class="string">&#x27;./School.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&#x27;./Student.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">School,</span></span><br><span class="line"><span class="javascript">Student</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125; </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line"><span class="attr">components</span>:&#123;App&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>练习一下单文件组件的语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;./main.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.vue不能直接在浏览器运行，需要<strong>脚手架</strong>。</p><h1 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h1><h2 id="初始化脚手架"><a href="#初始化脚手架" class="headerlink" title="初始化脚手架"></a>初始化脚手架</h2><p>Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）。vue cli(command line interface)</p><p>官网： <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>全局安装@vue/cli</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>切换到你要创建项目的目录</strong>，然后使用命令创建项目</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create xxxx</span><br></pre></td></tr></table></figure><ol start="3"><li>启动项目 </li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry </p><p><a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p></li><li><p>Vue 脚手架<strong>隐藏了所有 webpack 相关的配置</strong>，若想查看具体的 webpakc 配置， </p><p>请执行：<code>vue inspect &gt; output.js</code></p></li></ol></blockquote><h3 id="模板项目的结构"><a href="#模板项目的结构" class="headerlink" title="模板项目的结构:"></a>模板项目的结构:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public </span><br><span class="line">│ ├── favicon.ico: 页签图标 </span><br><span class="line">│ └── index.html: 主页面 </span><br><span class="line">├── src </span><br><span class="line">│ ├── assets: 存放静态资源 </span><br><span class="line">│ │ └── logo.png </span><br><span class="line">│ │── component: 存放组件 </span><br><span class="line">│ │ └── HelloWorld.vue </span><br><span class="line">│ │── App.vue: 汇总所有组件 </span><br><span class="line">│ │── main.js: 入口文件 </span><br><span class="line">├── .gitignore: git 版本管制忽略的配置 </span><br><span class="line">├── babel.config.js: babel 的配置文件 </span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件 </span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">该文件是整个项目的入口文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App组件，它是所有组件的父组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭vue的生产提示</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">关于不同版本的Vue：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.vue.js与vue.runtime.xxx.js的区别：</span></span><br><span class="line"><span class="comment">(1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</span></span><br><span class="line"><span class="comment">(2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用</span></span><br><span class="line"><span class="comment">render函数接收到的createElement函数去指定具体内容。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Vue实例对象---vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="comment">//render函数完成了这个功能：将App组件放入容器中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line"><span class="comment">// render:q=&gt; q(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template:`&lt;h1&gt;你好啊&lt;/h1&gt;`,</span></span><br><span class="line"><span class="comment">// components:&#123;App&#125;,</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 针对IE浏览器的一个特殊配置，含义是让IE浏览器以最高的渲染级别渲染页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启移动端的理想视口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置页签图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入第三方样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt; <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当浏览器不支持js时noscript中的元素就会被渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="render"><a href="#render" class="headerlink" title="render:"></a>render:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="comment">//render函数完成了这个功能：将App组件放入容器中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line"><span class="comment">// render:q=&gt; q(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template:`&lt;h1&gt;你好啊&lt;/h1&gt;`,</span></span><br><span class="line"><span class="comment">// components:&#123;App&#125;,</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 关于不同版本的Vue：</p><ol><li>vue.js与vue.runtime.xxx.js的区别：<ul><li>vue.js是完整版的Vue，包含：<strong>核心功能+模板解析器</strong>。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；<strong>没有模板解析器</strong>。</li></ul></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要<strong>**使用</strong><pre><code>render函数接收到的createElement函数去指定具体内容**。</code></pre></li></ol><p>打包时已经有了模板引擎，不需要在引入，这里需要一个第3方的。</p><h4 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h4><p>创建vue.config.js,调整脚手架的配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">pages</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="comment">//入口</span></span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">lintOnSave</span>:<span class="literal">false</span>, <span class="comment">//关闭语法检查</span></span><br><span class="line"><span class="comment">//开启代理服务器（方式一）</span></span><br><span class="line"><span class="comment">/* devServer: &#123;</span></span><br><span class="line"><span class="comment">    proxy: &#x27;http://localhost:5000&#x27;</span></span><br><span class="line"><span class="comment">  &#125;, */</span></span><br><span class="line"><span class="comment">//开启代理服务器（方式二）</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/test&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line"><span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/atguigu&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="comment">// ws: true, //用于支持websocket</span></span><br><span class="line">        <span class="comment">// changeOrigin: true //用于控制请求头中的host值</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/demo&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line"><span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/demo&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="comment">// ws: true, //用于支持websocket</span></span><br><span class="line">        <span class="comment">// changeOrigin: true //用于控制请求头中的host值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些常用属性"><a href="#一些常用属性" class="headerlink" title="一些常用属性"></a>一些常用属性</h3><p><strong>ref属性</strong></p><p><strong>作用：</strong>用于给节点打标识</p><p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）。</p><p>使用：</p><ul><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDOM&quot;</span>&gt;</span>点我输出上方的DOM元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">&quot;sch&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//引入School组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> School <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;School&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">msg</span>:<span class="string">&#x27;欢迎学习Vue！&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">showDOM</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.title) <span class="comment">//真实DOM元素</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.btn) <span class="comment">//真实DOM元素</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.sch) <span class="comment">//School组件的实例对象（vc）</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>props配置项</strong></p><ol><li><p>作用：用于父组件给子组件<strong>传递数据</strong> </p></li><li><p><strong>读取方式一</strong>: 只指定名称 <code>props: [&#39;name&#39;, &#39;age&#39;, &#39;setName&#39;]</code></p></li><li><p><strong>读取方式二: 指定名称和类型</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    name: String, </span><br><span class="line">    age: Number, </span><br><span class="line">    setNmae: Function </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>读取方式三: 指定名称/类型/必要性/默认值</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;name: &#123;type: String, required: <span class="literal">true</span>, default:xxx&#125;, &#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是<strong>只读</strong>的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请<strong>复制props的内容到data中一份</strong>，然后去修改data中的数据。</p></blockquote><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span><span class="comment">&lt;!-- 动态绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&#x27;./components/Student&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;Student&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Student.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：&#123;&#123;myAge+1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateAge&quot;</span>&gt;</span>尝试修改收到的年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">msg</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">myAge</span>:<span class="built_in">this</span>.age</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">updateAge</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.myAge++</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//简单声明接收</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;] </span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//接收的同时对数据进行类型限制</span></span></span><br><span class="line"><span class="javascript"><span class="comment">/* props:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">name:String,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">age:Number,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">sex:String</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125; */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//接收的同时对数据：进行类型限制+默认值的指定+必要性的限制</span></span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="built_in">String</span>, <span class="comment">//name的类型是字符串</span></span></span><br><span class="line"><span class="javascript"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//name是必要的</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">age</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">default</span>:<span class="number">99</span> <span class="comment">//默认值</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">sex</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">required</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mixin混入</strong></p><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：<br>第一步定义混合：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二步使用混入：</p><p> ​    全局混入：<code>Vue.mixin(xxx)</code><br> ​    局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><p>mixin.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hunhe = &#123;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;你好啊！&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hunhe2 = &#123;</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// import &#123;hunhe,hunhe2&#125; from &#x27;../mixin&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">// mixins:[hunhe,hunhe2]</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ol><li><p>功能：用于<strong>增强Vue</strong></p></li><li><p>本质：包含<strong>install方法</strong>的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    Vue.filter(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    Vue.directive(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    Vue.mixin(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">    Vue.prototype.$myProperty = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h4 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h4><ol><li><p>作用：让样式在<strong>局部生效，防止冲突。</strong></p></li><li><p>写法：<code>&lt;style scoped&gt;</code> </p><ul><li><p><code>lang=&quot;less&quot;</code>,可以用不同的语言写，但vue脚手架的不支持，要安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="组件化的流程"><a href="#组件化的流程" class="headerlink" title="组件化的流程"></a>组件化的流程</h1><ol><li><p>组件化编码流程：</p><p> ​    (1).<strong>拆分</strong>静态组件：组件要按照<strong>功能点拆分</strong>，命名不要与html元素冲突。</p><p> ​    (2).实现动态组件：<strong>考虑好数据的存放位置</strong>，数据是一个组件在用，还是一些组件在用：</p><p> ​            1).一个组件在用：放在组件<strong>自身</strong>即可。</p><p> ​            2). 一些组件在用：放在他们<strong>共同的父组件</strong>上（<span style="color:red">状态提升</span>）。</p><p> ​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p> ​    (1).父组件 ==&gt; 子组件 通信（<strong>逐层传递</strong>）</p><p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个<strong>函数</strong>）</p></li><li><p>使用v-model时要切记：<strong>v-model绑定的值不能是props传过来的值</strong>，因为props是不可以修改的！</p></li><li><p>props传过来的若是<strong>对象类型的值</strong>，修改对象中的属性时Vue不会报错，但<strong>不推荐这样做</strong>。</p></li></ol><p><strong>uuid的库</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nanoid</span><br></pre></td></tr></table></figure><p><strong>存储webStorage</strong></p><ol><li><p>存储内容大小一般支持<strong>5MB</strong>左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p> ​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会<strong>随着浏览器窗口关闭而消失</strong>。</li><li>LocalStorage存储的内容，需要<strong>手动清除</strong>才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><p>localStorage.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;hello!!!&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;msg2&#x27;</span>,<span class="number">666</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(p))</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;msg2&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(result))</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(localStorage.getItem(&#x27;msg3&#x27;))</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;msg2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">deleteAllData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">localStorage</span>.clear()</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sessionStorage.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">sessionStorage.setItem(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;hello!!!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">sessionStorage.setItem(<span class="string">&#x27;msg2&#x27;</span>,<span class="number">666</span>)</span></span><br><span class="line"><span class="javascript">sessionStorage.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(p))</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;msg2&#x27;</span>))</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = sessionStorage.getItem(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(result))</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(sessionStorage.getItem(&#x27;msg3&#x27;))</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">sessionStorage.removeItem(<span class="string">&#x27;msg2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">deleteAllData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">sessionStorage.clear()</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @getStudent=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:getStudent=&quot;test&quot;/&gt;</code>  子组件<strong>通过getStudent进行调用</strong>自定义事件，调用父组件的test方法。</p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Demo ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.$refs.xxx.$on(<span class="string">&#x27;getStudent&#x27;</span>,<span class="built_in">this</span>.test);</span><br><span class="line">   <span class="built_in">this</span>.$refs.xxx.$once(<span class="string">&#x27;getStudent&#x27;</span>,<span class="built_in">this</span>.test)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。<code>&lt;Demo @getStudent.once=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:getStudent.once=&quot;test&quot;/&gt;</code>  </p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;getStudent&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code>，只能解绑一个。<code>this.$off([&#39;atguigu&#39;])</code></p></li><li><p>组件上也可以<strong>绑定原生DOM事件</strong>，需要使用<code>native</code>修饰符。<code>&lt;Demo @click.navie=&quot;test&quot;/&gt;</code></p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！在vue里面谁触发的事件fuction中是this就是那个组件，所以必须写成箭头函数。</p></li></ol><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="built_in">this</span>.demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。因为傀儡身上的事件一直存在。</p></li></ol><h2 id="消息订阅和发布"><a href="#消息订阅和发布" class="headerlink" title="消息订阅和发布"></a>消息订阅和发布</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(<span class="string">&#x27;xxx&#x27;</span>,<span class="built_in">this</span>.demo) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><p>订阅消息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;School&#x27;,this)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">/* this.$bus.$on(&#x27;hello&#x27;,(data)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">console.log(&#x27;我是School组件，收到了数据&#x27;,data)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;) */</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.pubId = pubsub.subscribe(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">msgName,data</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(&#x27;有人发布了hello消息，hello消息的回调执行了&#x27;,msgName,data)</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// this.$bus.$off(&#x27;hello&#x27;)</span></span></span><br><span class="line"><span class="javascript">pubsub.unsubscribe(<span class="built_in">this</span>.pubId)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消息发布</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(&#x27;Student&#x27;,this.x)</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">sendStudentName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.$bus.$emit(&#x27;hello&#x27;,this.name)</span></span></span><br><span class="line"><span class="javascript">                pubsub.publish(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 <strong>DOM 更新结束</strong>后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:checked</span>=<span class="string">&quot;todo.done&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleCheck(todo.id)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;!todo.isEdit&quot;</span>&gt;</span>&#123;&#123;todo.title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-show</span>=<span class="string">&quot;todo.isEdit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;todo.title&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;handleBlur(todo.id,$event)&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;inputTitle&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(todo.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;!todo.isEdit&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;btn btn-edit&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleEdit(todo.id)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;MyItem&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: [<span class="string">&quot;todo&quot;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//勾选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleCheck</span>(<span class="params">id</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//通知App将todo的对象取反</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">this</span>.$bus.$emit(<span class="string">&quot;checkTodo&quot;</span>, id);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//删除</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleDelete</span>(<span class="params">id</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (confirm(<span class="string">&quot;确定删除吗？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//通知App删除</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">this</span>.$bus.$emit(<span class="string">&quot;deleteTodo&quot;</span>, id);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//编辑</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleEdit</span>(<span class="params">id</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.todo.hasOwnProperty(<span class="string">&quot;isEdit&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.todo.isEdit = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$set(<span class="built_in">this</span>.todo, <span class="string">&quot;isEdit&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//这里input都没有出现</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//下一轮，会在dom解析完执行</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.inputTitle.focus()</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//失去焦点，回调修改</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleBlur</span>(<span class="params">id, e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todo.isEdit = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(!e.target.value.tirm()) <span class="keyword">return</span> alert(<span class="string">&#x27;输入不能为空&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$bus.$emit(<span class="string">&quot;updateTodo&quot;</span>, <span class="built_in">this</span>.todo.id, e.target.value);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MyHeader</span> @<span class="attr">addTodo</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">MyHeader</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MyList</span> <span class="attr">:todos</span>=<span class="string">&quot;todos&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">MyList</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MyFooter</span> <span class="attr">:todos</span>=<span class="string">&quot;todos&quot;</span> @<span class="attr">checkAllTodos</span>=<span class="string">&quot;checkAllTodos&quot;</span> @<span class="attr">clearAllTodo</span>=<span class="string">&quot;clearAllTodo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">MyFooter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyHeader <span class="keyword">from</span> <span class="string">&#x27;./components/MyHeader&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyList <span class="keyword">from</span> <span class="string">&#x27;./components/MyList&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyFooter <span class="keyword">from</span> <span class="string">&#x27;./components/MyFooter&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    MyHeader,</span></span><br><span class="line"><span class="javascript">    MyList,</span></span><br><span class="line"><span class="javascript">    MyFooter</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">todos</span>: <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;todos&#x27;</span>)) || []</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//添加一个todo</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addTodo</span>(<span class="params">todoObj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todos.unshift(todoObj)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//勾选或取消勾选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">checkTodo</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todos.forEach( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> ( todo.id === id ) &#123;</span></span><br><span class="line"><span class="javascript">          todo.done = !todo.done;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//更改</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updateTodo</span>(<span class="params">id, title</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todos.forEach( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> ( todo.id === id ) &#123;</span></span><br><span class="line"><span class="javascript">          todo.title = title;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//勾选或取消勾选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">deleteTodo</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todos = <span class="built_in">this</span>.todos.filter( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> todo.id !== id;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//全选的控制</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">checkAllTodos</span>(<span class="params">done</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todos.forEach( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          todo.done = done;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">clearAllTodo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todos = <span class="built_in">this</span>.todos.filter( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> !todo.done;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">todos</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">handler</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;todos&#x27;</span>,<span class="built_in">JSON</span>.stringify(value));</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">//挂载事件用于通信</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;deleteTodo&#x27;</span>,<span class="built_in">this</span>.deleteTodo)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;checkTodo&#x27;</span>,<span class="built_in">this</span>.checkTodo)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;updateTodo&#x27;</span>,<span class="built_in">this</span>.updateTodo)</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">//解绑事件</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;checkTodo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;deleteTodo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;updateTodo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：</p><img src="/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/动画.png" alt="动画" style="zoom:80%;"></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><p>动画效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Test&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.hello-enter-active</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">animation</span>: my-css <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.hello-leave-active</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">animation</span>: my-css <span class="number">0.5s</span> linear reverse;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> my-css &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过渡效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Test&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="comment">/* 进入的起点、离开的终点 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.hello-enter</span>,<span class="selector-class">.hello-leave-to</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.hello-enter-active</span>,<span class="selector-class">.hello-leave-active</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">transition</span>: <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="comment">/* 进入的终点、离开的起点 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.hello-enter-to</span>,<span class="selector-class">.hello-leave</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>集成第三方</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install animate.css</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> </span></span><br><span class="line"><span class="tag"><span class="attr">appear</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">enter-active-class</span>=<span class="string">&quot;animate__swing&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">leave-active-class</span>=<span class="string">&quot;animate__backOutUp&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Test&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue中的ajax"><a href="#Vue中的ajax" class="headerlink" title="Vue中的ajax"></a>Vue中的ajax</h1><h2 id="AJAX跨域请求问题"><a href="#AJAX跨域请求问题" class="headerlink" title="AJAX跨域请求问题"></a>AJAX跨域请求问题</h2><p>引入：<code>npm i axios</code></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：<strong>不能配置多个代理</strong>，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>，  <span class="comment">//支持websocket</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,<span class="comment">//用于控制请求头中的host值</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;<span class="comment">//替换</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h3 id="vue-项目中常用的-2-个-Ajax-库"><a href="#vue-项目中常用的-2-个-Ajax-库" class="headerlink" title="vue 项目中常用的 2 个 Ajax 库"></a>vue 项目中常用的 2 个 Ajax 库</h3><ul><li><strong>axios</strong> </li><li><strong>vue-resource</strong> </li></ul><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置<strong>插入html结构</strong>，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成的是ul列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成的是h4标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="javascript">                <span class="comment">//数据在子组件自身</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>]</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>我是一些默认值，当使用者没有传递具体结构时，我会出现<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;Category&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>]</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.ax1x.com/2021/01/16/srJlq0.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;电影&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span>  Category  <span class="keyword">from</span> <span class="string">&quot;./components/Category&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>:&#123;Category&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">foods</span>:[<span class="string">&#x27;火锅&#x27;</span>,<span class="string">&#x27;烧烤&#x27;</span>,<span class="string">&#x27;小龙虾&#x27;</span>,<span class="string">&#x27;牛排&#x27;</span>],</span></span><br><span class="line"><span class="javascript"><span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>],</span></span><br><span class="line"><span class="javascript"><span class="attr">films</span>:[<span class="string">&#x27;《教父》&#x27;</span>,<span class="string">&#x27;《拆弹专家》&#x27;</span>,<span class="string">&#x27;《你好，李焕英》&#x27;</span>,<span class="string">&#x27;《尚硅谷》&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>我是一些默认值，当使用者没有传递具体结构时，我会出现1<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>我是一些默认值，当使用者没有传递具体结构时，我会出现2<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.ax1x.com/2021/01/16/srJlq0.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>更多美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>单机游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>网络游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;电影&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>经典<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>欢迎前来观影<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Category <span class="keyword">from</span> <span class="string">&#x27;./components/Category&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;Category&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">foods</span>:[<span class="string">&#x27;火锅&#x27;</span>,<span class="string">&#x27;烧烤&#x27;</span>,<span class="string">&#x27;小龙虾&#x27;</span>,<span class="string">&#x27;牛排&#x27;</span>],</span></span><br><span class="line"><span class="javascript"><span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>],</span></span><br><span class="line"><span class="javascript"><span class="attr">films</span>:[<span class="string">&#x27;《教父》&#x27;</span>,<span class="string">&#x27;《拆弹专家》&#x27;</span>,<span class="string">&#x27;《你好，李焕英》&#x27;</span>,<span class="string">&#x27;《尚硅谷》&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给使用者传递数据，类似于组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>我是默认的一些内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>],</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in baidu.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;&#123;games&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;games&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Category <span class="keyword">from</span> <span class="string">&#x27;./components/Category&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;Category&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ol><li>概念：专门在 Vue 中实现<strong>集中式状态</strong>（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的<strong>共享状态进行集中式的管理</strong>（读/写），也是一种组件间通信的方式，且适用于<strong>任意组件间通信</strong>。 </li><li>Github 地址: <a href="https://github.com/vuejs/vuex">https://github.com/vuejs/vuex</a></li></ol><img src="/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/全局组件共享数据.png" alt="全局组件共享数据" style="zoom: 67%;"><img src="/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/vuex实现组件共享数据.png" alt="vuex实现组件共享数据" style="zoom:67%;"><p>使用时刻：</p><ol><li>多个组件<strong>依赖于同一状态</strong> </li><li>来自不同组件的行为需要<strong>变更同一状态</strong></li></ol><h2 id="Vuex工作原理图（重要）"><a href="#Vuex工作原理图（重要）" class="headerlink" title="Vuex工作原理图（重要）"></a>Vuex工作原理图（重要）</h2><img src="/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/vuex.png" alt="vuex" style="zoom: 50%;"><ul><li><p><strong>State</strong>：vuex 管理的状态对象，保存了组件间共享的数据。</p></li><li><p><strong>Action</strong>: 包含多个响应用户动作的回调函数 。通过 commit( )来触发 mutation 中函数的调用, 间接更新 state。<strong>可以包含异步代码（定时器, ajax 等等）</strong>。可以包含多个执行流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$store.dispatch(<span class="string">&#x27;对应的 action 回调名&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>Mutations</strong>:保存了操作对象，并且在操作里面有着state值和传递过来的值。包含多个直接更新 state 的方法。不能写异步代码、只能单纯的操作 state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit(<span class="string">&#x27;对应的 mutations 方法名&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>这个三个对象需要一个store来管理</p><h2 id="Vuex使用"><a href="#Vuex使用" class="headerlink" title="Vuex使用"></a>Vuex使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>安装：<code>npm i vuex</code></p></li><li><p>创建并引入</p><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code>，一般在store文件夹中的index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="function"><span class="title">jia</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.commit(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="function"><span class="title">JIA</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.sum += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在main.js中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="comment">//vuex</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  store,</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Vue.prototype.$bus = <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li><p>定义方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该文件同于常见vuex中最为核心的store</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用vuex插件</span></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="function"><span class="title">incrementOdd</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;actions&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (context.state.sum % <span class="number">2</span>)&#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;increment&#x27;</span>,value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">incrementWait</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;increment&#x27;</span>,value)</span><br><span class="line">          &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于操作数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state, value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;mulations&#x27;</span>);</span><br><span class="line">        state.sum += value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span> <span class="comment">//当前的和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并导出store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)使用</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;&#123;$store.state.sum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementOdd&quot;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementWait&quot;</span>&gt;</span>等一等再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;Count&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">n</span>: <span class="number">1</span>, <span class="comment">//用户选择的数字</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">sum</span>: <span class="number">0</span> <span class="comment">//当前的和</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&quot;increment&quot;</span>, <span class="built_in">this</span>.n);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&quot;increment&quot;</span>, -<span class="built_in">this</span>.n);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">incrementOdd</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;incrementOdd&quot;</span>, <span class="built_in">this</span>.n);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">incrementWait</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;incrementWait&quot;</span>, <span class="built_in">this</span>.n);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><ol><li><p>概念：当state中的数据<strong>需要经过加工后再使用</strong>时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><p>哪里使用哪里引入：import {mapState} from ‘vuex’</p><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...mapState(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...mapState([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...mapGetters(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...mapGetters([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...mapActions(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...mapActions([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...mapMutations(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...mapMutations([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若<strong>需要传递参数</strong>需要：在模板中<strong>绑定事件时传递好参数</strong>，否则参数是事件对象。</p></blockquote><h2 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h2><ol><li><p>目的：让代码更好维护，让多种<strong>数据分类更加明确</strong>。</p></li><li><p>修改<code>store.js</code>，分别放到2个js文件中，只需要在index.js中引入就可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.state.personAbout.list</span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...mapState(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.getters[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...mapGetters(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...mapActions(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...mapMutations(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue组件化编程&quot;&gt;&lt;a href=&quot;#Vue组件化编程&quot; class=&quot;headerlink&quot; title=&quot;Vue组件化编程&quot;&gt;&lt;/a&gt;Vue组件化编程&lt;/h1&gt;&lt;h2 id=&quot;为什么要用组件？&quot;&gt;&lt;a href=&quot;#为什么要用组件？&quot; class=&quot;headerlink&quot; title=&quot;为什么要用组件？&quot;&gt;&lt;/a&gt;为什么要用组件？&lt;/h2&gt;&lt;p&gt;传统方式编写应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8.png&quot; alt=&quot;传统方式编写应用&quot;&gt;&lt;/p&gt;
&lt;p&gt;组件方式编写应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/vue%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E6%96%B9%E5%BC%8F%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8.png&quot; alt=&quot;组件方式编写应用&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模块&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向外提供特定功能的 js 程序, 一般就是一个 js 文件&lt;/li&gt;
&lt;li&gt;作用: 复用 js, 简化 js 的编写, 提高 js 运行效率&lt;/li&gt;
&lt;li&gt;当应用中的js 都以模块来编写的, 那这个应用就是一个&lt;strong&gt;模块化&lt;/strong&gt;的应用。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组件&lt;/strong&gt;：实现应用中&lt;strong&gt;局部&lt;/strong&gt;功能&lt;strong&gt;代码&lt;/strong&gt;和&lt;strong&gt;资源&lt;/strong&gt;的集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来实现局部(特定)功能效果的代码集合(html/css/js/image…..)&lt;/li&gt;
&lt;li&gt;复用编码, 简化项目编码, 提高运行效率 &lt;/li&gt;
&lt;li&gt;当应用中的功能都是多组件的方式来编写的, 那这个应用就是一个组件化的应用,。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
    <category term="Vue基础" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
