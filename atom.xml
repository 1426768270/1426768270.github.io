<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>naive的博客</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-03-15T16:05:31.627Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>naive</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go文件测试反射和网络</title>
    <link href="http://yoursite.com/2022/03/12/Go/Go%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%8F%8D%E5%B0%84%E5%92%8C%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2022/03/12/Go/Go%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%8F%8D%E5%B0%84%E5%92%8C%E7%BD%91%E7%BB%9C/</id>
    <published>2022-03-12T08:38:16.000Z</published>
    <updated>2022-03-15T16:05:31.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文件"><a href="#一、文件" class="headerlink" title="一、文件"></a>一、文件</h2><h4 id="打开关闭"><a href="#打开关闭" class="headerlink" title="打开关闭"></a>打开关闭</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file,err:= os.open(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br></pre></td></tr></table></figure><h3 id="带缓冲的读取"><a href="#带缓冲的读取" class="headerlink" title="带缓冲的读取"></a>带缓冲的读取</h3><p>默认的相对路径是工程下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufferReader</span><span class="params">()</span></span>&#123;</span><br><span class="line">   file, err := os.Open(<span class="string">&quot;./src/file/d.txt&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;open file err=&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> file.Close()</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   创建一 *Reader, 是带缓冲的</span></span><br><span class="line"><span class="comment">   defaultBufSize = 4096 //默认缓冲为4096</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   reader := bufio.NewReader(file)</span><br><span class="line">   <span class="keyword">for</span>  &#123;</span><br><span class="line">      str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//读到换行结束</span></span><br><span class="line">      <span class="keyword">if</span> err == io.EOF &#123; <span class="comment">//表示文件的末尾</span></span><br><span class="line">         fmt.Print(str)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//输出内容</span></span><br><span class="line">      fmt.Print(str)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;文件读取结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一次性读取文件"><a href="#一次性读取文件" class="headerlink" title="一次性读取文件"></a>一次性读取文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">   file := <span class="string">&quot;./src/file/d.txt&quot;</span></span><br><span class="line">   <span class="comment">//读取到的是一个byte[],封装了open和close</span></span><br><span class="line">   content, err:= ioutil.ReadFile(file)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;read file err=&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%v&quot;</span>, <span class="keyword">string</span>(content))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">   filePath := <span class="string">&quot;./src/file/a.txt&quot;</span></span><br><span class="line">   file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;open file err=&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   str := <span class="string">&quot;hello,world&quot;</span></span><br><span class="line">   <span class="comment">//写入时，使用带缓存的 *Writer</span></span><br><span class="line">   writer := bufio.NewWriter(file)</span><br><span class="line">   writer.WriteString(str)</span><br><span class="line">   <span class="comment">//带缓存，没有写入</span></span><br><span class="line">   writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件打开方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">   <span class="comment">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.</span></span><br><span class="line">   O_RDONLY <span class="keyword">int</span> = syscall.O_RDONLY <span class="comment">// open the file read-only.</span></span><br><span class="line">   O_WRONLY <span class="keyword">int</span> = syscall.O_WRONLY <span class="comment">// open the file write-only.</span></span><br><span class="line">   O_RDWR   <span class="keyword">int</span> = syscall.O_RDWR   <span class="comment">// open the file read-write.</span></span><br><span class="line">   <span class="comment">// The remaining values may be or&#x27;ed in to control behavior.</span></span><br><span class="line">   O_APPEND <span class="keyword">int</span> = syscall.O_APPEND <span class="comment">// append data to the file when writing.</span></span><br><span class="line">   O_CREATE <span class="keyword">int</span> = syscall.O_CREAT  <span class="comment">// create a new file if none exists.</span></span><br><span class="line">   O_EXCL   <span class="keyword">int</span> = syscall.O_EXCL   <span class="comment">// used with O_CREATE, file must not exist.</span></span><br><span class="line">   O_SYNC   <span class="keyword">int</span> = syscall.O_SYNC   <span class="comment">// open for synchronous I/O.</span></span><br><span class="line">   O_TRUNC  <span class="keyword">int</span> = syscall.O_TRUNC  <span class="comment">// truncate regular writable file when opened.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><p>golang判断文件或文件夹是否存在的方法为使用<code>os.stat()</code>函数返回的错误值进行判断:</p><ol><li>如果返回的错误为nil,说明文件或文件夹存在</li><li>如果返回的错误类型使用<code>os.IsNotExist()</code>判断为true,说明文件或文件夹不存在</li><li>如果返回的错误为其它类型,则不确定是否在存在</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PathExists</span><span class="params">(path <span class="keyword">string</span>)</span><span class="params">(<span class="keyword">bool</span>,error)</span></span> &#123;</span><br><span class="line">err := os.Stat(path)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> os.lsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><p>可以完成包括图片视频的拷贝</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyFile</span><span class="params">(dstFileName <span class="keyword">string</span>, srcFileName <span class="keyword">string</span>)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span>&#123;</span><br><span class="line">   <span class="comment">//打开源文件</span></span><br><span class="line">   srcfile, err := os.Open(srcFileName)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;open file err=%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span>  srcfile.Close()</span><br><span class="line">   reader:= bufio.NewReader(srcfile)</span><br><span class="line">   <span class="comment">//目标文件</span></span><br><span class="line">   dstFile, err := os.OpenFile(dstFileName, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;open file err=%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span>  dstFile.Close()</span><br><span class="line">   writer := bufio.NewWriter(dstFile)</span><br><span class="line">   <span class="keyword">return</span> io.Copy(writer, reader)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testCopy</span><span class="params">()</span></span>&#123;</span><br><span class="line">   srcFile := <span class="string">&quot;./src/file/d.txt&quot;</span></span><br><span class="line">   dstFile := <span class="string">&quot;./src/file/b.txt&quot;</span></span><br><span class="line">   _, err := CopyFile(dstFile, srcFile)</span><br><span class="line">   <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;拷贝完成&quot;</span>)</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;open file err=%v\n&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计字符"><a href="#统计字符" class="headerlink" title="统计字符"></a>统计字符</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CharCount <span class="keyword">struct</span> &#123;</span><br><span class="line">   ChCount <span class="keyword">int</span> <span class="comment">//记录英文</span></span><br><span class="line">   NumCount <span class="keyword">int</span> <span class="comment">//数字</span></span><br><span class="line">   SpaceCount <span class="keyword">int</span>     <span class="comment">//记录空格</span></span><br><span class="line">   OtherCount <span class="keyword">int</span> <span class="comment">//其他字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">charCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//打开源文件</span></span><br><span class="line">   fileName := <span class="string">&quot;./src/file/d.txt&quot;</span></span><br><span class="line">   srcfile, err := os.Open(fileName)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;open file err=%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span>  srcfile.Close()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> count CharCount</span><br><span class="line">   reader := bufio.NewReader(srcfile)</span><br><span class="line">   <span class="comment">//循环读取</span></span><br><span class="line">   <span class="keyword">for</span>  &#123;</span><br><span class="line">      str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> _, v := <span class="keyword">range</span> str&#123;</span><br><span class="line">         <span class="keyword">switch</span> &#123;</span><br><span class="line">         <span class="keyword">case</span> v &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">         <span class="keyword">case</span> v &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">            count.ChCount++</span><br><span class="line">         <span class="keyword">case</span> v == <span class="string">&#x27; &#x27;</span> || v == <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">            count.SpaceCount++</span><br><span class="line">         <span class="keyword">case</span> v &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            count.NumCount++</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            count.OtherCount++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;ChCount=%v, SpaceCount=%v, NumCount=%v, OtherCount=%v&quot;</span>,</span><br><span class="line">      count.ChCount,count.SpaceCount,count.NumCount,count.OtherCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>flag包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">args</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> user <span class="keyword">string</span></span><br><span class="line">   <span class="keyword">var</span> pwd <span class="keyword">string</span></span><br><span class="line">   <span class="keyword">var</span> host <span class="keyword">string</span></span><br><span class="line">   <span class="keyword">var</span> port <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//接收命令行参数 -u后面的参数值</span></span><br><span class="line">   flag.StringVar(&amp;user, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;用户名，默认为空&quot;</span> )</span><br><span class="line">   flag.StringVar(&amp;pwd, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;密码，默认为空&quot;</span> )</span><br><span class="line">   flag.StringVar(&amp;host, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;主机，默认为localhost&quot;</span> )</span><br><span class="line">   flag.IntVar(&amp;port, <span class="string">&quot;port&quot;</span>, <span class="number">3306</span>,<span class="string">&quot;端口，默认为3306&quot;</span> )</span><br><span class="line">   <span class="comment">//必须调用，转换</span></span><br><span class="line">   flag.Parse()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;user=%v,pwd=%v,host=%v,port=%v&quot;</span>,user,pwd,host,port)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go build -o test.exe start.go args.go</span><br><span class="line">test.exe -u a -p 1</span><br><span class="line">user=a,<span class="built_in">pwd</span>=1,host=localhost,port=3306</span><br></pre></td></tr></table></figure><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><p>将有key-value结构的数据类型(比如<strong>结构体、map、切片</strong>序列化成json字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">   Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testJson</span><span class="params">()</span></span>&#123;</span><br><span class="line">   student := Student&#123;</span><br><span class="line">      Name: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">      Age:  <span class="number">18</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   data, err := json.Marshal(&amp;student)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;序列化错误，err=%v&quot;</span>,err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用tag将字段转换的名称更改,这里使用了反射机制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">   Age <span class="keyword">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalStruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">   str := <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;a\&quot;,\&quot;age\&quot;:18&#125;&quot;</span></span><br><span class="line">   <span class="keyword">var</span> student Student</span><br><span class="line">   err := json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;student)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;序列化错误，err=%v&quot;</span>,err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(student)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;a 18&#125;</span></span><br></pre></td></tr></table></figure><h2 id="二、单元测试"><a href="#二、单元测试" class="headerlink" title="二、单元测试"></a>二、单元测试</h2><p>Go语言中自带有一个轻量级的测试框架<code>testing</code>和自带的<code>go test</code>命令来实现单元测试和性能测试，testing框架和其他语言中的测试框架类似，可以<strong>基于这个框架写针对相应函数的测试用例</strong>，也可以基于该框架写相应的压力测试用例。通过单元测试，可以解决如下问题:</p><ol><li>确保每个函数是可运行，并且运行结果是正确的</li><li>确保写出来的代码<strong>性能是好</strong>的，</li><li>单元测试能及时的发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决，而性能测试的重点在于发现程序设计上的一些问题，让程序能够在高并发的情况下还能保持稳定</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXXX</span><span class="params">(t *testing.T)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>要编写一个新的测试套件，需要<strong>创建一个名称以_test go结尾的文件</strong>，该文件包含<code>TestXxx</code>函数，如上所述。将该<strong>文件放在与被测试的包相同的包</strong>中，<strong>该文件将被排除在正常的程序包之外</strong>，但在<strong>运行go test命令时将被包含</strong>。有关详细信息，<br>如果有需要，可以调用T和*B的Skip方法，跳过该测试或基准测试︰</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//被测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   res := <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n;i++&#123;</span><br><span class="line">      res +=i</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAddUpper</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">   res := addUpper(<span class="number">10</span>)</span><br><span class="line">   <span class="keyword">if</span> res != <span class="number">55</span> &#123;</span><br><span class="line">      t.Fatalf(<span class="string">&quot;AddUpper执行失败,期望值=%v, 实际值=%v&quot;</span>,<span class="number">55</span>, res)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//正确</span></span><br><span class="line">   t.Logf(<span class="string">&quot;AddUpper执行成功&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将文件写在cal_test中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestAddUpper</span><br><span class="line">    cal_test.go:21: AddUpper执行成功</span><br><span class="line">--- PASS: TestAddUpper (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      unittest        0.389s</span><br></pre></td></tr></table></figure><h2 id="三、反射"><a href="#三、反射" class="headerlink" title="三、反射"></a>三、反射</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>反射可以用来做适配器方法,在框架中特别多</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">testi = <span class="function"><span class="keyword">func</span><span class="params">(v1 <span class="keyword">int</span>, v2 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">t.Log(v1,v2)</span><br><span class="line">&#125;</span><br><span class="line">test2 := <span class="function"><span class="keyword">func</span><span class="params">(v1 <span class="keyword">int</span>, v2 <span class="keyword">int</span>, s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    t.Log(v1,v2,s)</span><br><span class="line">&#125;</span><br><span class="line">bridge= fund(call interfacet,args ...<span class="keyword">interface</span>&#123;&#125;)&#123;<span class="comment">//内容</span></span><br><span class="line">W√</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现调用test1对应的函数</span></span><br><span class="line">bridge(test1,<span class="number">1</span>,<span class="number">2</span>) </span><br><span class="line"><span class="comment">//实现调用test2对应的函数</span></span><br><span class="line">bridge(test2,<span class="number">1</span>,<span class="number">2</span>, <span class="string">&quot;test2&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>反射可以在运行时<strong>动态获取变量的各种信息，比如变量的类型(type)，类别(kind)</strong></li><li>如果是结构体变量，还可以获取到结构体本身的信息(包括<strong>结构体的字段、方法</strong>)</li><li>通过反射，可以修改变量的值,可以调用关联的方法。</li></ol><ul><li><code>reflect.Type(v)</code>返回接口，获取变量类型</li><li><code>reflect.Value(v)</code>返回结构体，获取变量的值</li></ul><p>变量、<code>interface&#123;&#125;</code>和<code>reflect.Value</code>是可以相互转换的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="keyword">var</span> student stu</span><br><span class="line"></span><br><span class="line"><span class="comment">//专门用于做反射，将student传入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">    <span class="comment">//将interface转成reflect.Value</span></span><br><span class="line">    rVal := reflect.ValueOf(b)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.reflect.Value转为interface&#123;&#125;</span></span><br><span class="line">    iVal := rVal.<span class="keyword">interface</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.将interface&#123;&#125;转成原理的变量类型，类型断言</span></span><br><span class="line">    v := iVal.(Stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="基本类型操作"><a href="#基本类型操作" class="headerlink" title="基本类型操作"></a>基本类型操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line"><span class="comment">//获取传入变量的type，kind</span></span><br><span class="line">rT := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType =&quot;</span>,rT) <span class="comment">//rType = int</span></span><br><span class="line"></span><br><span class="line">rV := reflect.ValueOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rValue =&quot;</span>,rV)<span class="comment">//rValue = 100</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取具体值</span></span><br><span class="line">    iV := rV.Interface()</span><br><span class="line">num := iV.(<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">reflectTest(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构体操作"><a href="#结构体操作" class="headerlink" title="结构体操作"></a>结构体操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">   Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest02</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.获取传入变量的type</span></span><br><span class="line">rT := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType =&quot;</span>,rT)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取传入变量的value</span></span><br><span class="line">rV := reflect.ValueOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rValue =&quot;</span>,rV)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取传入变量的Kind </span></span><br><span class="line">fmt.Printf(<span class="string">&quot;kind1=%v, kind2=%v \n&quot;</span>, rT.Kind(), rV.Kind())</span><br><span class="line"></span><br><span class="line">iV := rV.Interface()</span><br><span class="line">fmt.Printf(<span class="string">&quot;iv = %v, iV = %T&quot;</span>, iV, iV)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name : <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">Age : <span class="number">18</span> ,</span><br><span class="line">&#125;</span><br><span class="line">reflectTest02(stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改变量"><a href="#修改变量" class="headerlink" title="修改变量"></a>修改变量</h4><p>Elem返回v持有的接口<strong>保管的值的Value封装</strong>，或者v<strong>持有的指针指向的值的value封装</strong>。如果v的Kind不是Interface或Ptr会panic;如果v持有的值为nil，会返回value零值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">   modifyNum(&amp;num)</span><br><span class="line">   fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyNum</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">   rV := reflect.ValueOf(b)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;kind=%v\n&quot;</span>, rV.Kind()) <span class="comment">//ptr</span></span><br><span class="line">   rV.Elem().SetInt(<span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射实践"><a href="#反射实践" class="headerlink" title="反射实践"></a>反射实践</h3><ol><li>通过反射变量结构体的字段，调研结构体方法，并获得结构体标签的值</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name   <span class="keyword">string</span>        <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">   Age    <span class="keyword">int</span>       <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">   Score  <span class="keyword">float32</span>    <span class="string">`json:&quot;score&quot;`</span></span><br><span class="line">   Sex    <span class="keyword">string</span>        <span class="string">`json:&quot;sex&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span> <span class="title">Print</span><span class="params">()</span></span>&#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;-----start----&quot;</span>)</span><br><span class="line">   fmt.Println(s)</span><br><span class="line">   fmt.Println(<span class="string">&quot;-----end----&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span> <span class="title">GetSum</span><span class="params">(n1, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span> <span class="title">Set</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   score <span class="keyword">float32</span>, sex <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   s.Name = name</span><br><span class="line">   s.Age = age</span><br><span class="line">   s.Score = score</span><br><span class="line">   s.Sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStruct</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">   typ := reflect.TypeOf(a)</span><br><span class="line">   val := reflect.ValueOf(a)</span><br><span class="line">   kd := val.Kind()</span><br><span class="line">   <span class="keyword">if</span> kd != reflect.Struct &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;expect struct&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//结构体字段</span></span><br><span class="line">   num := val.NumField()</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;Field %d = %v \n&quot;</span>, i,  val.Field(i))</span><br><span class="line">      fmt.Printf(<span class="string">&quot;Field %d:%v tag=%v \n&quot;</span>, i, typ.Field(i), typ.Field(i).Tag.Get(<span class="string">&quot;json&quot;</span>))</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   method := val.NumMethod()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;methodNum=%v\n&quot;</span>, method)</span><br><span class="line">   <span class="keyword">var</span> params []reflect.Value</span><br><span class="line">   params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">10</span>))</span><br><span class="line">   params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">20</span>))</span><br><span class="line">   <span class="comment">//方法按字母排序</span></span><br><span class="line">   res := val.Method(<span class="number">0</span>).Call(params) <span class="comment">//传入参数 reflect.Value</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;res=&quot;</span>,res[<span class="number">0</span>].Int())   <span class="comment">//返回结果 reflect.Value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testMonster</span><span class="params">()</span></span>&#123;</span><br><span class="line">   monster := Monster&#123;</span><br><span class="line">      Name:  <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">      Age:   <span class="number">18</span>,</span><br><span class="line">      Score: <span class="number">30</span>,</span><br><span class="line">      Sex:   <span class="string">&quot;man&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   TestStruct(monster)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>适配器</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bridge</span><span class="params">(call <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">   n := <span class="built_in">len</span>(args)</span><br><span class="line">   inValue := <span class="built_in">make</span>([]reflect.Value, n)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">      inValue[i] = reflect.ValueOf(args[i])</span><br><span class="line">   &#125;</span><br><span class="line">   function := reflect.ValueOf(call)</span><br><span class="line">   function.Call(inValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReflectFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">   call1 := <span class="function"><span class="keyword">func</span><span class="params">(v1 ,v2 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">      fmt.Println(v1,v2)</span><br><span class="line">   &#125;</span><br><span class="line">   call2 := <span class="function"><span class="keyword">func</span><span class="params">(v1 ,v2 <span class="keyword">int</span>,s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">      fmt.Println(v1,v2,s)</span><br><span class="line">   &#125;</span><br><span class="line">   bridge(call1, <span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">   bridge(call2, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;s&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、网络编程"><a href="#四、网络编程" class="headerlink" title="四、网络编程"></a>四、网络编程</h2><p>Golang的主要设计目标之一就是面向大规模后端服务程序，网络通信这块是服务端程序必不可少也是至关重要的一部分。</p><p>服务端的处理流程</p><ol><li><p>监听端口</p></li><li><p>接收客户端的tcp链接，建立客户端和服务器端的链接.</p></li><li><p>创建goroutine，处理该链接的请求(通常客户端会通过链接发送请求包)</p></li></ol><p>客户端的处理流程</p><ol><li>建立与服务端的链接</li><li>发送请求数据，接收服务器端返回的结果数据</li><li>关闭链接</li></ol><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">   <span class="comment">//循环接收</span></span><br><span class="line">   <span class="keyword">defer</span> conn.Close() <span class="comment">//关闭</span></span><br><span class="line">   <span class="keyword">for</span>  &#123;</span><br><span class="line">      <span class="comment">//创建切片</span></span><br><span class="line">      buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">      <span class="comment">//等等客户端发送数据,这里会一直阻塞</span></span><br><span class="line">      fmt.Printf(<span class="string">&quot;等等客户端数据：%v\n&quot;</span>, conn.RemoteAddr())</span><br><span class="line">      n, err := conn.Read(buf) <span class="comment">//读取数据</span></span><br><span class="line">      <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;客户端退出&quot;</span>)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;服务器开始监听&quot;</span>)</span><br><span class="line">   listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;listen err=&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> listen.Close()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;listen suc=%v\n&quot;</span>, listen)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//循环等待</span></span><br><span class="line">   <span class="keyword">for</span>  &#123;</span><br><span class="line">      <span class="comment">//等待客户端</span></span><br><span class="line">      fmt.Println(<span class="string">&quot;等待客户端&quot;</span>)</span><br><span class="line">      conn, err := listen.Accept()</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;Accept err=&quot;</span>,err)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         fmt.Printf(<span class="string">&quot;Accept suc=%v,client ip=%v \n&quot;</span>, conn, conn.RemoteAddr())</span><br><span class="line">         <span class="keyword">go</span> process(conn)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;client dial err=&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;conn suc=%v\n&quot;</span>, conn)</span><br><span class="line">   <span class="comment">//发送数据</span></span><br><span class="line">   <span class="comment">//从终端获取</span></span><br><span class="line">   reader := bufio.NewReader(os.Stdin)</span><br><span class="line">   <span class="keyword">for</span>  &#123;</span><br><span class="line">      line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;ReadString err=&quot;</span>,err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//exit退出</span></span><br><span class="line">      <span class="keyword">if</span> strings.Trim(line, <span class="string">&quot;\r\n&quot;</span>) == <span class="string">&quot;exit&quot;</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;客户端退出&quot;</span>)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//发送消息</span></span><br><span class="line">      n, err := conn.Write([]<span class="keyword">byte</span>(line))</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;Write err=&quot;</span>, err)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;发送了 %d 字节的数据\n&quot;</span>, n)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、文件&quot;&gt;&lt;a href=&quot;#一、文件&quot; class=&quot;headerlink&quot; title=&quot;一、文件&quot;&gt;&lt;/a&gt;一、文件&lt;/h2&gt;&lt;h4 id=&quot;打开关闭&quot;&gt;&lt;a href=&quot;#打开关闭&quot; class=&quot;headerlink&quot; title=&quot;打开关闭&quot;&gt;&lt;/a&gt;打开关闭&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;file,err:= os.open(&lt;span class=&quot;string&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;带缓冲的读取&quot;&gt;&lt;a href=&quot;#带缓冲的读取&quot; class=&quot;headerlink&quot; title=&quot;带缓冲的读取&quot;&gt;&lt;/a&gt;带缓冲的读取&lt;/h3&gt;&lt;p&gt;默认的相对路径是工程下&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bufferReader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   file, err := os.Open(&lt;span class=&quot;string&quot;&gt;&amp;quot;./src/file/d.txt&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;open file err=&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;   创建一 *Reader, 是带缓冲的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;   defaultBufSize = 4096 //默认缓冲为4096&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   reader := bufio.NewReader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      str, err := reader.ReadString(&lt;span class=&quot;string&quot;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//读到换行结束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == io.EOF &amp;#123; &lt;span class=&quot;comment&quot;&gt;//表示文件的末尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fmt.Print(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//输出内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt.Print(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;文件读取结束&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;一次性读取文件&quot;&gt;&lt;a href=&quot;#一次性读取文件&quot; class=&quot;headerlink&quot; title=&quot;一次性读取文件&quot;&gt;&lt;/a&gt;一次性读取文件&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readAll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   file := &lt;span class=&quot;string&quot;&gt;&amp;quot;./src/file/d.txt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//读取到的是一个byte[],封装了open和close&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   content, err:= ioutil.ReadFile(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;read file err=&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(content))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;写文件&quot;&gt;&lt;a href=&quot;#写文件&quot; class=&quot;headerlink&quot; title=&quot;写文件&quot;&gt;&lt;/a&gt;写文件&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   filePath := &lt;span class=&quot;string&quot;&gt;&amp;quot;./src/file/a.txt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;open file err=&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   str := &lt;span class=&quot;string&quot;&gt;&amp;quot;hello,world&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//写入时，使用带缓存的 *Writer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   writer := bufio.NewWriter(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   writer.WriteString(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//带缓存，没有写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   writer.Flush()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
    <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go面向对象</title>
    <link href="http://yoursite.com/2022/02/23/Go/Go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2022/02/23/Go/Go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-02-23T14:52:21.000Z</published>
    <updated>2022-03-07T15:20:43.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Go的面向对象"><a href="#一、Go的面向对象" class="headerlink" title="一、Go的面向对象"></a>一、Go的面向对象</h2><ul><li><p>Golang也支持面向对象编程(OOP)，但是和传统的面向对象编程有区别，并不是纯粹的面向对象语言。所以我们说Golang<strong>支持面向对象编程特性</strong>是比较准确的。</p></li><li><p>Golang<strong>没有类(class)</strong>，Go语言的结构体(struct)和其它编程语言的类(class)有同等的地位，你可以理解Golang是基于struct来实现OOP特性的。</p></li><li><p>Golang面向对象编程非常简洁，去<strong>掉了传统OOP语言的继承、方法重载、构造函数和析构函数、隐藏的this指针</strong>等等</p></li><li><p>Golang仍然有面向对象编程的继承，封装和多态的特性，只是<strong>实现的方式和其它OOP语言不一样</strong>，比如继承: Golang<strong>没有extends 关键字</strong>，继承是通过<strong>匿名字段</strong>来实现。</p></li><li><p>Golang面向对象(OOP)很优雅，OOP本身就是语言类型系统(type system)的一部分，<strong>通过接口(interface)关联</strong>，<strong>耦合性低</strong>，也非常灵活。后面同学们会充分体会到这个特点。也就是说在Golang中<strong>面向接口编程</strong>是非常重要的特性。</p></li></ul><h2 id="二、struct"><a href="#二、struct" class="headerlink" title="二、struct"></a>二、struct</h2><p>定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">    Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)<br>布尔类型是false ，数值是0，字符串是””。<br>数组类型的默认值和它的元素类型相关，比如score [3]int则为[0,0,0]，<strong>指针，slice，和map的零值都是nil ，即还没有分配空间。</strong></p><p>结构体中如果是引用类型，不要补个结构体之间赋值会改变内容</p><p>创建结构体变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">p2 := Person&#123;<span class="string">&quot;a&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">//p2.Age = 18</span></span><br><span class="line"><span class="comment">//p2.Name = &quot;a&quot;</span></span><br><span class="line">fmt.Println(p2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 </span></span><br><span class="line"><span class="keyword">var</span> p3 *Person = <span class="built_in">new</span>(Person)</span><br><span class="line">p3.Name=<span class="string">&quot;smith&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="keyword">var</span> p4 *Person = &amp;Person&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>第3种和第4种坊式返回的是结构体指针。</li><li>结构体指针访问字段的标准方式应该是:<strong>(*结构体指针).字段名</strong>，比如<code>(*person).Name = &quot;tom&quot;</code></li><li>但go做了一个简化，也支持结构体指针.字段名,比如<code>person.Name = &quot;tom&quot;</code>。更加符合程序员使用的习惯，go<strong>编译器底层对person.Name做了转化(*person).Name</strong></li></ul><p>struct的每个字段上，可以写上一个tag，该tag可以通过反射机制获取，常见的使用场景就是<strong>序列号和反序列化。</strong></p><p>问题: json处理后的字段名也是首字母大写，这样如果我们是将json后的字符串返回给其它程序使用，比如jquery,php等,那么可能他们的不习惯这个命名方式,怎么办?<br>解决方案</p><ol><li>将Monster的字段首字母小写，这个行不通，你会发现处理后,返回的是空字符串,因为<code>json.Marshal</code> 相当于在其它包访问monster结构体，<strong>你首字母小写，就不能在其它包访问。</strong></li><li>使用<strong>tag标签</strong>来解决</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name <span class="keyword">string</span>    <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">   Age <span class="keyword">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useJson</span><span class="params">()</span></span>&#123;</span><br><span class="line">   monster := Monster&#123;<span class="string">&quot;a&quot;</span>,<span class="number">16</span>&#125;</span><br><span class="line">   <span class="comment">//字母只能是大写,否则访问不到</span></span><br><span class="line">   jsonMonster, _ := json.Marshal(monster)</span><br><span class="line">   <span class="comment">//fmt.Println(jsonMonster)</span></span><br><span class="line">   <span class="comment">//[123 34 78 97 109 101 34 58 34 97 34 44 34 65 103 101 34 58 49 54 125]</span></span><br><span class="line">  fmt.Println(<span class="keyword">string</span>(jsonMonster))</span><br><span class="line">    <span class="comment">//&#123;&quot;name&quot;:&quot;a&quot;,&quot;age&quot;:16&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Golang中的方法是<strong>作用在指定的数据类型</strong>上的(即。和<strong>指定的数据类型绑定</strong>)，因此自定义类型，都可以有方法，而不仅仅是struct。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">   Num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a A)</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   fmt.Println(a.Num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a A</span><br><span class="line">    a.test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在通过一个变量去调用方法时，其调用机制和函数─样。不一样的地方时，变量调用方法时，该变量本身也会作为一个参数传递到方法(如果变量是值类型，则进行值拷贝，如果变量是引用类型，则进行地质拷贝)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recevier <span class="keyword">type</span>)</span> <span class="title">methodName</span><span class="params">(参数列表)</span><span class="params">(返回值列表)</span></span>&#123;</span><br><span class="line"><span class="comment">//方法体</span></span><br><span class="line"><span class="comment">//return 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>为了提高效率通常使用指针的传递</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">   radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c *Circle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">3.14</span> * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> c Circle</span><br><span class="line">    <span class="comment">//标准 (&amp;c).area()</span></span><br><span class="line">    c.area()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Golang中的方法作用在指定的数据类型上的(即:和指定的数据类型绑定)，因此<strong>自定义类型,都可以有方法</strong>，而不仅仅是struct，比如int , float32等都可以有方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Integer <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(i Integer)</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">   fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testInteger</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> i Integer = <span class="number">10</span></span><br><span class="line">   i.<span class="built_in">print</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法的访问范围控制的规则，和函数一样。<strong>方法名首字母小写，只能在本包访问，方法首字母大写，可以在本包和其它包访问。</strong></p></li><li><p>如果一个变量实现了<code>string()</code>这个方法，那么<strong>fmt.Println默认会调用这个变量的String()进行输出</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">   b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line">   str := fmt.Sprintf(<span class="string">&quot;b=[%v]&quot;</span>,b.b)</span><br><span class="line">   <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testString</span><span class="params">()</span></span>&#123;</span><br><span class="line">   b := B&#123;</span><br><span class="line">      b :<span class="number">1</span>,</span><br><span class="line">   &#125; </span><br><span class="line">   fmt.Println(&amp;b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法和函数的区别"><a href="#方法和函数的区别" class="headerlink" title="方法和函数的区别"></a>方法和函数的区别</h3><ol><li><p>调用方式不一样函数的调用方式:<code>函数名(实参列表)</code><br>方法的调用方式:<code>变量.方法名(实参列表)</code></p></li><li><p>对于普通函数，接收者为值类型时，<strong>不能将指针类型的数据直接传递</strong>，反之亦然</p></li><li><p>对于方法（如struct的方法），接收者为值类型时，<strong>可以直接用指针类型的变量调用方法</strong>,反过来同样也可以</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里才能觉得是值传递函数指针传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b B)</span> <span class="title">testPointer</span><span class="params">()</span></span>&#123;</span><br><span class="line">   b.b = <span class="number">10</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;method&quot;</span>,b.b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">   b := B&#123;<span class="number">1</span>&#125;</span><br><span class="line">   (&amp;b).testPointer()<span class="comment">//这里只是将指针的值传递了过去</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;main&quot;</span>,b.b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//method 10</span></span><br><span class="line"><span class="comment">//main 1</span></span><br></pre></td></tr></table></figure><p>不管调用形式如何，真正决定是值拷贝还是地址拷贝，看这个方法是和哪个类型绑定.<br>如果是和值类型，比如(p Person)，则是值拷贝，如果和指针类型，比如是(p*Person)则是地址拷贝。</p></li></ol><h2 id="四、工厂模式"><a href="#四、工厂模式" class="headerlink" title="四、工厂模式"></a>四、工厂模式</h2><p>Golang的结构体<strong>没有构造函数，</strong>通常可以使用工厂模式来解决这个问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span>..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这里的Student的首字母s是大写的,如果我们想在其它包创建Student 的实例(比如main包),引入model包后，就可以直接创建Student结构体的变量(实例)。但是问题来了，如果首字母是小写的，比如是type student struct …就不不行了，怎么办-工工厂模式来解决.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">   Score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(n <span class="keyword">string</span>, s <span class="keyword">float64</span>)</span> *<span class="title">student</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;student&#123;</span><br><span class="line">      Name: n,</span><br><span class="line">      Score: s,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、继承"><a href="#五、继承" class="headerlink" title="五、继承"></a>五、继承</h2><p>继承可以<strong>解决代码复用</strong></p><p>当多个结构体存在相同的属性(字段)和方法时,可以从这些结构体中抽象出结构体(比如刚才的Student),在该结构体中定义这些相同的属性和方法。</p><p>也就是说:在Golang中，如果一个struct嵌套了另一个匿名结构体，那么<strong>这个结构体可以直接访问匿名结构体的字段和方法</strong>，从而实现了继承特性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span>&#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span>&#123;</span><br><span class="line">    Goods</span><br><span class="line">    Writer <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>结构体可以使用嵌套匿名结构体所有的字段和方法，即:首字母大写或者小写的字段、方法,都可以使用。</p></li><li><p>当我们直接通过b 访问字段或方法时，其执行流程如下比如<code>b.Name</code>,编译器会<strong>先看b对应的类型有没有Name</strong>，如果有，则直接调用B类型的Name字段,如果没有就去看B中嵌入的匿名结构体A有没有声明Name字段,如果有就调用,如果没有继续查找..如果都找不到就报错.</p></li><li><p>当结构体和匿名结构体有<strong>相同的字段或者方法</strong>时，编译器采用<strong>就近访问原则</strong>访问，如希望访问匿名结构体的字段和方法，可以<strong>通过匿名结构体名来区分</strong>.</p></li><li><p>如果一个struct<strong>嵌套了一个有名结构体</strong>，这种模式就是<strong>组合</strong>，如果是组合关系，那么在访问组合的结构体的字段或方法时，<strong>必须带上结构体的名字</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span>&#123;</span><br><span class="line">    good Goods</span><br><span class="line">    Writer <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="六、接口"><a href="#六、接口" class="headerlink" title="六、接口"></a>六、接口</h2><p>interface类型可以定义一组方法，但是这些不需要实现。并且interface<strong>不能包含任何变量</strong>。到某个自定义类型(比如结构体Phone)要使用的时候,在根据具体情况把这些方法写出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口名 <span class="keyword">interface</span>&#123;</span><br><span class="line">method1(参数列表)返回值列表</span><br><span class="line">    method2(参数列表)返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>接口里的所有方法都没有方法体，即接口的方法都是没有实现的方法。接口体现了程序设计的<strong>多态和高内聚低偶合</strong>的思想。</li><li>Golang中的接口，<strong>不需要显式的实现。只要一个变量</strong>，<strong>含有接口类型中的所有方法</strong>，那么<strong>这个变量就实现这个接口</strong>。因此，Golang中没有implement这样的关键字</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line">   Start()</span><br><span class="line">   Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;手机开始工作&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;手机停止工作&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">Working</span><span class="params">(usb Usb)</span></span>&#123;</span><br><span class="line">   usb.Start()</span><br><span class="line">   usb.Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testUsb</span><span class="params">()</span></span>&#123;</span><br><span class="line">   c := Computer&#123;&#125;</span><br><span class="line">   p := Phone&#123;&#125;</span><br><span class="line">   c.Working(p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手机开始工作</span></span><br><span class="line"><span class="comment">//手机停止工作</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>接口本身<strong>不能创建实例</strong>,但是可以指<strong>向一个实现了该接口</strong>的自定义类型的变量(实例)</li><li>接口中所有的方法都<strong>没有方法体</strong>,即都是没有实现的方法。</li><li>在Golang中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现了该接口。</li><li>一个自定义类型<strong>只有实现了某个接口，才能将该自定义类型的实例(变量)赋给接口类型</strong>。</li><li>只要是自定义数据类型，<strong>就可以实现接口</strong>，不仅仅是结构体类型。</li><li>一个自定义类型可以实现多个接口</li><li>Golang接口中<strong>不能有任何变量</strong></li><li>一个接口(比如A接口)可以继承多个别的接口(比如B,C接口)，这时如果要实现A接口,也必须将B,c接口的方法也全部实现。</li><li>interface类型默认是一个指针,I如果没有对interface初始化就使用，那么会输出nil</li><li>空接口interface没有任何方法，所以所有类型都实现了空接口</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span>  Test <span class="keyword">interface</span> &#123;</span><br><span class="line">   Say()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stc *Stu)</span> <span class="title">Say</span><span class="params">()</span></span>&#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;Say&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> stu Stu = Stu&#123;&#125;</span><br><span class="line">    <span class="comment">//报错，没有实现Stu，*Stu实现了接口</span></span><br><span class="line">   <span class="comment">//var t Test= stu</span></span><br><span class="line">    <span class="keyword">var</span> t Test= &amp;stu</span><br><span class="line">   t.Say()</span><br><span class="line">   fmt.Println(<span class="string">&quot;here&quot;</span>,t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和继承"><a href="#接口和继承" class="headerlink" title="接口和继承"></a>接口和继承</h3><ul><li>接口和继承解决的解决的问题不同<br>继承的价值主要在于:<strong>解决代码的复用性和可维护性</strong>。<br>接口的价值主要在于:<strong>设计，设计好各种规范(方法)</strong>，让其它自定义类型去实现这些方法。</li><li>接口比继承更加灵活<br>接口比继承更加灵活，继承是满足 <strong>is - a</strong>的关系，而接口只需满足 <strong>like - a</strong>的关系。</li><li>接口在一定程度上实现代码解耦</li></ul><h2 id="七、多态"><a href="#七、多态" class="headerlink" title="七、多态"></a>七、多态</h2><p>变量(实例)具有多种形态。面向对象的第三大特征，在Go语言，<strong>多态特征是通过接口实现的</strong>。可以按照<strong>统一的接口来调用不同的实现</strong>。这时<strong>接口变量就呈现不同的形态</strong>。</p><ul><li>多态参数<br>在前面的Usb接口案例，Usb usb，即可以接收手机变量，又可以接收相机变量，就体现了Usb接口多态</li><li>多态数组<br>给Usb数组中，存放Phone 结构体和Camera结构体变量</li></ul><h2 id="八、类型断言"><a href="#八、类型断言" class="headerlink" title="八、类型断言"></a>八、类型断言</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">   x <span class="keyword">int</span></span><br><span class="line">   y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useAssert</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">   <span class="keyword">var</span> point Point = Point&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">   a = point <span class="comment">//oK</span></span><br><span class="line">   <span class="comment">//如何将a赋给一个Point变量?</span></span><br><span class="line">   <span class="comment">// b = a不可以</span></span><br><span class="line">   <span class="keyword">var</span> b Point</span><br><span class="line">   b = a.(Point)</span><br><span class="line">   fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个接口变量，赋给自定义类型的变量.=&gt;引出类型断言.</p><p>类型断言判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y, ok := x.(<span class="keyword">float64</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;y的类型是%T值是=%v&quot;</span>, y. y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Go的面向对象&quot;&gt;&lt;a href=&quot;#一、Go的面向对象&quot; class=&quot;headerlink&quot; title=&quot;一、Go的面向对象&quot;&gt;&lt;/a&gt;一、Go的面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Golang也支持面向对象编程(OOP)，但是和传统的面向对象编程有区别，并不是纯粹的面向对象语言。所以我们说Golang&lt;strong&gt;支持面向对象编程特性&lt;/strong&gt;是比较准确的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Golang&lt;strong&gt;没有类(class)&lt;/strong&gt;，Go语言的结构体(struct)和其它编程语言的类(class)有同等的地位，你可以理解Golang是基于struct来实现OOP特性的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Golang面向对象编程非常简洁，去&lt;strong&gt;掉了传统OOP语言的继承、方法重载、构造函数和析构函数、隐藏的this指针&lt;/strong&gt;等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Golang仍然有面向对象编程的继承，封装和多态的特性，只是&lt;strong&gt;实现的方式和其它OOP语言不一样&lt;/strong&gt;，比如继承: Golang&lt;strong&gt;没有extends 关键字&lt;/strong&gt;，继承是通过&lt;strong&gt;匿名字段&lt;/strong&gt;来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Golang面向对象(OOP)很优雅，OOP本身就是语言类型系统(type system)的一部分，&lt;strong&gt;通过接口(interface)关联&lt;/strong&gt;，&lt;strong&gt;耦合性低&lt;/strong&gt;，也非常灵活。后面同学们会充分体会到这个特点。也就是说在Golang中&lt;strong&gt;面向接口编程&lt;/strong&gt;是非常重要的特性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、struct&quot;&gt;&lt;a href=&quot;#二、struct&quot; class=&quot;headerlink&quot; title=&quot;二、struct&quot;&gt;&lt;/a&gt;二、struct&lt;/h2&gt;&lt;p&gt;定义&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Cat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Age &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)&lt;br&gt;布尔类型是false ，数值是0，字符串是””。&lt;br&gt;数组类型的默认值和它的元素类型相关，比如score [3]int则为[0,0,0]，&lt;strong&gt;指针，slice，和map的零值都是nil ，即还没有分配空间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结构体中如果是引用类型，不要补个结构体之间赋值会改变内容&lt;/p&gt;
&lt;p&gt;创建结构体变量&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p2 := Person&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//p2.Age = 18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//p2.Name = &amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(p2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p3 *Person = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Person)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p3.Name=&lt;span class=&quot;string&quot;&gt;&amp;quot;smith&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p4 *Person = &amp;amp;Person&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;第3种和第4种坊式返回的是结构体指针。&lt;/li&gt;
&lt;li&gt;结构体指针访问字段的标准方式应该是:&lt;strong&gt;(*结构体指针).字段名&lt;/strong&gt;，比如&lt;code&gt;(*person).Name = &amp;quot;tom&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但go做了一个简化，也支持结构体指针.字段名,比如&lt;code&gt;person.Name = &amp;quot;tom&amp;quot;&lt;/code&gt;。更加符合程序员使用的习惯，go&lt;strong&gt;编译器底层对person.Name做了转化(*person).Name&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
    <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>数组、切片和map</title>
    <link href="http://yoursite.com/2022/02/21/Go/%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E5%92%8Cmap/"/>
    <id>http://yoursite.com/2022/02/21/Go/%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E5%92%8Cmap/</id>
    <published>2022-02-21T13:06:06.000Z</published>
    <updated>2022-02-23T14:51:44.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>var 数组名[数组大小]数据类型 <code>var a [5]int</code></p><p>4种初始化方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numsArrays01 [<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">3</span>]<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> numsArrays02 = [<span class="number">3</span>]<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> numsArrays03 = [...]<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> numsArrays04  = [<span class="number">3</span>]<span class="keyword">string</span> &#123;<span class="number">1</span>:<span class="string">&quot;1&quot;</span>,<span class="number">2</span>:<span class="string">&quot;2&quot;</span>,<span class="number">0</span>:<span class="string">&quot;3&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="for-range遍历"><a href="#for-range遍历" class="headerlink" title="for-range遍历"></a>for-range遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">traverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> numsArrays03 = [...]<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">   <span class="keyword">for</span> index, value := <span class="keyword">range</span> numsArrays03 &#123;</span><br><span class="line">      fmt.Println(index,value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个返回值index是数组的下标第，二个value是该下标位置的值。<br>他们都是仅在 for循环内部可见的局部变量。<br>遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线。<br>index和value的名称不是固定的.可以z自行指定。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><code>var arr []int</code>是一个<strong>slice切片</strong></li><li>数组创建之后有默认值</li><li>Go的数组属值类型，在默认情况下是<strong>值传递</strong>，因此会进行值拷贝。数组间不会相互影响如想<strong>在其它函数中，去修改原来的数组，可以使用引用传递(</strong>指针方式)</li><li><strong>长度是数组的一部分，在传递函数参数时，需要考虑数组的长度</strong>。</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要求:随机生成五个数,并将其反转打印</span></span><br><span class="line"><span class="comment">//1．随机生成五个数, rand.Intn()函数</span></span><br><span class="line"><span class="comment">//2．当我们得到随机数后，就放到一个数组int数组</span></span><br><span class="line"><span class="comment">//3．反转打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randArr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> intArr [<span class="number">5</span>] <span class="keyword">int</span></span><br><span class="line"><span class="comment">//需要加入随机数种子</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span> ;i &lt; <span class="built_in">len</span>(intArr); i++ &#123;</span><br><span class="line">intArr[i] = rand.Intn(<span class="number">100</span>) <span class="comment">// 0&lt;=x&lt;100</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(intArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ul><li>切片是数组的一个引用，因此切片是<strong>引用类型</strong>，在进行传递时，遵守引用传递的机制。</li><li>切片的使用和数组类似，遍历切片、访问切片的元素和求切片长度len(slice)都一样。</li><li>切片的<strong>长度是可以变化的</strong>，因此切片是一个<strong>可以动态变化数组</strong>。</li><li>切片定义的基本语法:<br><code>var变量名[类型]</code>比如: <code>var a []int</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> intArr [<span class="number">5</span>]<span class="keyword">int</span> = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">4</span>&#125;</span><br><span class="line">   </span><br><span class="line">   slice :=  intArr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">   fmt.Println(<span class="built_in">len</span>(slice))<span class="comment">//长度</span></span><br><span class="line">   fmt.Println(<span class="built_in">cap</span>(slice))<span class="comment">//容量 ，不定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p><img src="/2022/02/21/Go/%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E5%92%8Cmap/%E5%88%87%E7%89%87%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png" alt="image-20220221232718199"></p><ol><li><p>slice的确是一个<strong>引用类型</strong>,容量是动态变化的</p></li><li><p>slice从底层来说，其实就是一个<strong>数据结构</strong>(struct结构体)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">ptr *[<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span></span><br><span class="line">    <span class="built_in">cap</span> <span class="keyword">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><p>定义一个切片，然后让切片去引用一个已经创建好的数组。</p></li><li><p>第二种方式:通过make来创建切片.<br>基本语法: <code>var切片名[]type = make([], len,[cap])</code><br>参数说明: type:就是数据类型len :大小cap:指定切片容量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []float= <span class="built_in">make</span>([]<span class="keyword">float64</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>定义一个切片，直接就指定具体数组，使用原理类似make的方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []sting = []<span class="keyword">string</span>&#123;<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;mary&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>方式一和方式2的区别：</p><p>方式1是<strong>直接引用数组</strong>，这个数组是事先存在的，程序员是可见的。<br>方式2是通过make来创建切片，make也会创建一个数组，是<strong>由切片在底层进行维护</strong>,程序员是看不见的。</p></blockquote><p>切片和数组的变量方式相同</p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol><li><p>切片初始化时<code>var slice = arr[startlndex:endIndex]</code><br>说明:从arr数组下标为<code>startIndex</code>，取到下标为<code>endIndex</code>的元素(<strong>不含arr[endIndex</strong>])<br>切片初始化时，仍然不能越界。范围在[O-len(arr)]之间，但是<strong>可以动态增长</strong>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice = arr[<span class="number">0</span>:end]</span><br><span class="line"><span class="comment">//可以简写</span></span><br><span class="line"><span class="keyword">var</span> slice = arr[:end]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice = arr[start:<span class="built_in">len</span>(arr)]</span><br><span class="line"><span class="comment">//可以简写:</span></span><br><span class="line"><span class="keyword">var</span> slice = arr[start:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice = arr[<span class="number">0</span>:<span class="built_in">len</span>(arr)]</span><br><span class="line"><span class="comment">//可以简写:</span></span><br><span class="line"><span class="keyword">var</span> slice = arr[:]</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>cap是一个内置函数，用于统计切片的容量，即最大可以存放多少个元素。</p></li><li><p>切片定义完后，<strong>还不能使用，因为本身是一个空的</strong>，需要让其引用到一个数组，或者make一个空间供切片来使用</p></li><li><p>切片<strong>可以继续切片</strong></p></li><li><p>使用append内置函数，可以对切片进行<strong>动态追加</strong></p><p>切片append操作的底层原理分析:</p><ol><li>切片append操作的本质就是<strong>对数组扩容</strong></li><li>go底层会<strong>创建一下新的数组newArr</strong>(安装扩容后大小)</li><li>将slice原来包含的元素<strong>拷贝到新的数组newArr</strong></li></ol><p>4) slice<strong>重新引用到newArr</strong><br>5) 注意newArr是在<strong>底层来维护的</strong>，程序员不可见.</p></li><li><p>使用内置函数<code>copy</code>完成拷贝</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(slice,a) <span class="comment">//把a拷贝到slice</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="string和slice"><a href="#string和slice" class="headerlink" title="string和slice"></a>string和slice</h3><p>string底层<strong>是一个byte数组</strong>，因此string<strong>也可以进行切片处理</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;helloworld&quot;</span></span><br><span class="line">slice := str[<span class="number">6</span>:]</span><br></pre></td></tr></table></figure><p>string是<strong>不可变的</strong>，也就说不能通过<code>str[0]= 2</code>方式来修改字符串</p><p>如果需要修改字符串，可以先将<code>string -&gt; []byte</code>/或者<strong>[]rune -&gt;修改→重写转成string</strong>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr1 :=[ ]<span class="keyword">byte</span>(str)</span><br><span class="line">arr1[e]= <span class="string">&#x27;z&#x27;</span></span><br><span class="line">str = <span class="keyword">string</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//中文</span></span><br><span class="line">arr1 :=[ ]<span class="keyword">rune</span>(str)</span><br><span class="line">arr1[e]= <span class="string">&#x27;北&#x27;</span></span><br><span class="line">str = <span class="keyword">string</span>(arr1)</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>[][]</span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>var map变量名 map[keytype]valuetype</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">   a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">   </span><br><span class="line">    b := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    </span><br><span class="line">    c := <span class="keyword">map</span>[<span class="keyword">string</span>][<span class="keyword">string</span>]&#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map在使用前一定要make</li><li>map的key是不能重复，如果重复了，则以最后这个key-value为准</li><li>map的 value是可以相同的.</li><li>map的 key-value是无序</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>增加和更新： map[“key”]=value</p></li><li><p>删除 delete(map.”key),</p><p>全部删除可以直接创建一个新的map</p></li><li><p>查找 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val,ok := a[<span class="string">&quot;1&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.<span class="built_in">println</span>(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tarverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">   a := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">   a[<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line">   a[<span class="string">&quot;2&quot;</span>] = <span class="string">&quot;2&quot;</span></span><br><span class="line">   a[<span class="string">&quot;3&quot;</span>] = <span class="string">&quot;3&quot;</span></span><br><span class="line">   <span class="keyword">for</span> k,v := <span class="keyword">range</span> a &#123;</span><br><span class="line">      fmt.Println(k,v)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="map排序"><a href="#map排序" class="headerlink" title="map排序"></a>map排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">   a := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">   a[<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line">   a[<span class="string">&quot;2&quot;</span>] = <span class="string">&quot;2&quot;</span></span><br><span class="line">   a[<span class="string">&quot;4&quot;</span>] = <span class="string">&quot;4&quot;</span></span><br><span class="line">   a[<span class="string">&quot;3&quot;</span>] = <span class="string">&quot;3&quot;</span></span><br><span class="line">   <span class="keyword">var</span> keys []<span class="keyword">string</span></span><br><span class="line">   <span class="keyword">for</span> k,_ := <span class="keyword">range</span> a&#123;</span><br><span class="line">      keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">   &#125;</span><br><span class="line">   sort.Strings(keys)</span><br><span class="line">   <span class="keyword">for</span> _ , k := <span class="keyword">range</span> keys &#123;</span><br><span class="line">      fmt.Println(a[k])</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用切片辅助排序</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li>map是<strong>引用类型</strong>，遵守引用类型传递的机制，在一个函数接收map，修改后，会直接修改原来的map</li><li>map的容量达到后,再想map增加元素,会自动扩容，并不会发生panic，也就是说<strong>map能动态的增长键值对</strong>(key-value)</li><li>map的value也经常使用struct类型，更<strong>适合管理复杂的数据</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;var 数组名[数组大小]数据类型 &lt;code&gt;var a [5]int&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4种初始化方式&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numsArrays01 [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; = [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numsArrays02 = [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numsArrays03 = [...]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numsArrays04  = [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;for-range遍历&quot;&gt;&lt;a href=&quot;#for-range遍历&quot; class=&quot;headerlink&quot; title=&quot;for-range遍历&quot;&gt;&lt;/a&gt;for-range遍历&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numsArrays03 = [...]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index, value := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; numsArrays03 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt.Println(index,value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第一个返回值index是数组的下标第，二个value是该下标位置的值。&lt;br&gt;他们都是仅在 for循环内部可见的局部变量。&lt;br&gt;遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线。&lt;br&gt;index和value的名称不是固定的.可以z自行指定。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;var arr []int&lt;/code&gt;是一个&lt;strong&gt;slice切片&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数组创建之后有默认值&lt;/li&gt;
&lt;li&gt;Go的数组属值类型，在默认情况下是&lt;strong&gt;值传递&lt;/strong&gt;，因此会进行值拷贝。数组间不会相互影响如想&lt;strong&gt;在其它函数中，去修改原来的数组，可以使用引用传递(&lt;/strong&gt;指针方式)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长度是数组的一部分，在传递函数参数时，需要考虑数组的长度&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h3&gt;</summary>
    
    
    
    <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
    <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go简介</title>
    <link href="http://yoursite.com/2022/01/20/Go/Go%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2022/01/20/Go/Go%E7%AE%80%E4%BB%8B/</id>
    <published>2022-01-20T09:47:21.000Z</published>
    <updated>2022-02-20T14:58:30.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go的基本介绍"><a href="#Go的基本介绍" class="headerlink" title="Go的基本介绍"></a>Go的基本介绍</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言:Go =C+ Python，说明Go语言既有c静态语言程<br>序的运行速度，又能达到Python动态语言的快速开发。</p><ol><li><p>从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指<br>针等等，也<strong>保留了和c语言一样的编保执行方式及弱化的指针</strong>。</p></li><li><p>引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。</p></li><li><p>垃圾回收机制，内存自动回收，不需开发人员管理</p></li><li><p>天然并发</p><ol><li>从语言层面支持并发，实现简单</li><li>goroutine，轻量级线程，可实现大并发处理，高效利用多核。</li><li>基于CPS并发模型(Communicating Sequential Processes )实现</li></ol></li><li><p>吸收了管道通信机制，形成Go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信。</p></li><li><p>函数返回多个值</p></li><li><p>新的创新:比如切片、延时执行defer等</p></li></ol><h3 id="程序开发"><a href="#程序开发" class="headerlink" title="程序开发"></a>程序开发</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hello.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;hello,world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hello.go</code>所在的包是main，在go中，文件必须归属一个包。</p><p>在命令行可以通过build命令进行编译,在main包下执行下面命令可以得到一个执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build hello.go</span><br></pre></td></tr></table></figure><p>通过run也可以直接运行源码程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run hello.go</span><br></pre></td></tr></table></figure><p>2种编译方式区别</p><blockquote><p>如果我们先编译生成了可执行文件，那么我们可以将该可执行文件拷贝到<strong>没有go开发环境的机器上，仍然可以运行</strong><br>如果我们是直接<code>go fun go</code>源代码，那么如果要在另外一个机器上这么运行，也需要go开发环境，否则无法执行。<br>在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了很多。</p></blockquote><p>go语言提供了大量的标准库：<code>https://studygolang.com/pkgdoc</code></p><p>这些标准库在go语言的<code>src</code>目录下</p><h2 id="GO语法"><a href="#GO语法" class="headerlink" title="GO语法"></a>GO语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h4><ol><li><p>指定变量类型，声明后若不赋值,<strong>使用默认值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> </span><br></pre></td></tr></table></figure></li><li><p>根据值自行判定变量类型(类型推导)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.11</span></span><br></pre></td></tr></table></figure></li><li><p>省略var,注意.<code>:=</code>左侧的变量不应该是已经声明过的，否则会导致编译错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var string name = &quot;&quot;</span></span><br><span class="line">name := <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="一次性声明多个变量"><a href="#一次性声明多个变量" class="headerlink" title="一次性声明多个变量"></a>一次性声明多个变量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n1, n2 ,n3 <span class="keyword">int</span> </span><br><span class="line"><span class="keyword">var</span> n1, name, n3 = <span class="number">100</span>, <span class="string">&quot;&quot;</span>, <span class="number">888</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">n3 = <span class="number">300</span></span><br><span class="line">    n4 = <span class="number">900</span></span><br><span class="line">    name2 = <span class="string">&quot;mary&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.数值型</span><br><span class="line">1.1 整数类型(int,int8,int16,int32,int64,uint,uint8,uint16,uint32,uint64,byte)</span><br><span class="line">1.2 浮点型（float32,float64)默认float64</span><br><span class="line">2.字符型(没有专门字符类型，使用byte保存单个字母字符)</span><br><span class="line">3.布尔型(bool)</span><br><span class="line">4.字符串(string)</span><br></pre></td></tr></table></figure><h5 id="字符变量"><a href="#字符变量" class="headerlink" title="字符变量"></a>字符变量</h5><p>Go的字符串是<strong>由字节组成</strong>，对于ascii码的值可以保存到<code>byte,</code>大于255可以保存到<code>int</code>类型.</p><p>go语言字符使用<code>utf-8</code>，在Go中字符是一个整数，直接输出是该字符的码值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//演示golang中字符类型使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">//当我们直接输出byte值，就是输出了的对应的字符的码值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;c1=&quot;</span>, c1)</span><br><span class="line"><span class="comment">//如果我们希望输出对应字符,需要使用格式化输出</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;c1=%c c2=%c\n&quot;</span>, c1,c2)</span><br><span class="line"><span class="comment">//var c3 byte =‘北’/ /overflow溢出</span></span><br><span class="line">    <span class="keyword">var</span> c3 <span class="keyword">int</span> =<span class="string">&quot;北’</span></span><br><span class="line"><span class="string">    fmt.Printf(&quot;</span>c3=%c %d<span class="string">&quot;, c3, c3)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>Golang的字符串是<strong>不可变</strong>的</p><p>字符串的表示形式</p><ul><li>双引号，识别转义。</li><li>反引号，原生形式输出。</li></ul><h4 id="派生-复杂数据类型"><a href="#派生-复杂数据类型" class="headerlink" title="派生/复杂数据类型"></a>派生/复杂数据类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.指针(Pointer)</span><br><span class="line">2.数组</span><br><span class="line">3.结构体(struct)</span><br><span class="line">4.管道(Channel)</span><br><span class="line">5.函数(也是一种类型)</span><br><span class="line">6.切片(slice)</span><br><span class="line">7.接口(interface)</span><br><span class="line">8.map</span><br></pre></td></tr></table></figure><h4 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h4><p>需要<strong>显示转换</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int32</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="keyword">float32</span>(i)</span><br></pre></td></tr></table></figure><h5 id="基本数据类型和string的转换"><a href="#基本数据类型和string的转换" class="headerlink" title="基本数据类型和string的转换"></a>基本数据类型和string的转换</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">90</span></span><br><span class="line">str = fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, num1)</span><br></pre></td></tr></table></figure><p>还可以使用<code>strconv</code>包的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = strconv.FormatInt(<span class="keyword">int64</span>(num3), <span class="number">10</span>); <span class="comment">//把原类型转换为int64，以10进制转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点类型,f格式，10小数点后保留10位，float64</span></span><br><span class="line">str = strconv.FormatFloat(num4, <span class="string">&#x27;f&#x27;</span>, <span class="number">10</span>, <span class="number">64</span>);</span><br></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul><li>基本数据类型，变量<strong>存的就是值</strong>，也叫值类型</li><li>获取变量的地址，用&amp;，比如: <code>var nim int</code>,获取num的地址:<code>&amp;num</code></li><li>指针类型，变量<strong>存的是一个地址</strong>，这个地址指向的空间存的才是值比如: <code>var ptr *int = &amp;num</code></li><li>获取指针类型所指向的值，使用: <code>*</code>，比如: <code>var ptr int</code>,使用ptr获取p指向的</li></ul><p>使用细节</p><ul><li><p>值类型:基本数据类型int系列, float系列, bool, string、数组和结构体struct</p><p>变量直接存储值，内存通常在<strong>栈中分配</strong></p></li><li><p>引用类型:指针、slice切片、map、管道chan、interface等都是引用类型</p><p>变量存储的是一个<strong>地址</strong>，这个地址<strong>对应的空间才真正存储数据</strong>(值)，内存通常在<strong>堆上分配</strong>，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收。</p></li></ul><h4 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h4><ul><li>保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库不要冲突fmt。</li><li>变量名、函数名、常量名:采用驼峰法。</li><li>如果变量名、函数名、常量名首字母大写，则<strong>可以被其他的包访间</strong>;如果首字母小则<strong>只能在本包中使用</strong>（注:可以简单的理解成，首字母大写是公有的，首字母小写私有的)</li></ul><p>模块化支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE=off</span><br></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p> go的每一个文件都是属于一个包的，也就是说go是以<strong>包的形式来管理文件和项目目录结构</strong>的</p><ul><li>区分相同名字的函数、</li><li>变量等标识符当程序文件很多时,可以很好的管理项目</li><li>控制函数、变量等访问范围，即作用域</li></ul><ol><li><p>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夫对应的包名就是utils,文件的包名通常和文件所在的文件夹名一致,—般为小写字母。</p></li><li><p>当一个文件要使用其它包函数或变量时，需要先引入对应的包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span><span class="string">&quot;包名&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;包名&quot;</span></span><br><span class="line"><span class="string">&quot;包名&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>package指令在文件第一行，然后是import指令。</p><p>在import包时，路径从$GOPATH的 src下开始，不用带src ,编译器会自动从src下开始引入</p></li><li><p>为了让其它包的文件，可以访问到本包的函数，则该函数名的<strong>首字母需要大写</strong>，类似其它<br>语言的public ,这样才能跨包访问。</p></li><li><p>主访问其它包函数时，其语法是<strong>包名.函数名</strong>。</p></li><li><p>如果包名较长，Go支持给包取别名，注意细节。取别名后，原来的包名就不能使用了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">别名 <span class="string">&quot;包名&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>同一个包下不能有相同的函数名。</p></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>函数的形参列表可以是多个，返回值列表也可以是多个。</p></li><li><p>形参列表和返回值列表的数据类型可以是值类型和引用类型。</p></li><li><p>函数的命名遵循标识符命名规范，首字母<strong>不能是数字</strong>，首字母大写该函数可以被本包文件和其它包文件使用，类似public ，首字母小写，只能被本包文件使用，其它包文件不能使用，类似private.</p></li><li><p>函数中的变量是局部的,函数外不生效</p></li><li><p>基本数据类型和数组默认都是<strong>值传递的</strong>，即进行值拷贝。在函数内修改，不会影响到原来的值。</p></li><li><p>如果希望函数内的变量能修改函数外的变量，可以<strong>传入变量的地址&amp;</strong>，函数内以指针的方式操作变量。从效果上看类似引用</p></li><li><p>Go函数<strong>不支持重载</strong>。空接口</p></li><li><p>在Go中，函数<strong>也是一种数据类型</strong>，可以赋值给一个变量，则该变量就是一个函数类型的变量了。通过该变量可以对函数调用。</p></li><li><p>函数既然是一种数据类型，因此在Go中，<strong>函数可以作为形参</strong>，并且调用!</p></li><li><p>为了简化数据类型定义，Go支持自定义数据类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本语法:type自定义数据类型名数据类型理解:相当于一个别名</span></span><br><span class="line"><span class="keyword">type</span> mylnt <span class="keyword">int</span> <span class="comment">//这时mylnt就等价int来使用了.</span></span><br><span class="line"><span class="keyword">type</span> mySum <span class="function"><span class="keyword">func</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>//这时<span class="title">mySum</span>就等价一个函数类型<span class="title">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">in</span></span></span><br></pre></td></tr></table></figure></li><li><p>支持对函数返回值命名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(n1 <span class="keyword">int</span>,n2 <span class="keyword">int</span>)</span><span class="params">(sum <span class="keyword">int</span>, sub <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    sum = n1+n2</span><br><span class="line">    sub = n1-n2</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Go支持<strong>可变参数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持0到多个参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(args... <span class="keyword">int</span>)</span> <span class="title">sum</span> <span class="title">int</span></span> &#123;&#125;</span><br><span class="line"><span class="comment">//支持1到多个参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, args... <span class="keyword">int</span>)</span> <span class="title">sum</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>args<strong>是slice</strong>,通过args[index]可以访间到各个值。</p></li></ul><h4 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h4><p>每一个源文件都可以包含一个init函数，该函数会<strong>在main函数执行前</strong>，被Go运行框架调用，也就是说init会在main函数前被调用。</p><ul><li><p>如果一个文件同时包含全局变量定义，init函数和main函数，则执行的流程是<strong>变量定义-&gt;init函数-&gt;main函数</strong></p></li><li><p>init函数最主要的作用，就是完成一些初始化的工作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> age = test()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;init&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">init</span><br><span class="line">main</span><br></pre></td></tr></table></figure></li><li><p>如果main.go和util.go定义了变量和init</p><p>首先执行util.go的变量定义和init函数，然后执行main的变量定义和main函数。</p></li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包就是<strong>一个函数和与其相关的引用环境</strong>组合的一个整体(实体)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//累加器</span></span><br><span class="line"><span class="function">func <span class="title">AddUpper</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">int</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> n <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">   <span class="keyword">return</span> func(x <span class="keyword">int</span>) <span class="keyword">int</span> &#123;</span><br><span class="line">      n = n + x</span><br><span class="line">      <span class="keyword">return</span>  n</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">f := AddUpper()</span><br><span class="line">fmt.Println(f(<span class="number">1</span>)) <span class="comment">//11</span></span><br><span class="line">    fmt.Println(f(<span class="number">2</span>))<span class="comment">//13</span></span><br><span class="line">    fmt.Println(f(<span class="number">3</span>))<span class="comment">//16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的是一个匿名函数，但是这个匿名函数引用到函数外的n ,因此这个匿名函数就和n形成一个整体，构成闭包。</p><p>当我们反复的调用f函数时，因为<strong>n是初始化一次</strong>，因此每调用一次就进行累计。</p><p>我们要搞清楚闭包的关键，就是要<strong>分析出返回的函数它使用(引用)到哪些变量</strong>，因为函数和它引用到的变量共同构成闭包。l</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编写一个函数makeSuffix(suffix string)可以接收一个文件后缀名(比如.jpg)，并返回一个闭包</span><br><span class="line">调用闭包，可以传入一个文件名，如果该文件名没有指定的后缀(比如.jpg) ,则返回文件名.jpg，如果已经有.jpg后缀，则返回原文件名。</span><br><span class="line">strings.HasSuffix</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffix</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span> <span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> !strings.HasSuffix(name,suffix)&#123;</span><br><span class="line">         <span class="keyword">return</span> name + suffix</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> name</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   f := makeSuffix(<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">   fmt.Println(f(<span class="string">&quot;winter&quot;</span>))</span><br><span class="line">   fmt.Println(f(<span class="string">&quot;bird.jpg&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的<strong>匿名函数和makeSuffix (suffix string)的suffix变量</strong>组合成一个闭包,因为返回的函数引用到suffix这个变量<br>我们体会一下闭包的好处，如果使用传统的方法，也可以轻松实现这个功能，但是传统方法需要<strong>每次都传入后缀名</strong>，比如 .jpg ,而闭包<strong>因为可以保留上次引用的某个值</strong>，所以我们传入—次就可以反复使用。</p><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>在函数中，程序员经常需要创建资源(比如，数据库连接、文件句柄、锁等)，为了在函数执行完毕后,及时的释放资源，Go的设计者提供defer(延时机制)。</p><p>当执行到defer时，暂时不执行，会将defer后面的语句（包括数据）压入到独立的栈(defer栈)。当函数执行完毕后,再从defer栈,按照<strong>先入后出</strong>的方式出栈,执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;n1=&quot;</span>, n1)</span><br><span class="line">   <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;n2=&quot;</span>, n2)</span><br><span class="line">   n1++</span><br><span class="line">   n2++</span><br><span class="line">   res := n1 + n2</span><br><span class="line">   fmt.Println(<span class="string">&quot;res=&quot;</span>, res)</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把数据也同时压入</span></span><br></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li>函数内部声明/定义的变量叫局部变量，作用域仅限于函数内部。</li><li>函数外部声明/定义的变量叫全局变量，作用域<strong>在整个包都有效</strong>，如果其<strong>首字母为大写，则作用域在整个程序有效。</strong></li><li>如果变量是在一个代码块，比如 for / if中，那么这个变量的的作用域就在该代码块</li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">package</span> main</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="string">&quot;fmt&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="string">&quot;strconv&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="string">&quot;strings&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">func <span class="title">used</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//1.字符串长度</span></span><br><span class="line">   str := <span class="string">&quot;hello北&quot;</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;str :&quot;</span>, len(str))</span><br><span class="line">   <span class="comment">//2.遍历中文</span></span><br><span class="line">   r := []rune(str)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; len(r); i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;字符:=%c\n&quot;</span>, r[i])</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//3.字符串转整数,校验数据类型</span></span><br><span class="line">   n, err := strconv.Atoi(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != nil&#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;转换的结果：&quot;</span>, n)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//4. 整数转字符串</span></span><br><span class="line">   str2 := strconv.Itoa(<span class="number">123</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;str=%v, str=%T\n&quot;</span>, str2, str2)</span><br><span class="line">   <span class="comment">//5.字符串转byte</span></span><br><span class="line">   <span class="keyword">var</span> bytes = []<span class="keyword">byte</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;bytes=%v\n&quot;</span>, bytes)</span><br><span class="line">   <span class="comment">//6.byte转字符串</span></span><br><span class="line">   str = string([]<span class="keyword">byte</span>&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;str=%v\n&quot;</span>, str)</span><br><span class="line">   <span class="comment">//7. 10进制转2进制</span></span><br><span class="line">   str = strconv.FormatInt(<span class="number">123</span>, <span class="number">2</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;123对应的二进制是=%v\n&quot;</span>, str)</span><br><span class="line">   str = strconv.FormatInt(<span class="number">123</span>, <span class="number">16</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;123对应的二进制是=%v\n&quot;</span>, str)</span><br><span class="line">   <span class="comment">//8. 是否包含</span></span><br><span class="line">   b := strings.Contains(<span class="string">&quot;seafood&quot;</span>, <span class="string">&quot;sea&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;b=%v\n&quot;</span>, b)</span><br><span class="line">   <span class="comment">//9. 统计一个字符串有几个子串</span></span><br><span class="line">   num := strings.Count(<span class="string">&quot;ceheee&quot;</span>, <span class="string">&quot;e&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;num=%v\n&quot;</span>, num)</span><br><span class="line">   <span class="comment">//10. 不区分大小写 ==区分字母大小写</span></span><br><span class="line">   b = strings.EqualFold(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;ABC&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;b=%v\n&quot;</span>, b)</span><br><span class="line">   <span class="comment">//11. 返回子串第一次出现的index值</span></span><br><span class="line">   index := strings.Index(<span class="string">&quot;NTL_abc&quot;</span>,<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;index=%v\n&quot;</span>, index)</span><br><span class="line">   <span class="comment">//12. 最后一次出现</span></span><br><span class="line">   index = strings.LastIndex(<span class="string">&quot;go golang&quot;</span>,<span class="string">&quot;go&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;index=%v\n&quot;</span>, index)</span><br><span class="line">   <span class="comment">//13.)将指定的子串替换成另外一个子串: n可以指定你希望替换几个，如果n=-1表示全部替换</span></span><br><span class="line">   str= strings.Replace(<span class="string">&quot;go go hello&quot;</span>,<span class="string">&quot;go&quot;</span>,<span class="string">&quot;go语言&quot;</span>,<span class="number">1</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;str=%v\n&quot;</span>, str)</span><br><span class="line">   <span class="comment">//14.按照指定的某个字符，为分割标识，将一个字符串拆分成字符串数组﹔</span></span><br><span class="line">   strArr := strings.Split(<span class="string">&quot;hello,world,ok&quot;</span>,<span class="string">&quot;.&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;strArr=%v\n&quot;</span>, strArr)</span><br><span class="line">   <span class="comment">//15.将字符串的字母进行大小写的转换: strings.ToLower(&quot;Go&quot;)</span></span><br><span class="line">   str = strings.ToUpper(<span class="string">&quot;Go&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;str=%v\n&quot;</span>, str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">usedTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//1.获取当前时间</span></span><br><span class="line">   now := time.Now()</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.通过now获取年日月</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;年=%v\n&quot;</span>, now.Year())</span><br><span class="line">   fmt.Printf(<span class="string">&quot;月=%v\n&quot;</span>, now.Month())</span><br><span class="line">   fmt.Printf(<span class="string">&quot;日=%v\n&quot;</span>, now.Day())</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3， 格式化日期</span></span><br><span class="line">   dateStr := fmt.Sprintf(<span class="string">&quot;%d-%d-%d %d:%d:%d\n&quot;</span>, now.Year(),now.Month(),</span><br><span class="line">      now.Day(),now.Hour(),now.Minute(),now.Second())</span><br><span class="line">   fmt.Printf(<span class="string">&quot;dateStr=%v&quot;</span>,dateStr)</span><br><span class="line">   <span class="comment">//只能用这个时间，根据这个时间然后可以输出对应的位置</span></span><br><span class="line">   fmt.Printf(now.Format(<span class="string">&quot;2006-01/02 15:04:05&quot;</span>))</span><br><span class="line">   fmt.Println()</span><br><span class="line">   fmt.Printf(now.Format(<span class="string">&quot;01&quot;</span>)) <span class="comment">//月</span></span><br><span class="line">   fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间常量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">   Nanosecond  Duration = <span class="number">1</span></span><br><span class="line">   Microsecond          = <span class="number">1000</span> * Nanosecond</span><br><span class="line">   Millisecond          = <span class="number">1000</span> * Microsecond</span><br><span class="line">   Second               = <span class="number">1000</span> * Millisecond</span><br><span class="line">   Minute               = <span class="number">60</span> * Second</span><br><span class="line">   Hour                 = <span class="number">60</span> * Minute</span><br><span class="line">)</span><br><span class="line"><span class="number">100</span> * time.Millisecond</span><br><span class="line"></span><br><span class="line"><span class="comment">//休眠</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sleep</span><span class="params">(d Duration)</span></span></span><br></pre></td></tr></table></figure><p>获取unix时间戳</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now.Unix(),nowUnixNano()</span><br></pre></td></tr></table></figure><h5 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h5><p>Golang 设计者为了编程方便，提供了一些函数，这些函数可以直接使用，我们称为Go的内置函数。文档: <code>https://studygolang.com/pkgdoc</code> -&gt; builtin</p><p>make:用来分配内存，主要用来分配引用类型，比如channel、map、slice。</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>在默认情况下，当发生错误后(panic)程序就会退出（崩溃.)I</p><p>如果我们希望:当发生错误后，可以捕获到错误，并进行处理，保证程序可以继续执行。</p><p>Go语言追求简洁优雅，所以，Go语言不支持传统的try…catch…finally这种处理。</p><p>Go中引入的处理方式为: <strong>defer，panic, recover</strong></p><p>这几个异常的使用场景可以这么简单描述:Go中可以抛出一个panic的异常，然后在defer中通过<strong>recover捕获这个异常</strong>，然后正常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">func <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="function">defer <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      err := recover() <span class="comment">//捕获异常</span></span><br><span class="line">      <span class="keyword">if</span> err != nil &#123;    <span class="comment">//说明捕获到错误</span></span><br><span class="line">         fmt.Println(<span class="string">&quot;err=&quot;</span>,err)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;()</span><br><span class="line">   num1 := <span class="number">10</span></span><br><span class="line">   num2 := <span class="number">0</span></span><br><span class="line">   res := num1 / num2</span><br><span class="line">   fmt.Println(<span class="string">&quot;res=&quot;</span>,res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//err= runtime error: integer divide by zero</span></span><br></pre></td></tr></table></figure><h5 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h5><p>使用<code>errors.New</code> 和 panic内置函数。</p><p>1) errors.New(“错误说明””),会返回一个error类型的值，表示一个错误<br>2) panic内置函数,接收一个<code>interface&#123;&#125;</code>类型的值（也就是任何值了）作为参数。可以接收error类型的变量,输出错误信息,并退出程序.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">func <span class="title">readConf</span><span class="params">(name string)</span><span class="params">(err error)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> name == <span class="string">&quot;config.ini&quot;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nil</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> errors.New(<span class="string">&quot;读取文件错误...&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">func <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">   err := readConf(<span class="string">&quot;config.ini&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">      panic(err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;执行&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Go的基本介绍&quot;&gt;&lt;a href=&quot;#Go的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;Go的基本介绍&quot;&gt;&lt;/a&gt;Go的基本介绍&lt;/h2&gt;&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;p&gt;Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言:Go =C+ Python，说明Go语言既有c静态语言程&lt;br&gt;序的运行速度，又能达到Python动态语言的快速开发。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指&lt;br&gt;针等等，也&lt;strong&gt;保留了和c语言一样的编保执行方式及弱化的指针&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垃圾回收机制，内存自动回收，不需开发人员管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;天然并发&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从语言层面支持并发，实现简单&lt;/li&gt;
&lt;li&gt;goroutine，轻量级线程，可实现大并发处理，高效利用多核。&lt;/li&gt;
&lt;li&gt;基于CPS并发模型(Communicating Sequential Processes )实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;吸收了管道通信机制，形成Go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数返回多个值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新的创新:比如切片、延时执行defer等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;程序开发&quot;&gt;&lt;a href=&quot;#程序开发&quot; class=&quot;headerlink&quot; title=&quot;程序开发&quot;&gt;&lt;/a&gt;程序开发&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//hello.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;hello,world!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;hello.go&lt;/code&gt;所在的包是main，在go中，文件必须归属一个包。&lt;/p&gt;
&lt;p&gt;在命令行可以通过build命令进行编译,在main包下执行下面命令可以得到一个执行文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go build hello.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过run也可以直接运行源码程序&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
    <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-职责链模式</title>
    <link href="http://yoursite.com/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-18T15:21:05.000Z</published>
    <updated>2022-01-19T09:41:36.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">学校OA系统的采购审批项目:需求是</span><br><span class="line">1)采购员采购教学器材</span><br><span class="line">2)如果金额小于等于5000,由教学主任审批</span><br><span class="line">3)如果金额小于等于10000,由院长审批</span><br><span class="line">4)如果金额小于等于30000,由副校长审批</span><br><span class="line">5)如果金额超过30000以上，有校长审批请设计程序完成采购审批项目</span><br></pre></td></tr></table></figure><h4 id="传统方案解决oA系统审批问题"><a href="#传统方案解决oA系统审批问题" class="headerlink" title="传统方案解决oA系统审批问题"></a>传统方案解决oA系统审批问题</h4><ul><li>传统方式是:接收到一个采购请求后，<strong>根据采购金额来调用对应的Approver</strong> (审批人)完成审批。</li><li>传统方式的问题分析:客户端这里会使用到分支判断(比如switch)来对不同的采购请求处理，这样就存在如下问题<ol><li>如果各个级别的人员审批金额发生变化，在客户端的也需要变化</li><li>客户端必须明确的知道有多少个审批级别和访问</li></ol></li><li>这样对一个<strong>采购请求进行处理和Approver(审批人)就存在强耦合关系</strong>，不利于代码的扩展和维护</li></ul><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>职责链模式( Chain ofResponsibility iattern) ,又叫责任链模式，<strong>为请求创建了一个接收者对象的链</strong>。这种模式对请求的发送者和接收者进行解耦。</li><li>职责链模式通常每个接收者<strong>都包含对另一个接收者的引用</strong>。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。<br>这种类型的设计模式属于行为型模式</li></ul><img src="/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/类图.gif" alt="责任链模式的结构图" style="zoom:80%;"><ul><li><strong>Handler</strong> :抽象的处理者，定义了一个处理请求的接口，同时含义另外Handler</li><li><strong>ConcreteHandlerA , B</strong>是具体的处理者，处理它自己负责的请求，可以访问它的后继者(即下一个处理者)，如果可以处理当前请求，则处理，否则就将该请求交个后继者去处理，从而形成一个职责链</li><li><strong>Request</strong> ,含义很多属性,表示一个请求</li></ul><img src="/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/责任链.gif" alt="责任链" style="zoom:80%;"><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止.</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li><p>请求类,这个类是一个请求类，用于在责任链中传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type = <span class="number">0</span>; <span class="comment">//请求类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PurchaseRequest</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">float</span> price, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>责任链抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approve</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Approve approve;  <span class="comment">//下一个处理者</span></span><br><span class="line">    String name; <span class="comment">//名字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Approve</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApprove</span><span class="params">(Approve approve)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.approve = approve;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理审批的方法，得到一个请求，处理是子类完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>主任类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentApprove</span> <span class="keyword">extends</span> <span class="title">Approve</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepartmentApprove</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="number">5000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求编号 id=&quot;</span> +</span><br><span class="line">                    purchaseRequest.getId()+ <span class="string">&quot; 被 &quot;</span>+<span class="keyword">this</span>.name + <span class="string">&quot;处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//其他人处理</span></span><br><span class="line">            approve.processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>院长类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollegeApprove</span> <span class="keyword">extends</span> <span class="title">Approve</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollegeApprove</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="number">10000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求编号 id=&quot;</span> +</span><br><span class="line">                    purchaseRequest.getId()+ <span class="string">&quot; 被 &quot;</span>+<span class="keyword">this</span>.name + <span class="string">&quot;处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//其他人处理</span></span><br><span class="line">            approve.processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求</span></span><br><span class="line">        PurchaseRequest purchaseRequest = <span class="keyword">new</span> PurchaseRequest(<span class="number">1</span>, <span class="number">10000</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建相关审批人</span></span><br><span class="line">        DepartmentApprove departmentApprove = <span class="keyword">new</span> DepartmentApprove(<span class="string">&quot;主任&quot;</span>);</span><br><span class="line">        CollegeApprove collegeApprove = <span class="keyword">new</span> CollegeApprove(<span class="string">&quot;院长&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置，构成环状</span></span><br><span class="line">        departmentApprove.setApprove(collegeApprove);</span><br><span class="line">        collegeApprove.setApprove(departmentApprove);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        departmentApprove.processRequest(purchaseRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p><code>HandlerExecutionChain</code> 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">                <span class="comment">//2.拿到过滤器链</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line"><span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">//3.调用过滤器链的PreHandle，如果调用成功就直接return</span></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyDefaultViewName(processedRequest, mv);</span><br><span class="line">               <span class="comment">//4.调用postHandle</span></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line"><span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line"><span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line"><span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line"><span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用拦截器的preHandle</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">       <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class="line">              <span class="comment">//获取拦截器</span></span><br><span class="line">             HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">              <span class="comment">//调用拦截器的preHandle方法</span></span><br><span class="line">             <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">                <span class="comment">//调用After</span></span><br><span class="line">                 triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用拦截器的postHandle</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">interceptor.afterCompletion(request, response, <span class="keyword">this</span>.handler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Springmvc 请求的流程图中，执行了拦截器相关方法interceptor.preHandler等等在处理</li><li>SpringMvc请求时，使用到职责链模式<strong>还使用到适配器模式</strong></li><li>HandlerExecutionChain主要负责的是<strong>请求拦截器的执行和请求处理,但是他本身不处理请求，只是将请求分配给链上注册处理器执行</strong>，这是职责链实现方式,减少职责链本身与处理逻辑之间的耦合,规范了处理流程</li><li>HandlerExecutionChain维护了<strong>HandlerInterceptor的集合</strong>，可以向其中注册相应的拦截器.</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>将请求和处理分开，实现解耦，提高系统的灵活性</li><li>简化了对象，使对象<strong>不需要知道链的结构</strong></li><li>性能会受到影响，特别是在链比较长的时候，因此<strong>需控制链中最大节点数量，一般通过在Handler中设置一个最大节点数量</strong>，在setNext()方法中判断是否已经超过阀值，超过则不允许该链建立，避免出现超长链无意识地破坏系统性能</li><li>调试不方便。采用了类似递归的方式，调试时逻辑可能比较复杂</li><li>最佳应用场景:有<strong>多个对象可以处理同一个请求</strong>时，比如:多级请求、请假/加薪等审批流程、Java Web中Tomcat对Encoding的处理、拦截器</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;职责链模式&quot;&gt;&lt;a href=&quot;#职责链模式&quot; class=&quot;headerlink&quot; title=&quot;职责链模式&quot;&gt;&lt;/a&gt;职责链模式&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;学校OA系统的采购审批项目:需求是&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1)采购员采购教学器材&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2)如果金额小于等于5000,由教学主任审批&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3)如果金额小于等于10000,由院长审批&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4)如果金额小于等于30000,由副校长审批&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5)如果金额超过30000以上，有校长审批请设计程序完成采购审批项目&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;传统方案解决oA系统审批问题&quot;&gt;&lt;a href=&quot;#传统方案解决oA系统审批问题&quot; class=&quot;headerlink&quot; title=&quot;传统方案解决oA系统审批问题&quot;&gt;&lt;/a&gt;传统方案解决oA系统审批问题&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;传统方式是:接收到一个采购请求后，&lt;strong&gt;根据采购金额来调用对应的Approver&lt;/strong&gt; (审批人)完成审批。&lt;/li&gt;
&lt;li&gt;传统方式的问题分析:客户端这里会使用到分支判断(比如switch)来对不同的采购请求处理，这样就存在如下问题&lt;ol&gt;
&lt;li&gt;如果各个级别的人员审批金额发生变化，在客户端的也需要变化&lt;/li&gt;
&lt;li&gt;客户端必须明确的知道有多少个审批级别和访问&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;这样对一个&lt;strong&gt;采购请求进行处理和Approver(审批人)就存在强耦合关系&lt;/strong&gt;，不利于代码的扩展和维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;职责链模式( Chain ofResponsibility iattern) ,又叫责任链模式，&lt;strong&gt;为请求创建了一个接收者对象的链&lt;/strong&gt;。这种模式对请求的发送者和接收者进行解耦。&lt;/li&gt;
&lt;li&gt;职责链模式通常每个接收者&lt;strong&gt;都包含对另一个接收者的引用&lt;/strong&gt;。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。&lt;br&gt;这种类型的设计模式属于行为型模式&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/类图.gif&quot; alt=&quot;责任链模式的结构图&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Handler&lt;/strong&gt; :抽象的处理者，定义了一个处理请求的接口，同时含义另外Handler&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConcreteHandlerA , B&lt;/strong&gt;是具体的处理者，处理它自己负责的请求，可以访问它的后继者(即下一个处理者)，如果可以处理当前请求，则处理，否则就将该请求交个后继者去处理，从而形成一个职责链&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt; ,含义很多属性,表示一个请求&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/责任链.gif&quot; alt=&quot;责任链&quot; style=&quot;zoom:80%;&quot;&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="http://yoursite.com/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-18T09:51:58.000Z</published>
    <updated>2022-01-18T15:20:17.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">鸭子问题</span><br><span class="line">有各种鸭子(比如野鸭、北京鸭、水鸭等，鸭子有各种行为，比如叫、飞行等)</span><br><span class="line">显示鸭子的信息</span><br></pre></td></tr></table></figure><h4 id="传统方式解决问题"><a href="#传统方式解决问题" class="headerlink" title="传统方式解决问题"></a>传统方式解决问题</h4><p>定义一个抽象类，用多个类去继承。</p><ul><li>其它鸭子，都继承了Duck类，所以fly<strong>让所有子类都会飞</strong>了，这是不正确的</li><li>上面说的1的问题，其实是继承带来的问题:对类的局部改动，尤其<strong>超类的局部改动，会影响其他部分</strong>。会有溢出效应</li><li>为了改进1问题，我们可以通过覆盖fly 方法来解决=&gt;覆盖解决</li><li>问题又来了，如果我们有一个玩具鸭子ToyDuck，这样就需要ToyDuck去覆盖Duck的所有实现的方法=&gt;解决思路策略模式</li></ul><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>策略模式(Strategy Pattern）中，定义算法族，分别封装起来，<strong>让他们之间可以互相替换</strong>，此模式<strong>让算法的变化独立于使用算法的客户</strong>。</li><li>这算法体现了几个设计原则，第一、把变化的代码从不变的代码中分离出来;第二、针对接口编程而不是具体类（定义了策略接口);第三、多用组合/聚合，少用继承（客户通过组合方式使用策略)。</li></ul><p><img src="/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/strategy_pattern_uml_diagram.jpg" alt="策略模式的 UML 图"></p><p><em>Context</em> 是一个使用了某种策略的类。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li><p>定义飞行接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>不会飞行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不会飞行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>飞的好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞行技术高超&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>飞的一般</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞行技术一般&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>定义鸭子抽象类,在抽象类中集成策略接口，具体子类实现具体策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//策略接口</span></span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    <span class="comment">//其他属性，</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸭子嘎嘎叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸭子会游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flyBehavior != <span class="keyword">null</span>)&#123;</span><br><span class="line">            flyBehavior.fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>2个具体的context</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PekingDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PekingDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> NoFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;北京鸭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WildDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> GoodFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;野鸭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WildDuck wildDuck = <span class="keyword">new</span> WildDuck();</span><br><span class="line">        wildDuck.fly();</span><br><span class="line"></span><br><span class="line">        PekingDuck pekingDuck = <span class="keyword">new</span> PekingDuck();</span><br><span class="line">        pekingDuck.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><p>JDK的<code>arrays</code>的<code>Comparator</code>使用了策略模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>Comparator</code>接口，匿名类，这个对象是一个实现了策略接口的对象，实现的方法就是具体的策略方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> comparator&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">( Integer o1，Integer o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (o1 &gt; o2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">Arrays.sort(data,comparator)</span><br></pre></td></tr></table></figure><p>这里就是使用率具体的策略接口进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;<span class="comment">//没有排序接口，就默认排序</span></span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a, c);<span class="comment">//使用策略对象c</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>策略模式的关键是:<strong>分析项目中变化部分与不变部分</strong></li><li>策略模式的核心思想是:<strong>多用组合/聚合少用继承</strong>;用行为类组合，而不是行为的继承。更有弹性</li><li>体现了“<strong>对修改关闭，对扩展开放</strong>”原则，客户端增加行为不用修改原有代码，<strong>只要添加一种策略（或者行为）即可</strong>，避免了使用多重转移语句(if..else if..else)</li><li>提供了可以<strong>替换继承关系</strong>的办法:策略模式<strong>将算法封装在独立的Strategy类</strong>中使得你<strong>可以独立于其Context改变它</strong>，使它易于切换、易于理解、易于扩展</li><li>需要注意的是:每添加一个策略就要增加一个类，<strong>当策略过多是会导致类数目庞大</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;鸭子问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有各种鸭子(比如野鸭、北京鸭、水鸭等，鸭子有各种行为，比如叫、飞行等)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;显示鸭子的信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;传统方式解决问题&quot;&gt;&lt;a href=&quot;#传统方式解决问题&quot; class=&quot;headerlink&quot; title=&quot;传统方式解决问题&quot;&gt;&lt;/a&gt;传统方式解决问题&lt;/h4&gt;&lt;p&gt;定义一个抽象类，用多个类去继承。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其它鸭子，都继承了Duck类，所以fly&lt;strong&gt;让所有子类都会飞&lt;/strong&gt;了，这是不正确的&lt;/li&gt;
&lt;li&gt;上面说的1的问题，其实是继承带来的问题:对类的局部改动，尤其&lt;strong&gt;超类的局部改动，会影响其他部分&lt;/strong&gt;。会有溢出效应&lt;/li&gt;
&lt;li&gt;为了改进1问题，我们可以通过覆盖fly 方法来解决=&amp;gt;覆盖解决&lt;/li&gt;
&lt;li&gt;问题又来了，如果我们有一个玩具鸭子ToyDuck，这样就需要ToyDuck去覆盖Duck的所有实现的方法=&amp;gt;解决思路策略模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;策略模式(Strategy Pattern）中，定义算法族，分别封装起来，&lt;strong&gt;让他们之间可以互相替换&lt;/strong&gt;，此模式&lt;strong&gt;让算法的变化独立于使用算法的客户&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这算法体现了几个设计原则，第一、把变化的代码从不变的代码中分离出来;第二、针对接口编程而不是具体类（定义了策略接口);第三、多用组合/聚合，少用继承（客户通过组合方式使用策略)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2022/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/strategy_pattern_uml_diagram.jpg&quot; alt=&quot;策略模式的 UML 图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Context&lt;/em&gt; 是一个使用了某种策略的类。&lt;/p&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-状态模式</title>
    <link href="http://yoursite.com/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-17T08:03:10.000Z</published>
    <updated>2022-01-18T09:51:15.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请编写程序完成APP抽奖活动具体要求如下:</span><br><span class="line">1.假如每参加一次这个活动要扣除用户50积分，中奖概率是10%</span><br><span class="line">2.奖品教量固定，抽完就不能抽奖</span><br><span class="line">3)活动有四个状态:可以抽奖、不能抽奖、发放奖品和奖品领完</span><br></pre></td></tr></table></figure><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>状态模式(State Pattern) :它主要用来解决对象在多种状态转换时，需要<strong>对外输出不同的行为</strong>的问题。<strong>状态和行为是一一对应的</strong>，状态之间可以相互转换。</li><li>当一个对象的丙在状态改变时，允许改变其行为，这个对象看起来像是改变了其类</li></ol><img src="/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/类图.gif" alt="状态模式的结构图" style="zoom:80%;"><ol><li><strong>环境类（Context）角色</strong>：也称为上下文，它定义了客户端需要的接口，<strong>内部维护一个当前状态</strong>，并负责具体状态的切换。</li><li><strong>抽象状态（State）角色</strong>：定义一个接口，用以封装<strong>环境对象中的特定状态所对应的行为</strong>，可以有一个或多个行为。</li><li><strong>具体状态（Concrete State）角色</strong>：<strong>实现抽象状态所对应的行为</strong>，并且在需要的情况下进行状态切换。</li></ol><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li>状态接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扣除积分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduceMoney</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否抽中奖品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发放奖品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>具体状态</p><ol><li><p>不能抽奖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoRaffleState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化时传入活动引用，扣除积分改变状态</span></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoRaffleState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前状态可以扣积分，扣除后，将状态设置为可以抽奖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduceMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣除50积分成功，您可以抽奖了&quot;</span>);</span><br><span class="line">        activity.setState(activity.getCanRaffleState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能抽奖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣除积分才能抽奖&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不能发奖品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以抽奖状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanRaffleState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化时传入活动引用，扣除积分改变状态</span></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CanRaffleState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduceMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已经扣取过了积分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在抽奖请稍等&quot;</span>);</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line">            activity.setState(activity.getDispenseState());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾没有抽中奖品&quot;</span>);</span><br><span class="line">            activity.setState(activity.getNoRaffleState());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没中奖，不能发放奖品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发奖品的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispenseState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化时传入活动引用，扣除积分改变状态</span></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispenseState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduceMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已经扣取过了积分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不能抽奖&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (activity.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜中奖了&quot;</span>);</span><br><span class="line">            activity.setState(activity.getNoRaffleState());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;奖品发完了&quot;</span>);</span><br><span class="line">            <span class="comment">//后面就不可以再</span></span><br><span class="line">            activity.setState(activity.getNoRaffleState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>奖品发完的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispenseOutState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化时传入活动引用，扣除积分改变状态</span></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispenseOutState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduceMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖品发送完了，请下次参加&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖品发送完了，请下次参加&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖品发送完了，请下次参加&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>抽奖活动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前状态是变化的</span></span><br><span class="line">    State state = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//奖品数量</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四个属性，表示4种状态</span></span><br><span class="line">    State noRaffleState= <span class="keyword">new</span> NoRaffleState(<span class="keyword">this</span>);</span><br><span class="line">    State canRaffleState= <span class="keyword">new</span> CanRaffleState(<span class="keyword">this</span>);</span><br><span class="line">    State dispenseState= <span class="keyword">new</span> DispenseState(<span class="keyword">this</span>);</span><br><span class="line">    State dispenseOutState= <span class="keyword">new</span> DispenseOutState(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Activity</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = getNoRaffleState();</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扣分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduceMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state.deduceMoney();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽奖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raffle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//抽奖成功，领取奖品</span></span><br><span class="line">        <span class="keyword">if</span> (state.raffle())&#123;</span><br><span class="line">            state.dispensePrize();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//领取一次奖品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curCount = count;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> curCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getNoRaffleState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> noRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getCanRaffleState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> canRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getDispenseState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispenseState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getDispenseOutState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dispenseOutState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Activity activity = <span class="keyword">new</span> Activity(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+( i + <span class="number">1</span>)+<span class="string">&quot;次抽奖&quot;</span>);</span><br><span class="line">            <span class="comment">//扣积分</span></span><br><span class="line">            activity.deduceMoney();</span><br><span class="line">            <span class="comment">//抽奖</span></span><br><span class="line">            activity.raffle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>代码有很强的可读性。状态模式将<strong>每个状态的行为封装到对应的一个类</strong>中</li><li>方便维护。<strong>将容易产生问题的if-else</strong>语句删除了，如果把每个状态的行为都放到一个类中，<strong>每次调用方法时都要判断当前是什么状态</strong>，不但会产出很多if-else语句，而且容易出错</li><li>符合“开闭原则”。容易增删状态</li><li>会产生很多类。每个状态都要一个对应的类，当状态过多时会产生很多类，加大维护难度</li><li>当一个事件或者对象有很多种状态，<strong>状态之间会相互转换</strong>，<strong>对不同的状态要求有不同的行为</strong>的时候，可以考虑使用状态模式</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;状态模式&quot;&gt;&lt;a href=&quot;#状态模式&quot; class=&quot;headerlink&quot; title=&quot;状态模式&quot;&gt;&lt;/a&gt;状态模式&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;请编写程序完成APP抽奖活动具体要求如下:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.假如每参加一次这个活动要扣除用户50积分，中奖概率是10%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.奖品教量固定，抽完就不能抽奖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3)活动有四个状态:可以抽奖、不能抽奖、发放奖品和奖品领完&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;状态模式(State Pattern) :它主要用来解决对象在多种状态转换时，需要&lt;strong&gt;对外输出不同的行为&lt;/strong&gt;的问题。&lt;strong&gt;状态和行为是一一对应的&lt;/strong&gt;，状态之间可以相互转换。&lt;/li&gt;
&lt;li&gt;当一个对象的丙在状态改变时，允许改变其行为，这个对象看起来像是改变了其类&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/类图.gif&quot; alt=&quot;状态模式的结构图&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;环境类（Context）角色&lt;/strong&gt;：也称为上下文，它定义了客户端需要的接口，&lt;strong&gt;内部维护一个当前状态&lt;/strong&gt;，并负责具体状态的切换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象状态（State）角色&lt;/strong&gt;：定义一个接口，用以封装&lt;strong&gt;环境对象中的特定状态所对应的行为&lt;/strong&gt;，可以有一个或多个行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体状态（Concrete State）角色&lt;/strong&gt;：&lt;strong&gt;实现抽象状态所对应的行为&lt;/strong&gt;，并且在需要的情况下进行状态切换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;状态接口&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;State&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//扣除积分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deduceMoney&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//是否抽中奖品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;raffle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//发放奖品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispensePrize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-解释器模式</title>
    <link href="http://yoursite.com/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-17T06:56:51.000Z</published>
    <updated>2022-01-18T09:51:20.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过解释器模式来实现四则运算，如计算a+b-c的值，具体要求</span><br><span class="line">1.先输入表达式的形式，比如atb+c-d+e要求表达式的字母不能重复</span><br><span class="line">2.在分别输人a ,b, c, d,e的值t</span><br></pre></td></tr></table></figure><h4 id="传统方案解决四则运算问题"><a href="#传统方案解决四则运算问题" class="headerlink" title="传统方案解决四则运算问题"></a>传统方案解决四则运算问题</h4><ol><li>编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果</li><li>问题分析:如果加入新的运算符，比如*、/、(等等，不利于扩展，另外让一个方法来<br>解析会造成程序结构混乱，不够清晰.</li><li>解决方案:可以考虑使用解释器模式，即:表达式→解释器(可以有多种)→结<br>果</li></ol><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>在编译原理中，一个算术表达式通过<strong>词法分析器</strong>形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器</li><li>解释器模式(Interpreter Pattern):是指给定一个语言(表达式)，<strong>定义它的文法的一种表示，并定义一个解释器</strong>，使用该解释器来解释语言中的句子(表达式)</li><li>应用场景<ul><li>应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来表达</li><li>一个简单语法需要解释的场景</li></ul></li><li>这样的例子还有，比如编译器、运算表达式计算、正则表达式、机器人等</li></ol><img src="/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/类图.gif" alt="解释器模式的结构图" style="zoom:80%;"><ol><li><strong>抽象表达式（Abstract Expression）角色</strong>：定义解释器的接口，约定解释器的解释操作，主要包含<strong>解释方法 interpret()</strong>。</li><li><strong>终结符表达式（Terminal Expression）角色</strong>：是抽象表达式的子类，用来<strong>实现文法中与终结符相关的操作</strong>，文法中的每一个终结符都有一个具体终结表达式与之相对应。</li><li><strong>非终结符表达式（Nonterminal Expression）角色</strong>：也是抽象表达式的子类，用来实现文法中与<strong>非终结符相关的操作</strong>，文法中的每条规则都对应于一个非终结符表达式。</li><li><strong>环境（Context）角色</strong>：通常包含各个解释器<strong>需要的数据或是公共的功能</strong>，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。</li><li><strong>客户端（Client）</strong>：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个parser对象</span></span><br><span class="line">        SpelExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        <span class="comment">//通过parser对象获取到一个expression对象</span></span><br><span class="line">        org.springframework.expression.Expression expression = parser.parseExpression(<span class="string">&quot;100 * (2 + 400 )&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = (<span class="keyword">int</span>) expression.getValue();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式,让程序具有良好的扩展性</li><li>应用场景:编译器、运算表达式计算、正则表达式、机器人等</li><li>使用解释器可能带来的问题:解释器模式会引起类膨胀、解释器模式采用递归调用方法，将会导致调试非常复杂、效率可能降低.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;解释器模式&quot;&gt;&lt;a href=&quot;#解释器模式&quot; class=&quot;headerlink&quot; title=&quot;解释器模式&quot;&gt;&lt;/a&gt;解释器模式&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;通过解释器模式来实现四则运算，如计算a+b-c的值，具体要求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.先输入表达式的形式，比如atb+c-d+e要求表达式的字母不能重复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.在分别输人a ,b, c, d,e的值t&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;传统方案解决四则运算问题&quot;&gt;&lt;a href=&quot;#传统方案解决四则运算问题&quot; class=&quot;headerlink&quot; title=&quot;传统方案解决四则运算问题&quot;&gt;&lt;/a&gt;传统方案解决四则运算问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果&lt;/li&gt;
&lt;li&gt;问题分析:如果加入新的运算符，比如*、/、(等等，不利于扩展，另外让一个方法来&lt;br&gt;解析会造成程序结构混乱，不够清晰.&lt;/li&gt;
&lt;li&gt;解决方案:可以考虑使用解释器模式，即:表达式→解释器(可以有多种)→结&lt;br&gt;果&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在编译原理中，一个算术表达式通过&lt;strong&gt;词法分析器&lt;/strong&gt;形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器&lt;/li&gt;
&lt;li&gt;解释器模式(Interpreter Pattern):是指给定一个语言(表达式)，&lt;strong&gt;定义它的文法的一种表示，并定义一个解释器&lt;/strong&gt;，使用该解释器来解释语言中的句子(表达式)&lt;/li&gt;
&lt;li&gt;应用场景&lt;ul&gt;
&lt;li&gt;应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树&lt;/li&gt;
&lt;li&gt;一些重复出现的问题可以用一种简单的语言来表达&lt;/li&gt;
&lt;li&gt;一个简单语法需要解释的场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这样的例子还有，比如编译器、运算表达式计算、正则表达式、机器人等&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;/2022/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/类图.gif&quot; alt=&quot;解释器模式的结构图&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;抽象表达式（Abstract Expression）角色&lt;/strong&gt;：定义解释器的接口，约定解释器的解释操作，主要包含&lt;strong&gt;解释方法 interpret()&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终结符表达式（Terminal Expression）角色&lt;/strong&gt;：是抽象表达式的子类，用来&lt;strong&gt;实现文法中与终结符相关的操作&lt;/strong&gt;，文法中的每一个终结符都有一个具体终结表达式与之相对应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非终结符表达式（Nonterminal Expression）角色&lt;/strong&gt;：也是抽象表达式的子类，用来实现文法中与&lt;strong&gt;非终结符相关的操作&lt;/strong&gt;，文法中的每条规则都对应于一个非终结符表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境（Context）角色&lt;/strong&gt;：通常包含各个解释器&lt;strong&gt;需要的数据或是公共的功能&lt;/strong&gt;，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端（Client）&lt;/strong&gt;：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h3&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-备忘录模式</title>
    <link href="http://yoursite.com/2022/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-16T14:14:15.000Z</published>
    <updated>2022-01-16T15:01:14.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">游戏角色状态恢复问题</span><br><span class="line">游戏角色有攻击力和防御力，在大战Boss前保存自身的状态(攻击力枝防御力)，当大战Boss后攻击力和防御力下降，从备忘录对象恢复到大战前的状态</span><br></pre></td></tr></table></figure><h4 id="利用传统方式解决"><a href="#利用传统方式解决" class="headerlink" title="利用传统方式解决"></a>利用传统方式解决</h4><ul><li>一个对象，就对应一个保存对象状态的对象，这样当我们游戏的对象很多时，不利手管理，开销也很大.</li><li>传统的方式是简单地做备份，new出另外一个对象出来，再把需要备份的数据放到这个新对象，但这就暴露了对象内部的细节</li></ul><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>备忘录模式(Memento Pattern）在<strong>不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态</strong>。这样以后就可将该对象恢复到原先保存的状态</li><li>可以这里理解备忘录模式:现实生活中的备忘录是用来记录某些要去做的事情,或者是记录已经达成的共同意见的事情，以防忘记了。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来<strong>记录一个对象的某种状态，或者某些数据，当要做回退时</strong>，可以从备忘录对象里获取原来的数据进行恢复操作</li><li>备忘录模式属于行为型模式</li></ul><img src="/2022/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/类图.jpg" alt="备忘录模式的 UML 图" style="zoom:80%;"><ul><li><p><code>Memento</code> 包含了要被恢复的对象的状态。</p></li><li><p><code>Originator</code> 创建并在 Memento 对象中存储状态。</p></li><li><p><code>Caretaker</code> 对象负责从 Memento 中恢复对象的状态。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法,可以保存一个状杰对象Memento</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">saveStateMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStateFromMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        mementoList.add(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mementoList.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        caretaker.add(originator.saveStateMemento());</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        caretaker.add(originator.saveStateMemento());</span><br><span class="line"></span><br><span class="line">        System.out.println(originator.getState());</span><br><span class="line">        originator.getStateFromMemento(caretaker.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>给用户提供了一种可以恢复状态的机制，可以使用户能够比较<strong>方便地回到某个历史的状态</strong></p></li><li><p>实现了信息的封装，使得用户<strong>不需要关心状态的保存细节</strong></p></li><li><p>如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存,这个需要注意</p></li><li><p>适用的应用场景:</p><ol><li><p>后悔药。</p></li><li><p>打游戏时的存档。</p></li><li><p>Windows里的 ctri+z。</p></li><li><p>IE中的后退。</p></li><li><p>数据库的事务管理</p></li></ol></li><li><p>为了节约内存，<strong>备忘录模式可以和原型模式配合使用</strong></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;备忘录模式&quot;&gt;&lt;a href=&quot;#备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式&quot;&gt;&lt;/a&gt;备忘录模式&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;游戏角色状态恢复问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;游戏角色有攻击力和防御力，在大战Boss前保存自身的状态(攻击力枝防御力)，当大战Boss后攻击力和防御力下降，从备忘录对象恢复到大战前的状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;利用传统方式解决&quot;&gt;&lt;a href=&quot;#利用传统方式解决&quot; class=&quot;headerlink&quot; title=&quot;利用传统方式解决&quot;&gt;&lt;/a&gt;利用传统方式解决&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一个对象，就对应一个保存对象状态的对象，这样当我们游戏的对象很多时，不利手管理，开销也很大.&lt;/li&gt;
&lt;li&gt;传统的方式是简单地做备份，new出另外一个对象出来，再把需要备份的数据放到这个新对象，但这就暴露了对象内部的细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;备忘录模式(Memento Pattern）在&lt;strong&gt;不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态&lt;/strong&gt;。这样以后就可将该对象恢复到原先保存的状态&lt;/li&gt;
&lt;li&gt;可以这里理解备忘录模式:现实生活中的备忘录是用来记录某些要去做的事情,或者是记录已经达成的共同意见的事情，以防忘记了。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来&lt;strong&gt;记录一个对象的某种状态，或者某些数据，当要做回退时&lt;/strong&gt;，可以从备忘录对象里获取原来的数据进行恢复操作&lt;/li&gt;
&lt;li&gt;备忘录模式属于行为型模式&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/类图.jpg&quot; alt=&quot;备忘录模式的 UML 图&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Memento&lt;/code&gt; 包含了要被恢复的对象的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Originator&lt;/code&gt; 创建并在 Memento 对象中存储状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Caretaker&lt;/code&gt; 对象负责从 Memento 中恢复对象的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Originator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String state)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//编写一个方法,可以保存一个状杰对象Memento&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Memento &lt;span class=&quot;title&quot;&gt;saveStateMemento&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Memento(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//得到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getStateFromMemento&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Memento memento)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        state = memento.getState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-中介者模式</title>
    <link href="http://yoursite.com/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-13T12:50:40.000Z</published>
    <updated>2022-01-16T14:13:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">智能家庭项目:</span><br><span class="line">1.智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘等</span><br><span class="line">2.主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为:闹铃响起-&gt;咖啡机开始做咖啡-&gt;窗帘自动落下-&gt;电视机开始播放</span><br></pre></td></tr></table></figure><ul><li>当各电器对象有多种状态改变时，<strong>相互之间的调用关系会比较复杂</strong></li><li>各个电器对象彼此联系，你中有我，我中有你，不利于松耦合.</li><li>各个电器对象之间所传递的消息(参数)，容易混乱</li><li>当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性都不理想→考虑中介者模式</li></ul><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>中介者模式(Mediator Pattern) ,[用一个中介对象来封装一系列的对象交互。中介者使各个<strong>对象不需要显式地相互引用</strong>，从而使其耦合松散，而且可以独立地改变它们之间的交互</li><li>中介者模式属于行为型模式，使代码易于维护</li><li>比如MVC模式，c (Controller控制器）是M(Model模型）和v (view视图〉的中介者，在前后端交互时起到了中间人的作用</li></ul><img src="/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/类图.png" alt="类图" style="zoom:80%;"><ul><li><code>Mediator</code>是抽象中介者，定义了同事对象到中介者对象的接口；</li><li><code>Colleague</code>是抽象同事类；</li><li><code>ConcreteMediator</code>是具体中介者对象，实现抽象类的方法，它<strong>需要知道所有具体同事类</strong>，并<strong>从具体同事接收消息</strong>，向具体同事对象发出命令；</li><li><code>ConcreteColleague</code>是具体同事类，每个具体同事<strong>只知道自己的行为</strong>，<strong>而不了解其它同事类的情况</strong>，但它们却都认识中介者对象。</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="智能家庭操作流程"><a href="#智能家庭操作流程" class="headerlink" title="智能家庭操作流程"></a>智能家庭操作流程</h4><ol><li>创建<code>ConcreMediator</code>对象</li><li>创建各个同事类对象，比比如:Alarm、CoffeeMachine、TV..3</li><li>.在创建同事类对象的时候，就直接通过构造器,加如入到colleague</li><li>同事类对象，可以调用<code>sendMessage</code> ,最终会去调用<code>concregetMessage</code>方法</li><li><code>getMessage</code>会根据接收到的同事对象发出的消息来协调调用其它的同事对象完成响应任务。</li><li><code>getMessage</code>是核心方法，处理响应任务。</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ol><li><p>中介者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将同事对象加入到集合中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span></span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">GetMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体中介者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">    <span class="comment">//集合，放入所有的同事对象</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Colleague&gt; colleagueMap;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,String&gt; interMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        colleagueMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        interMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span> </span>&#123;</span><br><span class="line">        colleagueMap.put(colleagueName, colleague);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里可以优化</span></span><br><span class="line">        <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> Alarm)&#123;</span><br><span class="line">            interMap.put(<span class="string">&quot;Alarm&quot;</span>, colleagueName);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> CoffeeMachine)&#123;</span><br><span class="line">            interMap.put(<span class="string">&quot;CoffeeMachine&quot;</span>, colleagueName);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> TV)&#123;</span><br><span class="line">            interMap.put(<span class="string">&quot;TV&quot;</span>, colleagueName);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(colleague <span class="keyword">instanceof</span> Curtains)&#123;</span><br><span class="line">            interMap.put(<span class="string">&quot;Curtains&quot;</span>, colleagueName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体中介者核心方法，根据消息完成对应任务</span></span><br><span class="line">    <span class="comment">//协调各个具体同事类对象，完成任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> Alarm)&#123;</span><br><span class="line">            <span class="keyword">if</span> (stateChange == <span class="number">0</span>)&#123;</span><br><span class="line">                ((CoffeeMachine)(colleagueMap.get(interMap</span><br><span class="line">                        .get(<span class="string">&quot;CoffeeMachine&quot;</span>)))).StartCoffee();</span><br><span class="line">                ((TV)(colleagueMap.get(interMap</span><br><span class="line">                        .get(<span class="string">&quot;TV&quot;</span>)))).StartTV();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (stateChange == <span class="number">1</span>)&#123;</span><br><span class="line">                ((TV)(colleagueMap.get(interMap</span><br><span class="line">                        .get(<span class="string">&quot;TV&quot;</span>)))).StopTV();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> CoffeeMachine)&#123;</span><br><span class="line">            ((Curtains)(colleagueMap.get(interMap</span><br><span class="line">                    .get(<span class="string">&quot;Curtains&quot;</span>)))).UpCurtain();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> TV)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> Curtains)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>同事抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mediator <span class="title">getMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>几个同事</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alarm</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Alarm</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator, name);</span><br><span class="line">        <span class="comment">//在构建的同时，将自己放入中介者中</span></span><br><span class="line">        mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendAlarm</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>&#123;</span><br><span class="line">        SendMessage(stateChange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeMachine</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeMachine</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator, name);</span><br><span class="line">        mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartCoffee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动咖啡机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishCoffee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;完成咖啡机&quot;</span>);</span><br><span class="line">        SendMessage(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Curtains</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Curtains</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator, name);</span><br><span class="line">        mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpCurtain</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;升起窗帘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TV</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator, name);</span><br><span class="line">        mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartTV</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启电视&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopTV</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电视&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建中介者</span></span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">        <span class="comment">//闹钟</span></span><br><span class="line">        Alarm alarm = <span class="keyword">new</span> Alarm(mediator, <span class="string">&quot;Alarm&quot;</span>);</span><br><span class="line">        <span class="comment">//咖啡机</span></span><br><span class="line">        CoffeeMachine coffeeMachine = <span class="keyword">new</span> CoffeeMachine(mediator, <span class="string">&quot;CoffeeMachine&quot;</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Curtains curtains = <span class="keyword">new</span> Curtains(mediator, <span class="string">&quot;Curtains&quot;</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        TV tv = <span class="keyword">new</span> TV(mediator, <span class="string">&quot;TV&quot;</span>);</span><br><span class="line"></span><br><span class="line">        alarm.SendAlarm(<span class="number">0</span>);</span><br><span class="line">        coffeeMachine.finishCoffee();</span><br><span class="line">        alarm.SendAlarm(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>多个类相互耦合，会形成网状结构，使用中介者模式<strong>将网状结构分离为星型结构</strong>，进行解耦</li><li>减少<strong>类间依赖</strong>，降低了耦合，符合迪米特原则</li><li>中介者<strong>承担了较多的责任</strong>，一旦中介者出现了问题，整个系统就会受到影响如果设计不当，</li><li>中介者对象<strong>本身变得过于复杂</strong>，这点在实际使用时，要特别注意</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;中介者模式&quot;&gt;&lt;a href=&quot;#中介者模式&quot; class=&quot;headerlink&quot; title=&quot;中介者模式&quot;&gt;&lt;/a&gt;中介者模式&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;智能家庭项目:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为:闹铃响起-&amp;gt;咖啡机开始做咖啡-&amp;gt;窗帘自动落下-&amp;gt;电视机开始播放&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;当各电器对象有多种状态改变时，&lt;strong&gt;相互之间的调用关系会比较复杂&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;各个电器对象彼此联系，你中有我，我中有你，不利于松耦合.&lt;/li&gt;
&lt;li&gt;各个电器对象之间所传递的消息(参数)，容易混乱&lt;/li&gt;
&lt;li&gt;当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性都不理想→考虑中介者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;中介者模式(Mediator Pattern) ,[用一个中介对象来封装一系列的对象交互。中介者使各个&lt;strong&gt;对象不需要显式地相互引用&lt;/strong&gt;，从而使其耦合松散，而且可以独立地改变它们之间的交互&lt;/li&gt;
&lt;li&gt;中介者模式属于行为型模式，使代码易于维护&lt;/li&gt;
&lt;li&gt;比如MVC模式，c (Controller控制器）是M(Model模型）和v (view视图〉的中介者，在前后端交互时起到了中间人的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/类图.png&quot; alt=&quot;类图&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mediator&lt;/code&gt;是抽象中介者，定义了同事对象到中介者对象的接口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Colleague&lt;/code&gt;是抽象同事类；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteMediator&lt;/code&gt;是具体中介者对象，实现抽象类的方法，它&lt;strong&gt;需要知道所有具体同事类&lt;/strong&gt;，并&lt;strong&gt;从具体同事接收消息&lt;/strong&gt;，向具体同事对象发出命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteColleague&lt;/code&gt;是具体同事类，每个具体同事&lt;strong&gt;只知道自己的行为&lt;/strong&gt;，&lt;strong&gt;而不了解其它同事类的情况&lt;/strong&gt;，但它们却都认识中介者对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;&lt;h4 id=&quot;智能家庭操作流程&quot;&gt;&lt;a href=&quot;#智能家庭操作流程&quot; class=&quot;headerlink&quot; title=&quot;智能家庭操作流程&quot;&gt;&lt;/a&gt;智能家庭操作流程&lt;/h4&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="http://yoursite.com/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-13T12:50:40.000Z</published>
    <updated>2022-01-16T14:13:56.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">气象站可以将每天测量到的温度，湿度，气压等等以公告的形式发布出去(比如发布到自己的网站或第三方)。</span><br><span class="line">而要设计开放型API，便于其他第三方也能接入气象站获取数据。</span><br><span class="line">提供温度、气压和湿度的接口</span><br><span class="line">浏量数据更新时，要能实时的通知给第三方</span><br></pre></td></tr></table></figure><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>观察者模式类似订牛奶业务1</p><ol><li><p>奶站/气象局:Subject</p></li><li><p>用户/第三方网站:Observer</p></li></ol><p>Subject:登记注册、移除和通知</p><img src="/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/类图.gif" alt="观察者模式的结构图" style="zoom:80%;"><ol><li><strong>抽象主题（Subject）角色</strong>：也叫抽象目标类，它提供了一个用于<strong>保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法</strong>。</li><li><strong>具体主题（Concrete Subject）角色</strong>：也叫具体目标类，它实现抽象目标中的通知方法，当<strong>具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</strong></li><li><strong>抽象观察者（Observer）角色</strong>：它是一个抽象类或接口，它包含了一个<strong>更新自己的抽象方法，当接到具体主题的更改通知时被调用。</strong></li><li><strong>具体观察者（Concrete Observer）角色</strong>：实现抽象观察者中定义的抽象方法，<strong>以便在得到目标的更改通知时更新自身的状态。</strong></li></ol><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li><p>接口，主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Data data)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体主题,具体主题天气信息包含一个天气数据，和观察者列表，当数据发生变化是通知观察者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Data</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemperature</span><span class="params">(<span class="keyword">float</span> temperature)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPressure</span><span class="params">(<span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHumidity</span><span class="params">(<span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">private</span> Data data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有新的数据更新时，调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> Data(temperature,pressure,humidity);</span><br><span class="line">        notifyObserver();   <span class="comment">//通知观察者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observers.contains(o)) &#123;</span><br><span class="line">            observers.remove(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;observers.size(); i++)&#123;</span><br><span class="line">            observers.get(i).update(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者，数据发生变化时进行update操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditions</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//温度，气压，湿度</span></span><br><span class="line">    <span class="keyword">private</span> Data data;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Data data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;temperature:&quot;</span>+data.getTemperature());</span><br><span class="line">        System.out.println(<span class="string">&quot;pressure:&quot;</span>+data.getPressure());</span><br><span class="line">        System.out.println(<span class="string">&quot;humidity:&quot;</span>+data.getHumidity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个主题</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建观察者</span></span><br><span class="line">        CurrentConditions currentConditions = <span class="keyword">new</span> CurrentConditions();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册到weatherData</span></span><br><span class="line">        weatherData.registerObserver(currentConditions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        weatherData.setData(<span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>观察者模式设计后，会以<strong>集合的方式来管理用户(Observer)</strong>，包括注册，移除和通知。</p><p>这样，我们增加观察者(这里可以理解成一个新的公告板)，就<strong>不需要去修改核心类WeatherData不会修改代码</strong>，遵守了ocp原则。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Observable源码"><a href="#Observable源码" class="headerlink" title="Observable源码"></a>Observable源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (!obs.contains(o)) &#123;</span><br><span class="line">            obs.addElement(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        obs.removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * a temporary array buffer, used as a snapshot of the state of</span></span><br><span class="line"><span class="comment">         * current Observers.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (!changed)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            arrLocal = obs.toArray();</span><br><span class="line">            clearChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">            ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK的Observable对象中使用Vector存放观察者对象。观察者接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;气象站可以将每天测量到的温度，湿度，气压等等以公告的形式发布出去(比如发布到自己的网站或第三方)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;而要设计开放型API，便于其他第三方也能接入气象站获取数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;提供温度、气压和湿度的接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;浏量数据更新时，要能实时的通知给第三方&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h3&gt;&lt;p&gt;观察者模式类似订牛奶业务1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;奶站/气象局:Subject&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户/第三方网站:Observer&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subject:登记注册、移除和通知&lt;/p&gt;
&lt;img src=&quot;/2022/01/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/类图.gif&quot; alt=&quot;观察者模式的结构图&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;抽象主题（Subject）角色&lt;/strong&gt;：也叫抽象目标类，它提供了一个用于&lt;strong&gt;保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体主题（Concrete Subject）角色&lt;/strong&gt;：也叫具体目标类，它实现抽象目标中的通知方法，当&lt;strong&gt;具体主题的内部状态发生改变时，通知所有注册过的观察者对象。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象观察者（Observer）角色&lt;/strong&gt;：它是一个抽象类或接口，它包含了一个&lt;strong&gt;更新自己的抽象方法，当接到具体主题的更改通知时被调用。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体观察者（Concrete Observer）角色&lt;/strong&gt;：实现抽象观察者中定义的抽象方法，&lt;strong&gt;以便在得到目标的更改通知时更新自身的状态。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-迭代器模式</title>
    <link href="http://yoursite.com/2022/01/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-12T03:34:10.000Z</published>
    <updated>2022-01-16T14:14:00.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>迭代器模式( lterator Pattern）是常用的设计模式，属于行为型模式</li><li>如果我们的集合元素是用不同的方式实现的，有数组，还有java的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。</li><li>迭代器模式，提供一种<strong>遍历集合元素的统一接口</strong>，<strong>用一致的方法遍历集合元素</strong>，不需要知道集合对象的底层表示，即:不暴露其内部的结构。</li></ul><img src="/2022/01/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/类图.png" alt="image-20220112113919441" style="zoom:80%;"><ul><li>抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。一个统一的聚合接口，将客户端和具体聚合解耦。</li><li>具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。</li><li>抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove(),</li><li>迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代。</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>如果2个类数据结构不相同时，介绍使用迭代器模式</p><p>部门类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2个迭代器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoCollegeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里需要知道Department是以怎么样存放的</span></span><br><span class="line">    List&lt;Department&gt; departments; <span class="comment">//是以list</span></span><br><span class="line">    <span class="comment">//遍历位置</span></span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoCollegeIterator</span><span class="params">(List&lt;Department&gt; departments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= departments.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerCollegeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里需要知道Department是以怎么样存放的,这里是数组</span></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="comment">//遍历位置</span></span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerCollegeIterator</span><span class="params">(Department[] departments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否还有下一个</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= departments.length || departments[position] == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Department department = departments[position];</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大学接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">College</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name, String desc)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputeCollege</span> <span class="keyword">implements</span> <span class="title">College</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="keyword">int</span> numOfDepartment = <span class="number">0</span>;    <span class="comment">//保存数组对象个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputeCollege</span><span class="params">()</span></span>&#123;</span><br><span class="line">        departments = <span class="keyword">new</span> Department[<span class="number">5</span>];</span><br><span class="line">        addDepartment(<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;PHP&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;大数据&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;计算机学院&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        Department department = <span class="keyword">new</span> Department(name, desc);</span><br><span class="line">        departments[numOfDepartment] = department;</span><br><span class="line">        numOfDepartment ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ComputerCollegeIterator(departments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoCollege</span> <span class="keyword">implements</span> <span class="title">College</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Department&gt; departments;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoCollege</span><span class="params">()</span></span>&#123;</span><br><span class="line">        departments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        addDepartment(<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;PHP&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;大数据&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息工程学院&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        Department department = <span class="keyword">new</span> Department(name, desc);</span><br><span class="line">        departments.add(department);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InfoCollegeIterator(departments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutPutImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学院集合</span></span><br><span class="line">    List&lt;College&gt; collegeList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutPutImpl</span><span class="params">(List&lt;College&gt; collegeList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collegeList = collegeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCollege</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Iterator&lt;College&gt; iterator = collegeList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//取出一个学院</span></span><br><span class="line">            College college = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;=========&quot;</span>+ college.getName() +<span class="string">&quot;========&quot;</span>);</span><br><span class="line">            printDepartment(college.createIterator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDepartment</span><span class="params">(Iterator iterator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">           Department d = (Department) iterator.next();</span><br><span class="line">            System.out.println(d.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;College&gt; collegeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        collegeList.add(<span class="keyword">new</span> ComputeCollege());</span><br><span class="line">        collegeList.add(<span class="keyword">new</span> InfoCollege());</span><br><span class="line">        OutPutImpl outPut = <span class="keyword">new</span> OutPutImpl(collegeList);</span><br><span class="line">        outPut.printCollege();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList实现了List接口，List接口实现了Collection接口，Collection实现了Iterable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterable提供了iterator接口。ArrayList实现了具体的iterator接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Itr</code>这个内部类实现了<code>Iterator</code>接口，<code>ArrayList</code>使用<code>elementData</code>存放数据，并没有像</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p><code>LinkedList</code>与<code>ArrayList</code>类似都实现了List接口。但这个接口的实现是在他的父类<code>AbstractSequentialList</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listIterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代器模式解决了不同集合(ArrayList ，.LinkedList)统一遍历问题</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>优点<ul><li>提供一个<strong>统一的方法遍历对象</strong>，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了。</li><li><strong>隐藏了聚合的内部结构</strong>，客户端要<strong>遍历聚合的时候只能取到迭代器</strong>，而不会知道聚合的具体组成。</li><li>提供了一种设计思想，就是一个类应该只有一个引起变化的原因（叫做单一责任原则)。在聚合类中，我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来集合改变的话，只影响到聚合对象。而如果遍历方式改变的话，只影响到了迭代器。</li><li>当要展示一组相似对象，或者遍历一组相同对象时使用，适合使用迭代器模式</li></ul></li><li>缺点<ul><li>每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a&gt;迭代器模式&lt;/h2&gt;&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;迭代器模式( lterator Pattern）是常用的设计模式，属于行为型模式&lt;/li&gt;
&lt;li&gt;如果我们的集合元素是用不同的方式实现的，有数组，还有java的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。&lt;/li&gt;
&lt;li&gt;迭代器模式，提供一种&lt;strong&gt;遍历集合元素的统一接口&lt;/strong&gt;，&lt;strong&gt;用一致的方法遍历集合元素&lt;/strong&gt;，不需要知道集合对象的底层表示，即:不暴露其内部的结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/类图.png&quot; alt=&quot;image-20220112113919441&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ul&gt;
&lt;li&gt;抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。一个统一的聚合接口，将客户端和具体聚合解耦。&lt;/li&gt;
&lt;li&gt;具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。&lt;/li&gt;
&lt;li&gt;抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove(),&lt;/li&gt;
&lt;li&gt;迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;&lt;p&gt;如果2个类数据结构不相同时，介绍使用迭代器模式&lt;/p&gt;
&lt;p&gt;部门类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Department&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, String desc)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.desc = desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getDesc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setDesc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String desc)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.desc = desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2个迭代器类&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-访问者模式</title>
    <link href="http://yoursite.com/2022/01/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-11T08:58:08.000Z</published>
    <updated>2022-01-12T03:33:23.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">年底，CEO和CTO开始评定员工一年的工作绩效，员工分为工程师和经理，CTO关注工程师的代码量、经理的新产品数量；CEO关注的是工程师的KPI和经理的KPI以及新产品数量。</span><br><span class="line">由于CEO和CTO对于不同员工的关注点是不一样的，这就需要对不同员工类型进行不同的处理。</span><br></pre></td></tr></table></figure><h4 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h4><p>设计一个Man和Woman类，在类中判断是成功还是失败。</p><p>问题：</p><ol><li>如果系统比较小，还是ok的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了ocp原则</li><li>扩展性不好，比如增加了新的人员类型，或者管理方法，都不好做</li></ol><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>访问者模式(<code>Visitor Pattern</code>)，封装一些<strong>作用于某种数据结构的各元素的操作</strong>，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</li><li>主要将<strong>数据结构与数据操作分离</strong>，解决数据结构和操作耦合性问题</li><li>访问者模式的基本工作原理是:<strong>在被访问的类里面加一个对外提供接待访问者的接口</strong></li><li>访问者模式主要应用场景是:需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时需要避免让这些操作”污染”这些对象的类，可以选用访问者模式解决</li></ul><img src="/2022/01/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/类图.png" alt="image-20220111171100565" style="zoom: 67%;"><p>角色</p><ul><li><code>visitor</code>是抽象访问者。为该对象结构中的ConcreteElement的每一个类声明一个visit操作</li><li><code>Concretevisitor</code>:是一个具体的访问值实现每个有Visitor声明的操作，是每个操作实现的部分.</li><li><code>ObjectStructure</code>:能枚举它的元素，可以提供一个高层的接口,用来允许访问者访问元素</li><li><code>Element</code>：定义一个accept方法，接收二个访问者对象</li><li><code>ConcreteElement</code> 为具体元素,实现了accet方法</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>由于CEO和CTO对于不同员工的关注点是不一样的，这就需要对不同员工类型进行不同的处理。访问者模式此时可以派上用场了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> kpi;<span class="comment">// 员工KPI</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        kpi = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 核心方法，接受Visitor的访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Staff 类定义了员工基本信息及一个 accept 方法，accept 方法表示接受访问者的访问，由子类具体实现。<strong>Visitor 是个接口，传入不同的实现类，可访问不同的数据</strong>。下面看看工程师和经理的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工程师</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engineer</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Engineer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工程师一年的代码数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCodeLines</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(<span class="number">10</span> * <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 经理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一年做的产品数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProducts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工程师是代码数量，经理是产品数量，他们的职责不一样，也就是因为差异性，才使得访问模式能够发挥它的作用。Staff、Engineer、Manager 3个类型就是<strong>对象结构，这些类型相对稳定</strong>，不会发生变化。</p><p>然后将这些员工添加到一个业务报表类中，公司高层可以通过该报表类的 <code>showReport</code> 方法查看所有员工的业绩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 员工业务报表类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessReport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Staff&gt; mStaffs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mStaffs.add(<span class="keyword">new</span> Manager(<span class="string">&quot;经理-A&quot;</span>));</span><br><span class="line">        mStaffs.add(<span class="keyword">new</span> Engineer(<span class="string">&quot;工程师-A&quot;</span>));</span><br><span class="line">        mStaffs.add(<span class="keyword">new</span> Engineer(<span class="string">&quot;工程师-B&quot;</span>));</span><br><span class="line">        mStaffs.add(<span class="keyword">new</span> Engineer(<span class="string">&quot;工程师-C&quot;</span>));</span><br><span class="line">        mStaffs.add(<span class="keyword">new</span> Manager(<span class="string">&quot;经理-B&quot;</span>));</span><br><span class="line">        mStaffs.add(<span class="keyword">new</span> Engineer(<span class="string">&quot;工程师-D&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为访问者展示报表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visitor 公司高层，如CEO、CTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showReport</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Staff staff : mStaffs) &#123;</span><br><span class="line">            staff.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Visitor 类型的定义， Visitor 声明了两个 visit 方法，分别是对工程师和经理对访问函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问工程师类型</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engineer engineer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问经理类型</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了一个 Visitor 接口，该接口有两个 visit 函数，参数分别是 Engineer、Manager，也就是说对于 Engineer、Manager 的访问会调用两个不同的方法，以此达成区别对待、差异化处理。具体实现类为 CEOVisitor、CTOVisitor类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CEO访问者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEOVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engineer engineer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工程师: &quot;</span> + engineer.name + <span class="string">&quot;, KPI: &quot;</span> + engineer.kpi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理: &quot;</span> + manager.name + <span class="string">&quot;, KPI: &quot;</span> + manager.kpi +</span><br><span class="line">                <span class="string">&quot;, 新产品数量: &quot;</span> + manager.getProducts());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用到了<strong>双分派</strong>，即首先在客户端程序中，将具体的状态作为参数传递给Staff,这是第一次分派然后Staff类调用了作为参数的具体方法中的方法visit，同时将自己的this作为参数传入，第二次分派</p><p>在CEO的访问者中，CEO关注工程师的 KPI，经理的 KPI 和新产品数量，通过两个 visitor 方法分别进行处理。如果不使用 Visitor 模式，只通过一个 visit 方法进行处理，那么就需要在这个 visit 方法中进行判断，然后分别处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CTOVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engineer engineer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工程师: &quot;</span> + engineer.name + <span class="string">&quot;, 代码行数: &quot;</span> + engineer.getCodeLines());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理: &quot;</span> + manager.name + <span class="string">&quot;, 产品数量: &quot;</span> + manager.getProducts());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载的 visit 方法会对元素进行不同的操作，而通过注入不同的 Visitor 又可以替换掉访问者的具体实现</strong>，使得对元素的操作变得更灵活，可扩展性更高，同时也消除了类型转换、if-else 等“丑陋”的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建报表</span></span><br><span class="line">        BusinessReport report = <span class="keyword">new</span> BusinessReport();</span><br><span class="line">        System.out.println(<span class="string">&quot;=========== CEO看报表 ===========&quot;</span>);</span><br><span class="line">        report.showReport(<span class="keyword">new</span> CEOVisitor());</span><br><span class="line">        System.out.println(<span class="string">&quot;=========== CTO看报表 ===========&quot;</span>);</span><br><span class="line">        report.showReport(<span class="keyword">new</span> CTOVisitor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">=========== CEO看报表 ===========</span><br><span class="line">经理: 经理-A, KPI: <span class="number">9</span>, 新产品数量: <span class="number">0</span></span><br><span class="line">工程师: 工程师-A, KPI: <span class="number">6</span></span><br><span class="line">工程师: 工程师-B, KPI: <span class="number">6</span></span><br><span class="line">工程师: 工程师-C, KPI: <span class="number">8</span></span><br><span class="line">经理: 经理-B, KPI: <span class="number">2</span>, 新产品数量: <span class="number">6</span></span><br><span class="line">工程师: 工程师-D, KPI: <span class="number">6</span></span><br><span class="line">=========== <span class="built_in">CTO</span>看报表 ===========</span><br><span class="line">经理: 经理-A, 产品数量: <span class="number">3</span></span><br><span class="line">工程师: 工程师-A, 代码行数: <span class="number">62558</span></span><br><span class="line">工程师: 工程师-B, 代码行数: <span class="number">92965</span></span><br><span class="line">工程师: 工程师-C, 代码行数: <span class="number">58839</span></span><br><span class="line">经理: 经理-B, 产品数量: <span class="number">6</span></span><br><span class="line">工程师: 工程师-D, 代码行数: <span class="number">53125</span></span><br></pre></td></tr></table></figure><p>Staff 扮演了 Element 角色，而 Engineer 和 Manager 都是 ConcreteElement；CEOVisitor 和 CTOVisitor 都是具体的 Visitor 对象；而 BusinessReport 就是 ObjectStructure；Client就是客户端代码。</p><p> 访问者模式最大的优点就是增加访问者非常容易，我们从代码中可以看到，如果要增加一个访问者，只要新实现一个 Visitor 接口的类，从而达到数据对象与数据操作相分离的效果。如果不实用访问者模式，而又不想对不同的元素进行不同的操作，那么必定需要使用 if-else 和类型转换，这使得代码难以升级维护。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>优点<ul><li>访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高</li><li>访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统</li></ul></li><li>缺点<ul><li>具体元素<strong>对访问者公布细节</strong>，也就是说<strong>访问者关注了其他类的内部细节</strong>，这是迪米特法则所不建议的,这样造成了具体元素变更比较困难</li><li>违背了依赖倒转原则。访问者<strong>依赖的是具体元素</strong>，而不是抽象元素</li><li>因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的.</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;访问者模式&quot;&gt;&lt;a href=&quot;#访问者模式&quot; class=&quot;headerlink&quot; title=&quot;访问者模式&quot;&gt;&lt;/a&gt;访问者模式&lt;/h2&gt;&lt;h3 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;年底，CEO和CTO开始评定员工一年的工作绩效，员工分为工程师和经理，CTO关注工程师的代码量、经理的新产品数量；CEO关注的是工程师的KPI和经理的KPI以及新产品数量。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于CEO和CTO对于不同员工的关注点是不一样的，这就需要对不同员工类型进行不同的处理。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;传统方式&quot;&gt;&lt;a href=&quot;#传统方式&quot; class=&quot;headerlink&quot; title=&quot;传统方式&quot;&gt;&lt;/a&gt;传统方式&lt;/h4&gt;&lt;p&gt;设计一个Man和Woman类，在类中判断是成功还是失败。&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果系统比较小，还是ok的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了ocp原则&lt;/li&gt;
&lt;li&gt;扩展性不好，比如增加了新的人员类型，或者管理方法，都不好做&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;访问者模式(&lt;code&gt;Visitor Pattern&lt;/code&gt;)，封装一些&lt;strong&gt;作用于某种数据结构的各元素的操作&lt;/strong&gt;，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。&lt;/li&gt;
&lt;li&gt;主要将&lt;strong&gt;数据结构与数据操作分离&lt;/strong&gt;，解决数据结构和操作耦合性问题&lt;/li&gt;
&lt;li&gt;访问者模式的基本工作原理是:&lt;strong&gt;在被访问的类里面加一个对外提供接待访问者的接口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;访问者模式主要应用场景是:需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时需要避免让这些操作”污染”这些对象的类，可以选用访问者模式解决&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/类图.png&quot; alt=&quot;image-20220111171100565&quot; style=&quot;zoom: 67%;&quot;&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-命令模式</title>
    <link href="http://yoursite.com/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-10T03:08:51.000Z</published>
    <updated>2022-01-11T08:58:19.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装app就可以控制对这些家电工作。</span><br><span class="line">2.这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个App，分别控制，我们希望只要一个app就可以控制全部智能家电。</span><br><span class="line">3.要实现一个app控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给app调用，这时就可以考虑使用命令模式。</span><br><span class="line">4.命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.</span><br><span class="line">5.在我们的例子中，动作的请求者是手机app，动作的执行者是每个厂商的一个家电产品</span><br></pre></td></tr></table></figure><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>命令模式( <code>command Pattern)</code>:在软件设计中，我们经常<strong>需要向某些对象发送请求</strong>，但是<strong>并不知道请求的接收者是谁，也不知道被请求的操作是哪个</strong>.<br>我们只需在程序运行时<strong>指定具体的请求接收者</strong>即可，此时，可以使用命令模式来进行设计</p><p>命名模式使得<strong>请求发送者与请求接收者消除彼此之间的耦合</strong>，让对象之间的调用关系更加灵活，实现解耦。</p><p>在命名模式中，会<strong>将一个请求封装为一个对象</strong>，以便使用不同参数来表示不向的请求(即命名)，同时命令模式也支持可撤销的操作。</p><p>通俗易懂的理解:将军发布命令，士兵去执行。其中有几个角色:将军(命令发布者)、王兵（命令的具体执行者）、命令(连接将军和士兵)。</p><img src="/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/原理图.png" alt="image-20220110171326231" style="zoom:80%;"><ul><li>Invoker是调用者,</li><li>Receiver是接收者,知道如何执行一个请求相关的操作</li><li>Command是命令，实现了Command接口，持有接收对象</li><li>ConcreteCommand:将一个接受者对象与一个动作，调用接受者响应的操作，实现execute。</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><img src="/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/开关问题.png" alt="开关问题" style="zoom:80%;"><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//撤销</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接受者的方法</span></span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接受者的方法</span></span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有命令空执行。用于初始化每个按钮，当调用空命令时，对象什么都不做</span></span><br><span class="line"><span class="comment">//这也是一种设计模式，可以省掉对空的判断。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电灯打开了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电灯关闭了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开按钮的命令数组</span></span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行撤销命令</span></span><br><span class="line">    Command undoCommand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器完成对按钮的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteController</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">this</span>.offCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给我们的按钮设置你需要的按钮设置命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> no, Command onCommand, Command offCommand)</span></span>&#123;</span><br><span class="line">        onCommands[no] = onCommand;</span><br><span class="line">        offCommands[no] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下开的按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的开按钮，并调用对应的方法</span></span><br><span class="line">        onCommands[no].execute();</span><br><span class="line">        <span class="comment">//记录这次操作，用于撤销</span></span><br><span class="line">        undoCommand = onCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下关的按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的开按钮，并调用对应的方法</span></span><br><span class="line">        offCommands[no].execute();</span><br><span class="line">        <span class="comment">//记录这次操作，用于撤销</span></span><br><span class="line">        undoCommand = offCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下撤销按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoButtonWasPushed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用命令模式，完成遥控器对电灯的操作</span></span><br><span class="line">        <span class="comment">//创建电灯对象</span></span><br><span class="line">        LightReceiver lightReceiver = <span class="keyword">new</span> LightReceiver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电灯相关开关</span></span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(lightReceiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(lightReceiver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要一个遥控器</span></span><br><span class="line">        RemoteController remoteController = <span class="keyword">new</span> RemoteController();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置相关命令</span></span><br><span class="line">        remoteController.setCommand(<span class="number">0</span>, lightOnCommand, lightOffCommand);</span><br><span class="line"></span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码使用"><a href="#源码使用" class="headerlink" title="源码使用"></a>源码使用</h3><h4 id="JdbcTemplete"><a href="#JdbcTemplete" class="headerlink" title="JdbcTemplete"></a>JdbcTemplete</h4><p><code>JdbcTemplate</code>是invoke，<code>execute</code>方法调用了<code>action.doInSatement</code>,不同的实现对线，对应不同的实现逻辑。</p><p>匿名内部类实现命令接口，同时充当了命令接受者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplate</span> <span class="keyword">extends</span> <span class="title">JdbcAccessor</span> <span class="keyword">implements</span> <span class="title">JdbcOperations</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> ResultSetExtractor&lt;T&gt; rse)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">Assert.notNull(sql, <span class="string">&quot;SQL must not be null&quot;</span>);</span><br><span class="line">Assert.notNull(rse, <span class="string">&quot;ResultSetExtractor must not be null&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Executing SQL query [&quot;</span> + sql + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryStatementCallback</span> <span class="keyword">implements</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt;, <span class="title">SqlProvider</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">doInStatement</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs = stmt.executeQuery(sql);</span><br><span class="line">ResultSet rsToUse = rs;</span><br><span class="line"><span class="keyword">if</span> (nativeJdbcExtractor != <span class="keyword">null</span>) &#123;</span><br><span class="line">rsToUse = nativeJdbcExtractor.getNativeResultSet(rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rse.extractData(rsToUse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">JdbcUtils.closeResultSet(rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> execute(<span class="keyword">new</span> QueryStatementCallback());</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(StatementCallback&lt;T&gt; action)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">Assert.notNull(action, <span class="string">&quot;Callback object must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">Connection con = DataSourceUtils.getConnection(getDataSource());</span><br><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Connection conToUse = con;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.nativeJdbcExtractor != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line"><span class="keyword">this</span>.nativeJdbcExtractor.isNativeConnectionNecessaryForNativeStatements()) &#123;</span><br><span class="line">conToUse = <span class="keyword">this</span>.nativeJdbcExtractor.getNativeConnection(con);</span><br><span class="line">&#125;</span><br><span class="line">stmt = conToUse.createStatement();</span><br><span class="line">applyStatementSettings(stmt);</span><br><span class="line">Statement stmtToUse = stmt;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.nativeJdbcExtractor != <span class="keyword">null</span>) &#123;</span><br><span class="line">stmtToUse = <span class="keyword">this</span>.nativeJdbcExtractor.getNativeStatement(stmt);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//调用</span></span><br><span class="line">T result = action.doInStatement(stmtToUse);</span><br><span class="line">handleWarnings(stmt);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line"><span class="comment">// Release Connection early, to avoid potential connection pool deadlock</span></span><br><span class="line"><span class="comment">// in the case when the exception translator hasn&#x27;t been initialized yet.</span></span><br><span class="line">JdbcUtils.closeStatement(stmt);</span><br><span class="line">stmt = <span class="keyword">null</span>;</span><br><span class="line">DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">con = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">throw</span> getExceptionTranslator().translate(<span class="string">&quot;StatementCallback&quot;</span>, getSql(action), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">JdbcUtils.closeStatement(stmt);</span><br><span class="line">DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StatementCallback</code>,命令接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">T <span class="title">doInStatement</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException, DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>将<strong>发起请求的对象与执行请求的对象解耦</strong>。发起请求的对象是调用者，调用者只要调用命令对象的execute()方法就可以让接收者工作，而不必知道具体的接收者对象是谁、是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说:”请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，<strong>命令对象起到了纽带桥梁的作用</strong>。</li><li>容易设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令</li><li>容易<strong>实现对请求的撤销和重做</strong></li><li>命令模式不足:可能导致某些系统有<strong>过多的具体命令类</strong>，增加了系统的复杂度，这点在在使用的时候要注意</li><li>空命令也是一种设计模式，它为我们省去了判空的操作。在上面的实例中，如果没有用空命令，我们每按下一个按键都要判空，这给我们编码带来一定的麻烦。</li><li>命令模式经典的应用场景:界面的一个按钮都是一条命令、模拟CMD (DOS命令)订单的撤销/恢复、触发-反馈机制</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h2&gt;&lt;h3 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装app就可以控制对这些家电工作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个App，分别控制，我们希望只要一个app就可以控制全部智能家电。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.要实现一个app控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给app调用，这时就可以考虑使用命令模式。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.在我们的例子中，动作的请求者是手机app，动作的执行者是每个厂商的一个家电产品&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;p&gt;命令模式( &lt;code&gt;command Pattern)&lt;/code&gt;:在软件设计中，我们经常&lt;strong&gt;需要向某些对象发送请求&lt;/strong&gt;，但是&lt;strong&gt;并不知道请求的接收者是谁，也不知道被请求的操作是哪个&lt;/strong&gt;.&lt;br&gt;我们只需在程序运行时&lt;strong&gt;指定具体的请求接收者&lt;/strong&gt;即可，此时，可以使用命令模式来进行设计&lt;/p&gt;
&lt;p&gt;命名模式使得&lt;strong&gt;请求发送者与请求接收者消除彼此之间的耦合&lt;/strong&gt;，让对象之间的调用关系更加灵活，实现解耦。&lt;/p&gt;
&lt;p&gt;在命名模式中，会&lt;strong&gt;将一个请求封装为一个对象&lt;/strong&gt;，以便使用不同参数来表示不向的请求(即命名)，同时命令模式也支持可撤销的操作。&lt;/p&gt;
&lt;p&gt;通俗易懂的理解:将军发布命令，士兵去执行。其中有几个角色:将军(命令发布者)、王兵（命令的具体执行者）、命令(连接将军和士兵)。&lt;/p&gt;
&lt;img src=&quot;/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/原理图.png&quot; alt=&quot;image-20220110171326231&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;ul&gt;
&lt;li&gt;Invoker是调用者,&lt;/li&gt;
&lt;li&gt;Receiver是接收者,知道如何执行一个请求相关的操作&lt;/li&gt;
&lt;li&gt;Command是命令，实现了Command接口，持有接收对象&lt;/li&gt;
&lt;li&gt;ConcreteCommand:将一个接受者对象与一个动作，调用接受者响应的操作，实现execute。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-模板模式</title>
    <link href="http://yoursite.com/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-10T01:36:49.000Z</published>
    <updated>2022-01-10T03:08:07.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编写制作豆浆的程序，说明如下:</span><br><span class="line">1)制作豆浆的流程选材---&gt;添加配料---&gt;浸泡---&gt;放到豆浆机打碎</span><br><span class="line">2)通过添加不同的配料，可以制作出不同口味的豆浆</span><br><span class="line">3)选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的</span><br></pre></td></tr></table></figure><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>模板方法模式（Template Method Pattern)，又叫模板模式(Template Pattern)，<strong>在一个抽象类公开定义了执行它的方法的模板</strong>。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</li><li>简单说，模板方法模式<strong>定义一个操作中的算法的骨架</strong>，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤</li><li>这种类型的设计模式属于<strong>行为型模式</strong>。</li></ul><img src="/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/原理图.png" alt="image-20220110094545359" style="zoom:67%;"><p>角色</p><ul><li><code>AbstractClass抽象类</code>，类中实现了模板方法，定义了算法的骨架，<strong>具体子类需要去实现其它的抽象方法</strong></li><li><code>ConcreteClass</code> 实现抽象方法，以完成算法中子类的步骤</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>制作模板，实现共有的方法,把特定方法放到子类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板方法， 做成final, 不让子类覆盖</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        addCondiments();</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：选择黄豆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.添加不同的配料，抽象方法，子类实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：黄豆和配料一起浸泡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.打碎</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步，黄豆和配料放到豆浆机去打碎&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBeanSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：加入红豆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeanutSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：加入花生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制作红豆豆浆</span></span><br><span class="line">        RedBeanSoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制作花生豆浆</span></span><br><span class="line">        PeanutSoyaMilk peanutSoyaMilk = <span class="keyword">new</span> PeanutSoyaMilk();</span><br><span class="line">        peanutSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板方法模式中的钩子方法"><a href="#模板方法模式中的钩子方法" class="headerlink" title="模板方法模式中的钩子方法"></a>模板方法模式中的钩子方法</h3><ul><li><p>在模板方法模式的父类中，我们可以<strong>定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为“钩子”。</strong></p></li><li><p>还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的模板方法进行改造</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板方法， 做成final, 不让子类覆盖</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        <span class="keyword">if</span>(customerWantCondiments())&#123;</span><br><span class="line">            addCondiments();</span><br><span class="line">        &#125;</span><br><span class="line">        addCondiments();</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：选择黄豆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.添加不同的配料，抽象方法，子类实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：黄豆和配料一起浸泡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.打碎</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步，黄豆和配料放到豆浆机去打碎&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//钩子方法，是否需要添加配料</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCondiments</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PureSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制作红豆豆浆</span></span><br><span class="line">        RedBeanSoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制作花生豆浆</span></span><br><span class="line">        PeanutSoyaMilk peanutSoyaMilk = <span class="keyword">new</span> PeanutSoyaMilk();</span><br><span class="line">        peanutSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">        PureSoyaMilk pureSoyaMilk = <span class="keyword">new</span> PureSoyaMilk();</span><br><span class="line">        pureSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Spring中的模板方法"><a href="#在Spring中的模板方法" class="headerlink" title="在Spring中的模板方法"></a>在Spring中的模板方法</h3><p>在Spring IOC中使用了模板方法</p><p><code>ConfigurableApplicationContext</code>中有个方法<code>refresh</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span>, <span class="title">Lifecycle</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看子类,这个方法里面的方法都是钩子方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line"><span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这也是一个钩子函数，交给子类去实现</span></span><br><span class="line">refreshBeanFactory();</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Bean factory for &quot;</span> + getDisplayName() + <span class="string">&quot;: &quot;</span> + beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GenericApplicationContext</code>子类实现了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistry</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.refreshed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">&quot;GenericApplicationContext does not support multiple refresh attempts: just call &#x27;refresh&#x27; once&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.beanFactory.setSerializationId(getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>基本思想是:<strong>算法只存在于一个地方，也就是在父类中，容易修改</strong>。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改</li><li><strong>实现了最大化代码复用</strong>。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。</li><li><strong>既统一了算法，也提供了很大的灵活性</strong>。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现。</li><li>该模式的不足之处:每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大</li><li>一般模板方法都加上<code>final</code>关键字，防止子类重写模板方法.</li><li>模板方法模式使用场景:<strong>当要完成在某个过程，该过程要执行一系列步骤</strong>，<strong>这一系列的步骤基本相同，但其个别步骤在实现时可能不同</strong>，通常考虑用模板方法模式来处理</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;模板模式&quot;&gt;&lt;a href=&quot;#模板模式&quot; class=&quot;headerlink&quot; title=&quot;模板模式&quot;&gt;&lt;/a&gt;模板模式&lt;/h2&gt;&lt;h3 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;编写制作豆浆的程序，说明如下:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1)制作豆浆的流程选材---&amp;gt;添加配料---&amp;gt;浸泡---&amp;gt;放到豆浆机打碎&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2)通过添加不同的配料，可以制作出不同口味的豆浆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3)选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;模板方法模式（Template Method Pattern)，又叫模板模式(Template Pattern)，&lt;strong&gt;在一个抽象类公开定义了执行它的方法的模板&lt;/strong&gt;。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。&lt;/li&gt;
&lt;li&gt;简单说，模板方法模式&lt;strong&gt;定义一个操作中的算法的骨架&lt;/strong&gt;，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤&lt;/li&gt;
&lt;li&gt;这种类型的设计模式属于&lt;strong&gt;行为型模式&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/原理图.png&quot; alt=&quot;image-20220110094545359&quot; style=&quot;zoom:67%;&quot;&gt;

&lt;p&gt;角色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbstractClass抽象类&lt;/code&gt;，类中实现了模板方法，定义了算法的骨架，&lt;strong&gt;具体子类需要去实现其它的抽象方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteClass&lt;/code&gt; 实现抽象方法，以完成算法中子类的步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;&lt;p&gt;制作模板，实现共有的方法,把特定方法放到子类实现&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-享元模式</title>
    <link href="http://yoursite.com/2022/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-07T08:18:46.000Z</published>
    <updated>2022-01-09T11:59:33.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同</span><br><span class="line">1)有客户要求以新闻的形式发布</span><br><span class="line">2)有客户人要求以博客的形式发布</span><br><span class="line">3)有客户希望以微信公众号的形式发布</span><br></pre></td></tr></table></figure><h3 id="传统方式的解决方法"><a href="#传统方式的解决方法" class="headerlink" title="传统方式的解决方法"></a>传统方式的解决方法</h3><p>直接复制粘贴一份，然后根据客户不同要求，进行定制修改给每个网站<strong>租用一个空间</strong></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li>需要的网站结构<strong>相似度很高</strong>，而且都<strong>不是高访问量网站</strong>，如果分成多个虚拟空间来处理，相当于一个相同网站的<strong>实例对象很多</strong>，造成服务器的资源浪费</li><li>解决思路:<strong>整合到一个网站中</strong>，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源都可以达成共享，减少服务器资源</li><li>对于代码来说，由于是一份实例,维护和扩展都更加容易</li><li>上面的解决思路就可以使用<strong>享元模式</strong>来解决</li></ol><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>享元模式( <code>Flyweight Pattern</code>）也叫蝇量模式:运用<strong>共享技术有效地支持大量细粒度的对象</strong></li><li>常用于系统底层开发，解决系统的性能问题。像<strong>数据库连接池</strong>,里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个</li><li>享元模式能够解决<strong>重复对象的内存浪费的问题</strong>，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象,可以从缓冲池里拿。这样可以降低系统内存，同时提高效率<br>享元模式经典的应用场景就是池技术了，<strong>String常量池、数据库连接池、缓冲池</strong>等等都是享元模式的应用，享元模式是池技术的重要实现方式</li></ol><p>![Flyweight Structure.png-72.6kB](享元模式/Flyweight Structure.png)</p><p>角色</p><ul><li><p><code>flyweight</code>： 享元接口，通过这个接口<strong>传入外部状态并作用于外部状态</strong>,<strong>定义内部状态</strong>；</p></li><li><p><code>ConcreteFlyweight</code>： 具体的享元实现对象，必须是可共享的，需要封装享元对象的内部状态；</p></li><li><p><code>UnsharedConcreteFlyweight</code>： 非共享的享元实现对象，并不是所有的享元对象都可以共享，非共享的享元对象通常是享元对象的组合对象；一般不会用在享元工厂。</p></li><li><p><code>FlyweightFactory</code>： 享元工厂，主要用来创建并管理共享的享元对象，<strong>并对外提供访问共享享元的接口</strong>；</p></li></ul><p>享元模式提出了两个要求:细粒度和共享对象这里就涉及到内部状态和外部状态了，即将对象的信息分为两个部分:内部状态和外部状态</p><ul><li>内部状态指<strong>对象共享出来的信息</strong>，存储在享元对象内部且不会随环境的改变而改变</li><li>外部状态指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态。</li></ul><p>举个例子:围棋理论上有361个空位可以放棋子，每盘棋都有可能有两三百个棋子对象产生，因为内存空间有限，一台服务器很难支持更多的玩家玩围棋游戏，如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例，这样就很好的解决了对象的开销问题</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li>flyweight</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>ConcreteFlyweight</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebSite</span> <span class="keyword">extends</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type = <span class="string">&quot;&quot;</span>; <span class="comment">//网站发布形式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteWebSite</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;网站发布形式为：&quot;</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>FlyweightFactory</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSiteFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合，充当具体作业</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,ConcreteWebSite&gt; pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据网站类型，返回一个网站，如果没有就创建一个网站放入池中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSite <span class="title">getWebSiteCategory</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!pool.containsKey(type))&#123;</span><br><span class="line">            <span class="comment">//创建一个网站，放入</span></span><br><span class="line">            pool.put(type, <span class="keyword">new</span> ConcreteWebSite(type));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pool.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取网站分类的总是</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWebSiteCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pool.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>client</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WebSiteFactory webSiteFactory = <span class="keyword">new</span> WebSiteFactory();</span><br><span class="line"></span><br><span class="line">        WebSite webSite1 = webSiteFactory.getWebSiteCategory(<span class="string">&quot;新闻&quot;</span>);</span><br><span class="line">        webSite1.use();</span><br><span class="line">        WebSite webSite2 = webSiteFactory.getWebSiteCategory(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        webSite2.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加外部状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebSite</span> <span class="keyword">extends</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type = <span class="string">&quot;&quot;</span>; <span class="comment">//网站发布形式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteWebSite</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;网站发布形式为：&quot;</span> + type + <span class="string">&quot;, 使用者：&quot;</span> + user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WebSiteFactory webSiteFactory = <span class="keyword">new</span> WebSiteFactory();</span><br><span class="line"></span><br><span class="line">        WebSite webSite1 = webSiteFactory.getWebSiteCategory(<span class="string">&quot;新闻&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setName(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        webSite1.use(user1);</span><br><span class="line">        WebSite webSite2 = webSiteFactory.getWebSiteCategory(<span class="string">&quot;新闻&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setName(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        webSite2.use(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在JDK中的使用"><a href="#在JDK中的使用" class="headerlink" title="在JDK中的使用"></a>在JDK中的使用</h3><p>Integer类就使用了享元模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer x = Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">        Integer y = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">        Integer z = Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">        Integer w = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">        System.out.println(x.equals(y));    <span class="comment">//true</span></span><br><span class="line">        System.out.println(x == y);         <span class="comment">//false</span></span><br><span class="line">        System.out.println(x == z);         <span class="comment">//true</span></span><br><span class="line">        System.out.println(w == x);         <span class="comment">//false</span></span><br><span class="line">        System.out.println(w == y);         <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>valueOf</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在 -128 -- 127使用享元模式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在valueOf方法中，先判断值是否在IntegerCache 中，如果不在，就创建新的Integer对象</li><li>value0F 方法,就使用到享元模式</li><li>如果使用valueOf方法得到一个Integer实例，范围在-128 - 127，执行速度比 new 快</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在享元模式这样理解，“享”就表示共享，“元”表示对象</li><li>系统中有<strong>大量对象</strong>，这些对象消耗大量内存，并且对象的状态大部分可以外部化时,我们就可以考虑选用享元模式</li><li>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用HashMap/HashTable存储</li><li>享元模式<strong>大大减少了对象的创建，降低了程序内存的占用，提高效率</strong></li><li>享元模式<strong>提高了系统的复杂度</strong>。需要<strong>分离出内部状态和外部状态，而外部状态具有固化特性</strong>，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的地方.</li><li>使用享元模式时，注意划分内部状态和外部状态，并且需要<strong>有一个工厂类加以控制</strong></li><li>经典的应用场景是需要缓冲池的场景，比如 String常量池、数据库连接池</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;h3 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1)有客户要求以新闻的形式发布&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2)有客户人要求以博客的形式发布&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3)有客户希望以微信公众号的形式发布&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;传统方式的解决方法&quot;&gt;&lt;a href=&quot;#传统方式的解决方法&quot; class=&quot;headerlink&quot; title=&quot;传统方式的解决方法&quot;&gt;&lt;/a&gt;传统方式的解决方法&lt;/h3&gt;&lt;p&gt;直接复制粘贴一份，然后根据客户不同要求，进行定制修改给每个网站&lt;strong&gt;租用一个空间&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;需要的网站结构&lt;strong&gt;相似度很高&lt;/strong&gt;，而且都&lt;strong&gt;不是高访问量网站&lt;/strong&gt;，如果分成多个虚拟空间来处理，相当于一个相同网站的&lt;strong&gt;实例对象很多&lt;/strong&gt;，造成服务器的资源浪费&lt;/li&gt;
&lt;li&gt;解决思路:&lt;strong&gt;整合到一个网站中&lt;/strong&gt;，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源都可以达成共享，减少服务器资源&lt;/li&gt;
&lt;li&gt;对于代码来说，由于是一份实例,维护和扩展都更加容易&lt;/li&gt;
&lt;li&gt;上面的解决思路就可以使用&lt;strong&gt;享元模式&lt;/strong&gt;来解决&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;享元模式( &lt;code&gt;Flyweight Pattern&lt;/code&gt;）也叫蝇量模式:运用&lt;strong&gt;共享技术有效地支持大量细粒度的对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;常用于系统底层开发，解决系统的性能问题。像&lt;strong&gt;数据库连接池&lt;/strong&gt;,里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个&lt;/li&gt;
&lt;li&gt;享元模式能够解决&lt;strong&gt;重复对象的内存浪费的问题&lt;/strong&gt;，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象,可以从缓冲池里拿。这样可以降低系统内存，同时提高效率&lt;br&gt;享元模式经典的应用场景就是池技术了，&lt;strong&gt;String常量池、数据库连接池、缓冲池&lt;/strong&gt;等等都是享元模式的应用，享元模式是池技术的重要实现方式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![Flyweight Structure.png-72.6kB](享元模式/Flyweight Structure.png)&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-外观模式</title>
    <link href="http://yoursite.com/2022/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-05T08:20:33.000Z</published>
    <updated>2022-01-07T08:17:29.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">组建—家庭影院:</span><br><span class="line">DVD播放器、投影仪、自动屏幕、环绕立体声、爆米花机,要求完成使用家庭影院的功能，其过程为:</span><br><span class="line">·直接用遥控器:统筹各设备开关</span><br><span class="line">·开爆米花机</span><br><span class="line">·放下屏幕</span><br><span class="line">·开投影仪。</span><br><span class="line">·开音响</span><br><span class="line">·开DVD,选dvd。</span><br><span class="line">·去拿爆米花</span><br><span class="line">·调陪灯光</span><br><span class="line">·播放</span><br><span class="line">·观影结束后,关闭各种设备</span><br></pre></td></tr></table></figure><h4 id="传统方式的解决方法"><a href="#传统方式的解决方法" class="headerlink" title="传统方式的解决方法"></a>传统方式的解决方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ClientTest &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建相关对象</span></span><br><span class="line">        <span class="comment">//2.调用创建的各个对象的一系列方法</span></span><br><span class="line">        <span class="comment">//3.调用DVDPlayer对象的play方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统方式解决影院管理问题</p><ol><li>在ClientTest的main方法中，创建各个子系统的对象，并直接去调用子系统(对象)<br>相关方法，会<strong>造成调用过程混乱，没有清晰的过程</strong></li><li>不利于在ClientTest 中，去维护对子系统的操作</li><li>解决思路:<strong>定义一个高层接口</strong>，给子系统中的一组接口提供一个<strong>一致的界面(比</strong><br><strong>如在高层接口提供四个方法ready, play, pause,end )</strong>，用来访问子系统中的一群接口</li><li>也就是说就是通过<strong>定义一个一致的接口(界面类)</strong>，用以<strong>屏蔽内部子系统的细节</strong>，<br>使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节=&gt;外观模式</li></ol><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>外观模式（ <code>Facade</code>)，也叫“过程模式:外观模式<strong>为子系统中的一组接口提供一个一致的界面</strong>，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</li><li>外观模式通过<strong>定义一个一致的接口</strong>，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节</li></ul><img src="/2022/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/image-20220107145144687.png" alt="image-20220107145144687" style="zoom:67%;"><ol><li>外观（Facade）角色：为多个子系统对外<strong>提供一个共同的接口</strong>。外观类知道哪些子系统负责处理请求,从而将调用端的请求代理给适兰子系统对象</li><li>子系统（Sub System）角色：<strong>实现系统的部分功能</strong>，客户可以通过外观角色访问它。</li><li>客户（Client）角色：通过一个外观角色访问各个子系统的功能。</li></ol><h3 id="解决影院问题"><a href="#解决影院问题" class="headerlink" title="解决影院问题"></a>解决影院问题</h3><p>设计一系列类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DVDPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DVDPlayer instance = <span class="keyword">new</span> DVDPlayer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DVDPlayer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DVDPlayer <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dvd on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dvd off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dvd is playing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dvd is pause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Popcorn</span> </span>&#123;</span><br><span class="line">    <span class="comment">//单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Popcorn instance = <span class="keyword">new</span> Popcorn();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Popcorn</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Popcorn <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;popcorn on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;popcorn off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">popping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;popcorn is popping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Projector</span> </span>&#123;</span><br><span class="line">    <span class="comment">//单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Projector instance = <span class="keyword">new</span> Projector();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Projector</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Projector <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;projector on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;projector off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">focus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;popcorn is focus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="comment">//单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Screen instance = <span class="keyword">new</span> Screen();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Screen</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Screen <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Screen up &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Screen down&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stereo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stereo instance = <span class="keyword">new</span> Stereo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Stereo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stereo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stereo on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Screen off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Screen up&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheaterLight</span> </span>&#123;</span><br><span class="line">    <span class="comment">//单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TheaterLight instance = <span class="keyword">new</span> TheaterLight();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TheaterLight</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TheaterLight <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TheaterLight on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TheaterLight off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TheaterLight dim&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bright</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TheaterLight bright&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外观类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义各个子系统对象</span></span><br><span class="line">    <span class="keyword">private</span> TheaterLight theaterLight;  <span class="comment">//灯光</span></span><br><span class="line">    <span class="keyword">private</span> Popcorn popcorn;            <span class="comment">//爆米花</span></span><br><span class="line">    <span class="keyword">private</span> Stereo stereo;              <span class="comment">//立体声</span></span><br><span class="line">    <span class="keyword">private</span> Projector projector;        <span class="comment">//投影仪</span></span><br><span class="line">    <span class="keyword">private</span> Screen screen;              <span class="comment">//屏幕</span></span><br><span class="line">    <span class="keyword">private</span> DVDPlayer dvdPlayer;        <span class="comment">//DVD</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.theaterLight = TheaterLight.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.popcorn = Popcorn.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.stereo = Stereo.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.projector = Projector.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.screen = Screen.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.dvdPlayer = DVDPlayer.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作分为4步</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.on();</span><br><span class="line">        popcorn.popping();</span><br><span class="line">        screen.down();</span><br><span class="line">        projector.on();</span><br><span class="line">        stereo.on();</span><br><span class="line">        dvdPlayer.on();</span><br><span class="line">        theaterLight.dim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.pause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.off();</span><br><span class="line">        theaterLight.bright();</span><br><span class="line">        screen.up();</span><br><span class="line">        projector.off();</span><br><span class="line">        stereo.off();</span><br><span class="line">        dvdPlayer.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HomeTheaterFacade homeTheaterFacade = <span class="keyword">new</span> HomeTheaterFacade();</span><br><span class="line">        homeTheaterFacade.ready();</span><br><span class="line">        homeTheaterFacade.play();</span><br><span class="line">        homeTheaterFacade.pause();</span><br><span class="line">        homeTheaterFacade.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>外观模式对外屏蔽了子系统的细节，因此外观模式降低了<strong>客户端对子系统使用的复杂性</strong></li><li>外观模式对<strong>客户端与子系统的耦合关系</strong>，让子系统内部的模块<strong>更易维护和扩展</strong>通过合理的使用外观模式，可以帮我们更好的划分访问的层次</li><li>当系统需要进行分层设计时，可以考虑使用Facade模式</li><li>在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统<strong>开发一个Facade类</strong>，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性</li><li>不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利于维护为目的。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h2&gt;&lt;h3 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;组建—家庭影院:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DVD播放器、投影仪、自动屏幕、环绕立体声、爆米花机,要求完成使用家庭影院的功能，其过程为:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·直接用遥控器:统筹各设备开关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·开爆米花机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·放下屏幕&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·开投影仪。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·开音响&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·开DVD,选dvd。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·去拿爆米花&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·调陪灯光&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·播放&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;·观影结束后,关闭各种设备&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;传统方式的解决方法&quot;&gt;&lt;a href=&quot;#传统方式的解决方法&quot; class=&quot;headerlink&quot; title=&quot;传统方式的解决方法&quot;&gt;&lt;/a&gt;传统方式的解决方法&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ClientTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//1.创建相关对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//2.调用创建的各个对象的一系列方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//3.调用DVDPlayer对象的play方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;传统方式解决影院管理问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在ClientTest的main方法中，创建各个子系统的对象，并直接去调用子系统(对象)&lt;br&gt;相关方法，会&lt;strong&gt;造成调用过程混乱，没有清晰的过程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不利于在ClientTest 中，去维护对子系统的操作&lt;/li&gt;
&lt;li&gt;解决思路:&lt;strong&gt;定义一个高层接口&lt;/strong&gt;，给子系统中的一组接口提供一个&lt;strong&gt;一致的界面(比&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;如在高层接口提供四个方法ready, play, pause,end )&lt;/strong&gt;，用来访问子系统中的一群接口&lt;/li&gt;
&lt;li&gt;也就是说就是通过&lt;strong&gt;定义一个一致的接口(界面类)&lt;/strong&gt;，用以&lt;strong&gt;屏蔽内部子系统的细节&lt;/strong&gt;，&lt;br&gt;使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节=&amp;gt;外观模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;外观模式（ &lt;code&gt;Facade&lt;/code&gt;)，也叫“过程模式:外观模式&lt;strong&gt;为子系统中的一组接口提供一个一致的界面&lt;/strong&gt;，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用&lt;/li&gt;
&lt;li&gt;外观模式通过&lt;strong&gt;定义一个一致的接口&lt;/strong&gt;，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2022/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/image-20220107145144687.png&quot; alt=&quot;image-20220107145144687&quot; style=&quot;zoom:67%;&quot;&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>OAuth</title>
    <link href="http://yoursite.com/2021/12/24/%E6%A1%86%E6%9E%B6/security/OAuth/"/>
    <id>http://yoursite.com/2021/12/24/%E6%A1%86%E6%9E%B6/security/OAuth/</id>
    <published>2021-12-24T07:06:49.000Z</published>
    <updated>2022-01-05T07:36:23.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、OAuth2-0介绍"><a href="#一、OAuth2-0介绍" class="headerlink" title="一、OAuth2.0介绍"></a>一、OAuth2.0介绍</h2><p>OAuth（开放授权）是一个开放标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不 需要将用户名和密码提供给第三方应用或分享他们数据的所有内容</p><p>通过例子去理解OAuth2.0协议的认证流程：</p><p>用户借助微信认证登录网站，<strong>用户就不用单独在网站注册用户</strong>，怎么样算认证成功吗？网站需要成功从微信获取用户的身份信息则认为用户认证成功，那如何从微信获取用户的身份信息？用户信息的拥有者是用户本人，微信需要经过用户的同意方可为网站生成令牌，网站拿此令牌方可从微信获取用户的信息。 </p><ol><li><strong>客户端请求第三方授权</strong> ，点击微信的图标以微信账号登录系统，用户是自己在微信里信息的资源拥有者。 </li><li><strong>资源拥有者同意给客户端授权</strong> ， 验证通过后，微 信会询问用户是否给授权访问自己的微信数据，用户点击“确认登录”表示同意授权，微信认证服务器会<strong>颁发一个授权码</strong>，并重定向到网站。 </li><li><strong>客户端获取到授权码</strong>，请求认证服务器申请令牌，客户端应用程序请求认证服务器，请求携带授权码。 </li><li><strong>认证服务器向客户端响应令牌</strong>，微信认证服务器验证了客户端请求的授权码，如果合法则给客户端颁发令牌，令牌是客户端访问资源的通行证。 </li><li><strong>客户端请求资源服务器的资源</strong> ，客户端携带令牌访问资源服务器的资源</li><li><strong>资源服务器返回受保护资源</strong>，资源服务器校验令牌的合法性，如果合法则向用户响应资源信息内容。 </li></ol><img src="/2021/12/24/%E6%A1%86%E6%9E%B6/security/OAuth/认证授权流程.png" alt="image-20211224170208202" style="zoom:80%;"><p>OAuth2.0认证流程</p><img src="/2021/12/24/%E6%A1%86%E6%9E%B6/security/OAuth/OAuth2.0.png" alt="image-20211224170519263" style="zoom: 67%;"><p>OAauth2.0包括以下角色： </p><ol><li><strong>客户端</strong> :本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：Android客户端、Web客户端（浏览器端）、微信客户端等。 </li><li><strong>资源拥有者</strong> :通常为用户，也可以是应用程序，即该资源的拥有者。 </li><li><strong>授权服务器（也称认证服务器）</strong>:用于服务提供商对资源拥有的身份进行认证、对访问资源进行授权，认证成功后会给客户端发放令牌 （access_token），作为客户端访问资源服务器的凭据。本例为微信的认证服务器。 </li><li><strong>资源服务器</strong> :存储资源的服务器，本例子为微信存储的用户信息。 </li></ol><p>现在还有一个问题，服务提供商能允许随便一个<strong>客户端</strong>就接入到它的<strong>授权服务器</strong>吗？答案是否定的，服务提供商会 给准入的接入方一个身份，用于接入时的凭据: </p><p><strong>client_id</strong>：客户端标识 <strong>client_secret</strong>：客户端秘钥 </p><p>因此，准确来说，<strong>授权服务器</strong>对两种OAuth2.0中的两个角色进行认证授权，分别是<strong>资源拥有者</strong>、<strong>客户端</strong></p><h2 id="二、-Spring-Cloud-Security-OAuth2"><a href="#二、-Spring-Cloud-Security-OAuth2" class="headerlink" title="二、 Spring Cloud Security OAuth2"></a>二、 Spring Cloud Security OAuth2</h2><p>OAuth2.0的服务提供方涵盖两个服务，即授权服务 (Authorization Server，也叫认证服务) 和资源服务 (Resource Server)，使用 Spring Security OAuth2 的时候你可以选择把它们在同一个应用程序中实现，也可以选择建立使用 同一个授权服务的多个资源服务。 </p><p><strong>授权服务</strong> <strong>(Authorization Server**</strong>）**应包含对接入端以及登入用户的合法性进行验证并颁发token等功能，对令牌 的请求端点由 Spring MVC 控制器进行实现，下面是配置一个认证服务必须要实现的endpoints： </p><ul><li><p><strong>AuthorizationEndpoint</strong> 服务于认证请求。默认 URL： <code>/oauth/authorize</code> 。 </p></li><li><p><strong>TokenEndpoint</strong> 服务于访问令牌的请求。默认 URL： <code>/oauth/token</code> 。 </p></li></ul><p><strong>资源服务</strong> <strong>(Resource Server)</strong>，应包含对资源的保护功能，对非法请求进行拦截，对请求中token进行解析鉴 权等，下面的过滤器用于实现 OAuth 2.0 资源服务： </p><ul><li>OAuth2AuthenticationProcessingFilter用来对请求给出的身份令牌解析鉴权。 </li></ul><img src="/2021/12/24/%E6%A1%86%E6%9E%B6/security/OAuth/授权和资源服务.png" alt="image-20211224171330686" style="zoom:67%;"><p>认证流程如下： </p><ol><li>客户端请求UAA授权服务进行认证。 </li><li>认证通过后由UAA颁发令牌。 </li><li>客户端携带令牌Token请求资源服务。</li><li>资源服务校验令牌的合法性，合法即返回资源信息。</li></ol><h2 id="二、搭建环境"><a href="#二、搭建环境" class="headerlink" title="二、搭建环境"></a>二、搭建环境</h2><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><p>创建一个父工程<code>distribute-security</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. distributed-security-order 资源服务</span><br><span class="line">2. distributed-security-uaa 授权服务</span><br></pre></td></tr></table></figure><h3 id="授权服务器配置"><a href="#授权服务器配置" class="headerlink" title="授权服务器配置"></a>授权服务器配置</h3><h4 id="1-EnableAuthorizationServer"><a href="#1-EnableAuthorizationServer" class="headerlink" title="1.EnableAuthorizationServer"></a>1.EnableAuthorizationServer</h4><p>用 <code>@EnableAuthorizationServer 注</code>解并继承<code>AuthorizationServerConfifigurerAdapter</code>来配置OAuth2.0 授权 服务器。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthorizationServerConfifigurerAdapter</code>要求配置以下几个类，这几个类是由Spring创建的独立的配置对象，它们 会被Spring传入<code>AuthorizationServerConfifigurer</code>中进行配置。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">AuthorizationServerConfigurer</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationServerConfigurerAdapter</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">                                                                                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125; </span><br><span class="line">                                                                                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125; </span><br><span class="line">                                                                                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125; &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>ClientDetailsServiceConfifigurer</strong>：用来<strong>配置客户端详情服务</strong>（ClientDetailsService），客户端详情信息在这里进行初始化，你能够把客户端详情信息写死在这里或者是通过数据库来存储调取详情信息。 </li><li><strong>AuthorizationServerEndpointsConfifigurer</strong>：用来配置令牌（token）的访问端点和令牌服务(token services)。 </li><li><strong>AuthorizationServerSecurityConfifigurer</strong>：用来配置令牌端点的安全约束. </li></ul><h4 id="2-配置客户端详细信息"><a href="#2-配置客户端详细信息" class="headerlink" title="2.配置客户端详细信息"></a>2.配置客户端详细信息</h4><p><code>ClientDetailsServiceConfifigurer</code> 能够使用内存或者JDBC来实现客户端详情服务（ClientDetailsService）， <code>ClientDetailsService</code>负责查找ClientDetails，而ClientDetails有几个重要的属性如下列表： </p><ul><li><p><code>clientId</code>：（必须的）用来标识客户的Id。 </p></li><li><p><code>secret</code>：（需要值得信任的客户端）客户端安全码，如果有的话。 </p></li><li><p><code>scope</code>：用来限制客户端的访问范围，如果为空（默认）的话，那么客户端拥有全部的访问范围。 </p></li><li><p><code>authorizedGrantTypes</code>：此客户端可以使用的授权类型，默认为空。 </p></li><li><p><code>authorities</code>：此客户端可以使用的权限（基于Spring Security authorities）</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、OAuth2-0介绍&quot;&gt;&lt;a href=&quot;#一、OAuth2-0介绍&quot; class=&quot;headerlink&quot; title=&quot;一、OAuth2.0介绍&quot;&gt;&lt;/a&gt;一、OAuth2.0介绍&lt;/h2&gt;&lt;p&gt;OAuth（开放授权）是一个开放标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不 需要将用户名和密码提供给第三方应用或分享他们数据的所有内容&lt;/p&gt;
&lt;p&gt;通过例子去理解OAuth2.0协议的认证流程：&lt;/p&gt;
&lt;p&gt;用户借助微信认证登录网站，&lt;strong&gt;用户就不用单独在网站注册用户&lt;/strong&gt;，怎么样算认证成功吗？网站需要成功从微信获取用户的身份信息则认为用户认证成功，那如何从微信获取用户的身份信息？用户信息的拥有者是用户本人，微信需要经过用户的同意方可为网站生成令牌，网站拿此令牌方可从微信获取用户的信息。 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端请求第三方授权&lt;/strong&gt; ，点击微信的图标以微信账号登录系统，用户是自己在微信里信息的资源拥有者。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源拥有者同意给客户端授权&lt;/strong&gt; ， 验证通过后，微 信会询问用户是否给授权访问自己的微信数据，用户点击“确认登录”表示同意授权，微信认证服务器会&lt;strong&gt;颁发一个授权码&lt;/strong&gt;，并重定向到网站。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端获取到授权码&lt;/strong&gt;，请求认证服务器申请令牌，客户端应用程序请求认证服务器，请求携带授权码。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;认证服务器向客户端响应令牌&lt;/strong&gt;，微信认证服务器验证了客户端请求的授权码，如果合法则给客户端颁发令牌，令牌是客户端访问资源的通行证。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端请求资源服务器的资源&lt;/strong&gt; ，客户端携带令牌访问资源服务器的资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源服务器返回受保护资源&lt;/strong&gt;，资源服务器校验令牌的合法性，如果合法则向用户响应资源信息内容。 &lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;/2021/12/24/%E6%A1%86%E6%9E%B6/security/OAuth/认证授权流程.png&quot; alt=&quot;image-20211224170208202&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;p&gt;OAuth2.0认证流程&lt;/p&gt;
&lt;img src=&quot;/2021/12/24/%E6%A1%86%E6%9E%B6/security/OAuth/OAuth2.0.png&quot; alt=&quot;image-20211224170519263&quot; style=&quot;zoom: 67%;&quot;&gt;

&lt;p&gt;OAauth2.0包括以下角色： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端&lt;/strong&gt; :本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：Android客户端、Web客户端（浏览器端）、微信客户端等。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源拥有者&lt;/strong&gt; :通常为用户，也可以是应用程序，即该资源的拥有者。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;授权服务器（也称认证服务器）&lt;/strong&gt;:用于服务提供商对资源拥有的身份进行认证、对访问资源进行授权，认证成功后会给客户端发放令牌 （access_token），作为客户端访问资源服务器的凭据。本例为微信的认证服务器。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源服务器&lt;/strong&gt; :存储资源的服务器，本例子为微信存储的用户信息。 &lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="SpringSecurity" scheme="http://yoursite.com/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity原理</title>
    <link href="http://yoursite.com/2021/12/12/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2021/12/12/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%8E%9F%E7%90%86/</id>
    <published>2021-12-12T07:57:05.000Z</published>
    <updated>2021-12-23T03:58:38.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SpringSecurity-的过滤器介绍"><a href="#一、SpringSecurity-的过滤器介绍" class="headerlink" title="一、SpringSecurity 的过滤器介绍"></a>一、SpringSecurity 的过滤器介绍</h2><p>采用的是责任链的设计模式，它有一条很长的过滤器链。</p><ol><li><p><code>WebAsyncManagerIntegrationFilter</code>：将 Security 上下文与 Spring Web 中用于处理异步请求映射的 WebAsyncManager 进行集成。</p></li><li><p><code>SecurityContextPersistenceFilter</code>：在每次请求处理之前将该请求相关的安全上下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder 中的信息清除，例如在 Session 中维护一个用户的安全信息就是这个过滤器处理的。</p></li><li><p><code>HeaderWriterFilter</code>：用于将<strong>头信息加入响应</strong>中。</p></li><li><p><code>CsrfFilter</code>：用于处理跨站请求伪造。</p></li><li><p><code>LogoutFilter</code>：用于<strong>处理退出登录</strong>。</p></li><li><p><code>UsernamePasswordAuthenticationFilter</code>：用于<strong>处理基于表单的登录请求</strong>，从表单中获取用户名和密码。默认情况下处理来自 /login 的请求。从表单中获取用户名和密码时，默认使用的表单 name 值为 username 和 password，这两个值可以通过设置这个过滤器的 usernameParameter 和 passwordParameter 两个参数的值进行修改。</p></li><li><p><code>DefaultLoginPageGeneratingFilter</code>：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时<strong>生成一个登录表单页面</strong>。</p></li><li><p><code>BasicAuthenticationFilter</code>：检测和处理 http basic 认证。</p></li><li><p><code>RequestCacheAwareFilter</code>：用来<strong>处理请求的缓存</strong>。</p></li><li><p><code>SecurityContextHolderAwareRequestFilter</code>：主要是<strong>包装请求对象 request</strong>。 </p></li><li><p><code>AnonymousAuthenticationFilter</code>：检测 SecurityContextHolder 中是否存在Authentication 对象，如果不存在为其提供一个匿名 Authentication。 </p></li><li><p><code>SessionManagementFilter</code>：<strong>管理 session 的过滤器</strong></p></li><li><p><code>ExceptionTranslationFilter</code>：处理 AccessDeniedException 和AuthenticationException 异常。</p></li><li><p><code>FilterSecurityInterceptor</code>：可以看做过滤器链的出口。</p></li><li><p><code>RememberMeAuthenticationFilter</code>：当用户没有登录而直接访问资源时, <strong>从 cookie 里找出用户的信息</strong>, 如果 Spring Security 能够识别出用户提供的 remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。</p></li></ol><h2 id="二、-SpringSecurity-基本流程"><a href="#二、-SpringSecurity-基本流程" class="headerlink" title="二、 SpringSecurity 基本流程"></a>二、 SpringSecurity 基本流程</h2><img src="/2021/12/12/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%8E%9F%E7%90%86/基本流程.png" alt="image-20211212184305204" style="zoom:80%;"><p>绿色部分是认证过滤器，需要我们自己配置，可以配置多个认证过滤器。认证过滤器可以使用 <strong>Spring Security</strong> 提供的认证过滤器，也可以自定义过滤器（例如：短信验证）。认证过滤器要在 <strong>configure(HttpSecurity http)</strong>方法中配置，没有配置不生效。下面会重</p><p>点介绍以下三个过滤器：</p><ol><li><strong>UsernamePasswordAuthenticationFilter</strong> 过滤器：该过滤器会拦截前端提交的 POST 方式的登录表单请求，并进行身份认证。</li><li><strong>ExceptionTranslationFilter</strong> 过滤器：该过滤器不需要我们配置，对于前端提交的请求会直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）。</li><li><strong>FilterSecurityInterceptor</strong> 过滤器：该过滤器是过滤器链的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，并由 <strong>ExceptionTranslationFilter</strong> 过滤器进行捕获和处理。</li></ol><h2 id="三、-SpringSecurity-认证流程"><a href="#三、-SpringSecurity-认证流程" class="headerlink" title="三、 SpringSecurity 认证流程"></a>三、 SpringSecurity 认证流程</h2><p>认证流程是在 <strong>UsernamePasswordAuthenticationFilter</strong> 过滤器中处理的</p><img src="/2021/12/12/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%8E%9F%E7%90%86/认证流程.png" alt="image-20211212184702641" style="zoom:80%;"><h3 id="UsernamePasswordAuthenticationFilter-源码"><a href="#UsernamePasswordAuthenticationFilter-源码" class="headerlink" title="UsernamePasswordAuthenticationFilter 源码"></a>UsernamePasswordAuthenticationFilter 源码</h3><p>当前端提交的是一个 POST 方式的登录表单请求，就会被该过滤器拦截，并进行身份认证。该过滤器的 <code>doFilter()</code> 方法实现在其抽象父类<strong>AbstractAuthenticationProcessingFilter</strong> <strong>中，查看相关源码：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤器doFilter</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest request = (HttpServletRequest)req;</span><br><span class="line">    HttpServletResponse response = (HttpServletResponse)res;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.requiresAuthentication(request, response)) &#123;</span><br><span class="line">        <span class="comment">//1.判断是不是post提交，如果不是post提交直接放行，进入下一个过滤器</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Request is to process authentication&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//Authentication用来存储用户信息的类</span></span><br><span class="line">        Authentication authResult;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.调用子类重写的方法进行身份认证，返回Authentication中存储了用户的信息</span></span><br><span class="line">            authResult = <span class="keyword">this</span>.attemptAuthentication(request, response);</span><br><span class="line">            <span class="keyword">if</span> (authResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//3.Session策略处理（如果用户配置了Session最大并发数，就在此处理）</span></span><br><span class="line">            <span class="keyword">this</span>.sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InternalAuthenticationServiceException var8) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.error(<span class="string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, var8);</span><br><span class="line">            <span class="comment">//4.认证失败，调用认证失败的处理器</span></span><br><span class="line">            <span class="keyword">this</span>.unsuccessfulAuthentication(request, response, var8);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException var9) &#123;</span><br><span class="line">            <span class="keyword">this</span>.unsuccessfulAuthentication(request, response, var9);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//4.认证成功的处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">            <span class="comment">//默认的值为false,认证成功之后不进入下一个处理器</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//认证成功的处理器</span></span><br><span class="line">        <span class="keyword">this</span>.successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的第二个过程调用子类UsernamePasswordAuthenticationFilter <strong>r 的attemptAuthentication() 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsernamePasswordAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_SECURITY_FORM_USERNAME_KEY = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_SECURITY_FORM_PASSWORD_KEY = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String usernameParameter = <span class="string">&quot;username&quot;</span>; <span class="comment">//默认表单用户名参数username</span></span><br><span class="line">    <span class="keyword">private</span> String passwordParameter = <span class="string">&quot;password&quot;</span>;<span class="comment">//默认表单用户密码参数username</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> postOnly = <span class="keyword">true</span>;<span class="comment">//默认请求方式为POST</span></span><br><span class="line">    <span class="comment">//默认登陆表单提交路径为/login POST方式提交</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;POST&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用doFilter这里进行身份认证</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//1.默认情况下如果请求不是POST会抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.获取请求的username和password</span></span><br><span class="line">            String username = <span class="keyword">this</span>.obtainUsername(request);</span><br><span class="line">            String password = <span class="keyword">this</span>.obtainPassword(request);</span><br><span class="line">            <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">                username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">                password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            username = username.trim();</span><br><span class="line">            <span class="comment">//3.使用前端传来的username、password构造Authentication对象，标记对象未认证</span></span><br><span class="line">            UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">            <span class="comment">//4.将请求中一些属性放入设置到Authentication对象中（如remoteAddress、sessionId）</span></span><br><span class="line">            <span class="keyword">this</span>.setDetails(request, authRequest);</span><br><span class="line">            <span class="comment">//5.调用ProvideManger类的authenticate方法进行身份认证</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述的（3）过程创建的 <code>UsernamePasswordAuthenticationToken</code> <strong>是Authentication 接口的实现类</strong>，该类有两个构造器，一个用于<strong>封装前端请求传入的未认证的用户信息</strong>，一个用于<strong>封装认证成功后的用户信息</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsernamePasswordAuthenticationToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">520L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line">    <span class="keyword">private</span> Object credentials;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装前端请求传的未认证的用户信息,前面的 authRequest对象就是调用该构造器进行构造的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>((Collection)<span class="keyword">null</span>);<span class="comment">//用户权限为null</span></span><br><span class="line">        <span class="keyword">this</span>.principal = principal;<span class="comment">//前端传来的用户名</span></span><br><span class="line">        <span class="keyword">this</span>.credentials = credentials;<span class="comment">//前端传来的密码</span></span><br><span class="line">        <span class="keyword">this</span>.setAuthenticated(<span class="keyword">false</span>);<span class="comment">//标记未认证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户封装认证成功后的用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authorities);<span class="comment">//用户权限列表</span></span><br><span class="line">        <span class="keyword">this</span>.principal = principal;<span class="comment">//封装认证用户信息的UserDetails对象，不是用户名</span></span><br><span class="line">        <span class="keyword">this</span>.credentials = credentials;<span class="comment">//前端传来的密码</span></span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">true</span>);<span class="comment">//标记已认证</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Authentication 接口的实现类用于存储用户认证信息，查看该接口具体定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Authentication</span> <span class="keyword">extends</span> <span class="title">Principal</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户权限集合</span></span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"><span class="comment">//用户密码</span></span><br><span class="line">    <span class="function">Object <span class="title">getCredentials</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//请求携带的一些信息sessionId,remoteAddress</span></span><br><span class="line">    <span class="function">Object <span class="title">getDetails</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//未认证时前端传来的用户名，认证成功后封装用户信息的UserDetails对象</span></span><br><span class="line">    <span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//是否被认证</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//设置是否被认证</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> var1)</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProviderManager-源码"><a href="#ProviderManager-源码" class="headerlink" title="ProviderManager 源码"></a>ProviderManager 源码</h3><p>上述过程中，<strong>UsernamePasswordAuthenticationFilter</strong> 过滤器的attemptAuthentication() 方法的（5）过程将未认证的 Authentication 对象传入ProviderManager 类的 authenticate() 方法进行身份认证。</p><p><code>ProviderManager</code> 是 <code>AuthenticationManager</code> 接口的实现类，该接口是认证相关的核心接口，也是认证的入口。在实际开发中，我们可能<strong>有多种不同的认证方式</strong>，例如：用户名+密码、邮箱+密码、手机号+验证码等，而这些认证方式的入口始终只有一个，那就是<code>AuthenticationManager</code>。在该接口的常用实现类 ProviderManager 内部会维护一个<strong>List<AuthenticationProvider></AuthenticationProvider></strong>列表，存放多种认证方式，实际上这是<strong>委托者模式（Delegate）的应用</strong>。每种认证方式对应着一个 <code>AuthenticationProvider</code>，<code>AuthenticationManager</code> <strong>根据认证方式的不同（根据传入的 Authentication 类型判断）委托对应的 AuthenticationProvider 进行用户认证。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderManager</span> <span class="keyword">implements</span> <span class="title">AuthenticationManager</span>, <span class="title">MessageSourceAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//(1)获取传入的Authentication类型，即UsernamePasswordAuthenticationToken.class</span></span><br><span class="line">        Class&lt;? extends Authentication&gt; toTest = authentication.getClass();</span><br><span class="line">        AuthenticationException lastException = <span class="keyword">null</span>;</span><br><span class="line">        AuthenticationException parentException = <span class="keyword">null</span>;</span><br><span class="line">        Authentication result = <span class="keyword">null</span>;</span><br><span class="line">        Authentication parentResult = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line">        <span class="comment">//(2)获取认证方式列表List&lt;AuthenticationProvider&gt;</span></span><br><span class="line">        Iterator var8 = <span class="keyword">this</span>.getProviders().iterator();</span><br><span class="line"><span class="comment">//循环迭代</span></span><br><span class="line">        <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">            AuthenticationProvider provider = (AuthenticationProvider)var8.next();</span><br><span class="line">            <span class="comment">//(3)判断当前AuthenticationProvider是否适用UsernanePasSwordAuthenticationToken.class类型的﹔</span></span><br><span class="line">            <span class="keyword">if</span> (provider.supports(toTest)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Authentication attempt using &quot;</span> + provider.getClass().getName());</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//成功找到适配当前认证方式的 AuthenticationProvider，此处为DaoAuthenticationProvider</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="comment">//(4）调用DaoAuthenticationProvider 的authenticate()方法进行认证;</span></span><br><span class="line">                    <span class="comment">//如果认证成功，会返回一个标记已认证的Authentication对象</span></span><br><span class="line">                    result = provider.authenticate(authentication);</span><br><span class="line">                    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//(5)认证成功后，将传入的 Authentication对象中的details信息拷贝到已认证的 Authentication</span></span><br><span class="line">                        <span class="keyword">this</span>.copyDetails(authentication, result);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InternalAuthenticationServiceException | AccountStatusException var13) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.prepareException(var13, authentication);</span><br><span class="line">                    <span class="keyword">throw</span> var13;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (AuthenticationException var14) &#123;</span><br><span class="line">                    lastException = var14;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//(5)认证失败,使用父类型AuthenticationManager进行验证</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = parentResult = <span class="keyword">this</span>.parent.authenticate(authentication);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ProviderNotFoundException var11) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException var12) &#123;</span><br><span class="line">                parentException = var12;</span><br><span class="line">                lastException = var12;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//(6)认证成功之后，去除result 的敏感信息，要求相关类实现CredentialsContainer接口</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.eraseCredentialsAfterAuthentication &amp;&amp; result <span class="keyword">instanceof</span> CredentialsContainer) &#123;</span><br><span class="line">                ((CredentialsContainer)result).eraseCredentials();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//(7)发布认证成功的事件</span></span><br><span class="line">            <span class="keyword">if</span> (parentResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//(8)认证失败之后抛出失败的异常</span></span><br><span class="line">            <span class="keyword">if</span> (lastException == <span class="keyword">null</span>) &#123;</span><br><span class="line">                lastException = <span class="keyword">new</span> ProviderNotFoundException(<span class="keyword">this</span>.messages.getMessage(<span class="string">&quot;ProviderManager.providerNotFound&quot;</span>, <span class="keyword">new</span> Object[]&#123;toTest.getName()&#125;, <span class="string">&quot;No AuthenticationProvider found for &#123;0&#125;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (parentException == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.prepareException((AuthenticationException)lastException, authentication);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> lastException;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述认证成功之后的（6）过程，调用 <code>CredentialsContainer</code> 接口定义的<code>eraseCredentials()</code> 方法去除敏感信息。查看<code>UsernamePasswordAuthenticationToken</code> 实现的 <code>eraseCredentials()</code> 方法，该方法实现在其父类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAuthenticationToken</span> <span class="keyword">implements</span> <span class="title">Authentication</span>, <span class="title">CredentialsContainer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eraseCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//credentials（前端传入的密码）会置为null</span></span><br><span class="line">        <span class="keyword">this</span>.eraseSecret(<span class="keyword">this</span>.getCredentials());</span><br><span class="line">       <span class="comment">//principal在已认证的 Authentication中是 UserDetails 实现类;如果该实现类想要去除敏感信息，需要实现CredentialsContainer接口的eraseCredentials()方法;由于我们自定义的 User类没有实现该接口，所以不进行任何操作。</span></span><br><span class="line">        <span class="keyword">this</span>.eraseSecret(<span class="keyword">this</span>.getPrincipal());</span><br><span class="line">        <span class="keyword">this</span>.eraseSecret(<span class="keyword">this</span>.details);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eraseSecret</span><span class="params">(Object secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (secret <span class="keyword">instanceof</span> CredentialsContainer) &#123;</span><br><span class="line">            ((CredentialsContainer)secret).eraseCredentials();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="认证成功-失败处理"><a href="#认证成功-失败处理" class="headerlink" title="认证成功/失败处理"></a>认证成功/失败处理</h3><p><strong>UsernamePasswordAuthenticationFilter</strong> 过滤器的 doFilter() 方法，查看认证成功/失败的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAuthenticationProcessingFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line">    <span class="comment">//认证成功的处理</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span> + authResult);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//1.将认证成功的用户信息Authentication封装进SecurityContext对象中，并存入SecurityContextHolder,securitycontextHolder是对ThreadLocal的一个封装，后续会介绍</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">        <span class="comment">//2.rememberMe处理</span></span><br><span class="line">        <span class="keyword">this</span>.rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//3.发布认证成功的事件</span></span><br><span class="line">            <span class="keyword">this</span>.eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//调用认证成功的处理器</span></span><br><span class="line">        <span class="keyword">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//认证失败的处理</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//1.清除该线程在SecurityContextHolder对应的SecurityContext对象</span></span><br><span class="line">        SecurityContextHolder.clearContext();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Authentication request failed: &quot;</span> + failed.toString(), failed);</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Updated SecurityContextHolder to contain null Authentication&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Delegating to authentication failure handler &quot;</span> + <span class="keyword">this</span>.failureHandler);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//2.rememberMe处理</span></span><br><span class="line">        <span class="keyword">this</span>.rememberMeServices.loginFail(request, response);</span><br><span class="line">        <span class="comment">//3.调用认证失败的处理器</span></span><br><span class="line">        <span class="keyword">this</span>.failureHandler.onAuthenticationFailure(request, response, failed);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/12/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%8E%9F%E7%90%86/%E8%AE%A4%E8%AF%81%E7%B1%BB.png" alt="image-20211214231203150"></p><h2 id="四、SpringSecurity权限流程"><a href="#四、SpringSecurity权限流程" class="headerlink" title="四、SpringSecurity权限流程"></a>四、SpringSecurity权限流程</h2><p>绍权限访问流程，主要是对<strong>ExceptionTranslationFilter</strong> 过滤器和 <strong>FilterSecurityInterceptor</strong> 过滤器进行介绍。</p><h3 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h3><p>是用于处理异常的，不需要我们配置，对于前端提交的请求会直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）。具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理AccessDeniedException和AuthenticationException</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTranslationFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest)req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse)res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Chain processed normally&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var9;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">            <span class="comment">//2.捕获后序出现的异常进行处理</span></span><br><span class="line">            Throwable[] causeChain = <span class="keyword">this</span>.throwableAnalyzer.determineCauseChain(var10);</span><br><span class="line">            <span class="comment">//访问需要认证的资源，但当前请求未认证抛出的异常</span></span><br><span class="line">            RuntimeException ase = (AuthenticationException)<span class="keyword">this</span>.throwableAnalyzer.getFirstThrowableOfType(AuthenticationException.class, causeChain);</span><br><span class="line">            <span class="keyword">if</span> (ase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//权限受限的资源所抛出的异常</span></span><br><span class="line">                ase = (AccessDeniedException)<span class="keyword">this</span>.throwableAnalyzer.getFirstThrowableOfType(AccessDeniedException.class, causeChain);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (var10 <span class="keyword">instanceof</span> ServletException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (ServletException)var10;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (var10 <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (RuntimeException)var10;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(var10);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (response.isCommitted()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Unable to handle the Spring Security Exception because the response is already committed.&quot;</span>, var10);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.handleSpringSecurityException(request, response, chain, (RuntimeException)ase);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h3><p><strong>FilterSecurityInterceptor</strong> 是过滤器链的最后一个过滤器，该过滤器是过滤器链的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，最终所抛出的异常会由前一个过滤器<strong>ExceptionTranslationFilter</strong> 进行捕获和处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterSecurityInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">FilterInvocation fi = <span class="keyword">new</span> FilterInvocation(request, response, chain);</span><br><span class="line">        <span class="comment">//调用invoke方法</span></span><br><span class="line">invoke(fi);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation fi)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((fi.getRequest() != <span class="keyword">null</span>)</span><br><span class="line">&amp;&amp; (fi.getRequest().getAttribute(FILTER_APPLIED) != <span class="keyword">null</span>)</span><br><span class="line">&amp;&amp; observeOncePerRequest) &#123;</span><br><span class="line"><span class="comment">// filter already applied to this request and user wants us to observe</span></span><br><span class="line"><span class="comment">// once-per-request handling, so don&#x27;t re-do security checking</span></span><br><span class="line">fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// first time this request being called, so perform security checking</span></span><br><span class="line"><span class="keyword">if</span> (fi.getRequest() != <span class="keyword">null</span> &amp;&amp; observeOncePerRequest) &#123;</span><br><span class="line">fi.getRequest().setAttribute(FILTER_APPLIED, Boolean.TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.根据资源权限配置判断当前请求是否有权限访问对应资源，如果不能访问则抛出异常</span></span><br><span class="line">InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(fi);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//2.访问相关资源，通过SpringMVC核心组件DispatcherServlet进行访问</span></span><br><span class="line">fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">super</span>.finallyInvocation(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.afterInvocation(token, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，<strong>Spring Security</strong> 的过滤器链是配置在 SpringMVC 的核心组件DispatcherServlet 运行之前。也就是说，请求通过 <strong>Spring Security</strong> 的所有过滤器，不意味着能够正常访问资源，该请求还需要通过 SpringMVC 的拦截器链。</p><h2 id="五、SpringSecurity-请求间共享认证信息"><a href="#五、SpringSecurity-请求间共享认证信息" class="headerlink" title="五、SpringSecurity 请求间共享认证信息"></a>五、SpringSecurity 请求间共享认证信息</h2><p>一般认证成功后的用户信息是通过 Session 在多个请求之间共享，那么 Spring Security 中是如何实现将已认证的用户信息对象 Authentication 与 Session 绑定的进行具体分析</p><img src="/2021/12/12/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%8E%9F%E7%90%86/请求共享认证信息.png" alt="image-20211214233009749" style="zoom:80%;"><ul><li>认证成功的处理方法 successfulAuthentication() </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">      HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span></span><br><span class="line">            + authResult);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//将以认证的信息对象封装到SecurityContext中，存入SecurityContextHolder中</span></span><br><span class="line">   SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line"></span><br><span class="line">   rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Fire event</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">      eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(</span><br><span class="line">            authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查 看 SecurityContext 接 口 及 其 实 现 类 SecurityContextImpl ， 该 类 其 实 就 是 对Authentication 的封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SecurityContext</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function">Authentication <span class="title">getAuthentication</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAuthentication</span><span class="params">(Authentication var1)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextImpl</span> <span class="keyword">implements</span> <span class="title">SecurityContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">520L</span>;</span><br><span class="line">    <span class="keyword">private</span> Authentication authentication;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityContextImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityContextImpl</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authentication = authentication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> SecurityContextImpl) &#123;</span><br><span class="line">            SecurityContextImpl test = (SecurityContextImpl)obj;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.getAuthentication() == <span class="keyword">null</span> &amp;&amp; test.getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.getAuthentication() != <span class="keyword">null</span> &amp;&amp; test.getAuthentication() != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.getAuthentication().equals(test.getAuthentication())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">getAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authentication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authentication == <span class="keyword">null</span> ? -<span class="number">1</span> : <span class="keyword">this</span>.authentication.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthentication</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authentication = authentication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="keyword">super</span>.toString());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.authentication == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;: Null authentication&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;: Authentication: &quot;</span>).append(<span class="keyword">this</span>.authentication);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查 看 SecurityContextHolder 类 ， 该 类 其 实 是 对 ThreadLocal 的 封 装 ， 存 储SecurityContext 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SecurityContextHolderStrategy strategy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> initializeCount = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityContextHolder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(strategyName)) &#123;</span><br><span class="line">            <span class="comment">//默认使用MODE_THREADLOCAL模式</span></span><br><span class="line">            strategyName = <span class="string">&quot;MODE_THREADLOCAL&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strategyName.equals(<span class="string">&quot;MODE_THREADLOCAL&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//默认使用ThreadLocalSecur1tyContextHolderStrategy 创建 strategy，其内部使用ThreadLocal对SecurltyContext进行存储</span></span><br><span class="line">            strategy = <span class="keyword">new</span> ThreadLocalSecurityContextHolderStrategy();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategyName.equals(<span class="string">&quot;MODE_INHERITABLETHREADLOCAL&quot;</span>)) &#123;</span><br><span class="line">            strategy = <span class="keyword">new</span> InheritableThreadLocalSecurityContextHolderStrategy();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategyName.equals(<span class="string">&quot;MODE_GLOBAL&quot;</span>)) &#123;</span><br><span class="line">            strategy = <span class="keyword">new</span> GlobalSecurityContextHolderStrategy();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(strategyName);</span><br><span class="line">                Constructor&lt;?&gt; customStrategy = clazz.getConstructor();</span><br><span class="line">                strategy = (SecurityContextHolderStrategy)customStrategy.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">                ReflectionUtils.handleReflectionException(var2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ++initializeCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecurityContext <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要注意，如果当前线程对应的ThreadLocal&lt;SecurityContext&gt;没有任何对象存储strategy.getContext()会创建并返回一个空的SecurityContext对象，并且该空的SecurityContext对象会存入ThreadLocal&lt;Securitycontext&gt;</span></span><br><span class="line">        <span class="keyword">return</span> strategy.getContext();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(SecurityContext context)</span> </span>&#123;</span><br><span class="line">        strategy.setContext(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSecurityContextHolderStrategy</span> <span class="keyword">implements</span> <span class="title">SecurityContextHolderStrategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用ThreadLocal对SecurltyContext进行存储</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SecurityContext&gt; contextHolder = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"></span><br><span class="line">    ThreadLocalSecurityContextHolderStrategy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        contextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityContext <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">//需要注意，如果当前线程对应的ThreadLocal&lt;SecurityContext&gt;没有任何对象存储strategy.getContext()会创建并返回一个空的SecurityContext对象，并且该空的SecurityContext对象会存入ThreadLocal&lt;Securitycontext&gt;</span></span><br><span class="line">        SecurityContext ctx = (SecurityContext)contextHolder.get();</span><br><span class="line">        <span class="keyword">if</span> (ctx == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ctx = <span class="keyword">this</span>.createEmptyContext();</span><br><span class="line">            contextHolder.set(ctx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(SecurityContext context)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(context, <span class="string">&quot;Only non-null SecurityContext instances are permitted&quot;</span>);</span><br><span class="line">        contextHolder.set(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityContext <span class="title">createEmptyContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecurityContextImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecurityContextPersistenceFilter 过滤器</p><p>在 <strong>UsernamePasswordAuthenticationFilter</strong> 过滤器认证成功之后，会在认证成功的处理方法中将已认证的用户信息对象 Authentication 封装进SecurityContext，并存入 SecurityContextHolder</p><p>之后，响应会通过 <strong>SecurityContextPersistenceFilter</strong> 过滤器，该过滤器的位置在所有过滤器的最前面，请求到来先进它，响应返回最后一个通过它，所以在该过滤器中处理已认证的用户信息对象 Authentication 与 Session 绑定。</p><p>认证成功的响应通过 <strong>SecurityContextPersistenceFilter</strong> 过滤器时，会从SecurityContextHolder 中取出封装了已认证用户信息对象 Authentication 的SecurityContext，<strong>放进 Session 中。当请求再次到来时</strong>，请求首先经过该过滤器，该过滤器会判断当前请求的 Session 是否存有 SecurityContext 对象，如果有则将该对象取出再次放入 SecurityContextHolder 中，<strong>之后该请求所在的线程获得认证用户信息，后续的资源访问不需要进行身份认证</strong>；当响应再次返回时，该过滤器同样从 SecurityContextHolder 取出SecurityContext 对象，放入 Session 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextPersistenceFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">      HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (request.getAttribute(FILTER_APPLIED) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// ensure that filter is only applied once per request</span></span><br><span class="line">         chain.doFilter(request, response);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">      request.setAttribute(FILTER_APPLIED, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (forceEagerSessionCreation) &#123;</span><br><span class="line">         HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (debug &amp;&amp; session.isNew()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Eagerly created session: &quot;</span> + session.getId());</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//1.请求到来时，检查当前Session中是否存有SecurityContext对象，如果有，从Session中取出该对象;如果没有，创建一个空的 SecurityContext对象</span></span><br><span class="line">      HttpRequestResponseHolder holder = <span class="keyword">new</span> HttpRequestResponseHolder(request,</span><br><span class="line">            response);</span><br><span class="line">      SecurityContext contextBeforeChainExecution = repo.loadContext(holder);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//2.将上述获得SecurityContext对象放入SecurityconteztHolder中</span></span><br><span class="line">         SecurityContextHolder.setContext(contextBeforeChainExecution);</span><br><span class="line"> <span class="comment">//3.进入下一个过滤器</span></span><br><span class="line">         chain.doFilter(holder.getRequest(), holder.getResponse());</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">//4.响应返回时，从SecurityContextHolder中取出securityContext</span></span><br><span class="line">         SecurityContext contextAfterChainExecution = SecurityContextHolder</span><br><span class="line">               .getContext();</span><br><span class="line">         <span class="comment">// Crucial removal of SecurityContextHolder contents - do this before anything</span></span><br><span class="line">         <span class="comment">// else.</span></span><br><span class="line">         <span class="comment">//移除SecuritycontextHolder中的SecurityContext对象</span></span><br><span class="line">         SecurityContextHolder.clearContext();</span><br><span class="line">         <span class="comment">//将取出的SecurityContext 对象放进session</span></span><br><span class="line">         repo.saveContext(contextAfterChainExecution, holder.getRequest(),</span><br><span class="line">               holder.getResponse());</span><br><span class="line">         request.removeAttribute(FILTER_APPLIED);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;SecurityContextHolder now cleared, as request processing completed&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceEagerSessionCreation</span><span class="params">(<span class="keyword">boolean</span> forceEagerSessionCreation)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.forceEagerSessionCreation = forceEagerSessionCreation;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、SpringSecurity-的过滤器介绍&quot;&gt;&lt;a href=&quot;#一、SpringSecurity-的过滤器介绍&quot; class=&quot;headerlink&quot; title=&quot;一、SpringSecurity 的过滤器介绍&quot;&gt;&lt;/a&gt;一、SpringSecurity 的过滤器介绍&lt;/h2&gt;&lt;p&gt;采用的是责任链的设计模式，它有一条很长的过滤器链。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;WebAsyncManagerIntegrationFilter&lt;/code&gt;：将 Security 上下文与 Spring Web 中用于处理异步请求映射的 WebAsyncManager 进行集成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SecurityContextPersistenceFilter&lt;/code&gt;：在每次请求处理之前将该请求相关的安全上下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将SecurityContextHolder 中的信息清除，例如在 Session 中维护一个用户的安全信息就是这个过滤器处理的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;HeaderWriterFilter&lt;/code&gt;：用于将&lt;strong&gt;头信息加入响应&lt;/strong&gt;中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;CsrfFilter&lt;/code&gt;：用于处理跨站请求伪造。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;LogoutFilter&lt;/code&gt;：用于&lt;strong&gt;处理退出登录&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;：用于&lt;strong&gt;处理基于表单的登录请求&lt;/strong&gt;，从表单中获取用户名和密码。默认情况下处理来自 /login 的请求。从表单中获取用户名和密码时，默认使用的表单 name 值为 username 和 password，这两个值可以通过设置这个过滤器的 usernameParameter 和 passwordParameter 两个参数的值进行修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;DefaultLoginPageGeneratingFilter&lt;/code&gt;：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时&lt;strong&gt;生成一个登录表单页面&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;BasicAuthenticationFilter&lt;/code&gt;：检测和处理 http basic 认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RequestCacheAwareFilter&lt;/code&gt;：用来&lt;strong&gt;处理请求的缓存&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SecurityContextHolderAwareRequestFilter&lt;/code&gt;：主要是&lt;strong&gt;包装请求对象 request&lt;/strong&gt;。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;AnonymousAuthenticationFilter&lt;/code&gt;：检测 SecurityContextHolder 中是否存在Authentication 对象，如果不存在为其提供一个匿名 Authentication。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SessionManagementFilter&lt;/code&gt;：&lt;strong&gt;管理 session 的过滤器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ExceptionTranslationFilter&lt;/code&gt;：处理 AccessDeniedException 和AuthenticationException 异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FilterSecurityInterceptor&lt;/code&gt;：可以看做过滤器链的出口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RememberMeAuthenticationFilter&lt;/code&gt;：当用户没有登录而直接访问资源时, &lt;strong&gt;从 cookie 里找出用户的信息&lt;/strong&gt;, 如果 Spring Security 能够识别出用户提供的 remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;二、-SpringSecurity-基本流程&quot;&gt;&lt;a href=&quot;#二、-SpringSecurity-基本流程&quot; class=&quot;headerlink&quot; title=&quot;二、 SpringSecurity 基本流程&quot;&gt;&lt;/a&gt;二、 SpringSecurity 基本流程&lt;/h2&gt;&lt;img src=&quot;/2021/12/12/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%8E%9F%E7%90%86/基本流程.png&quot; alt=&quot;image-20211212184305204&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;p&gt;绿色部分是认证过滤器，需要我们自己配置，可以配置多个认证过滤器。认证过滤器可以使用 &lt;strong&gt;Spring Security&lt;/strong&gt; 提供的认证过滤器，也可以自定义过滤器（例如：短信验证）。认证过滤器要在 &lt;strong&gt;configure(HttpSecurity http)&lt;/strong&gt;方法中配置，没有配置不生效。下面会重&lt;/p&gt;
&lt;p&gt;点介绍以下三个过滤器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;UsernamePasswordAuthenticationFilter&lt;/strong&gt; 过滤器：该过滤器会拦截前端提交的 POST 方式的登录表单请求，并进行身份认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ExceptionTranslationFilter&lt;/strong&gt; 过滤器：该过滤器不需要我们配置，对于前端提交的请求会直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FilterSecurityInterceptor&lt;/strong&gt; 过滤器：该过滤器是过滤器链的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，并由 &lt;strong&gt;ExceptionTranslationFilter&lt;/strong&gt; 过滤器进行捕获和处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;三、-SpringSecurity-认证流程&quot;&gt;&lt;a href=&quot;#三、-SpringSecurity-认证流程&quot; class=&quot;headerlink&quot; title=&quot;三、 SpringSecurity 认证流程&quot;&gt;&lt;/a&gt;三、 SpringSecurity 认证流程&lt;/h2&gt;&lt;p&gt;认证流程是在 &lt;strong&gt;UsernamePasswordAuthenticationFilter&lt;/strong&gt; 过滤器中处理的&lt;/p&gt;</summary>
    
    
    
    <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="SpringSecurity" scheme="http://yoursite.com/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity微服务权限</title>
    <link href="http://yoursite.com/2021/11/28/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2021/11/28/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/</id>
    <published>2021-11-28T10:04:21.000Z</published>
    <updated>2021-12-12T07:55:19.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、微服务是什么"><a href="#一、微服务是什么" class="headerlink" title="一、微服务是什么"></a>一、微服务是什么</h2><h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><p>微服务架构风格是一种使用一套小服务来开发单个应用的方式途径，<strong>每个服务运行在自己的进程中，并使用轻量级机制通信</strong>，通常是 HTTP API，这些服务基于业务能力构建，并能够<strong>通过自动化部署机制来独立部署</strong>，这些服务使用不同的编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理。 </p><h3 id="微服务优势"><a href="#微服务优势" class="headerlink" title="微服务优势"></a>微服务优势</h3><ul><li>微服务每个模块就相当于一个单独的项目，<strong>代码量明显减少</strong>，遇到问题也相对来说比较好解决。</li><li>微服务每个模块都可以<strong>使用不同的存储方式</strong>（比如有的用 redis，有的用 mysql等），数据库也是单个模块对应自己的数据库。</li><li>微服务每个模块都可以使用不同的开发技术，<strong>开发模式更灵活</strong>。</li></ul><h3 id="微服务本质"><a href="#微服务本质" class="headerlink" title="微服务本质"></a>微服务本质</h3><p>微服务，关键其实不仅仅是微服务本身，而是系统要提供<strong>一套基础的架构</strong>，这种架构使得微服务可以<strong>独立的部署、运行、升级</strong>，不仅如此，这个系统架构还<strong>让微服务与微服务之间在结构上“松耦合”</strong>，而在功能上则表现为一个统一的整体。这种所谓的“统一的整体”表现出来的是<strong>统一风格的界面，统一的权限管理，统一的安全策略，统一的上线过程，统一的日志和审计方法，统一的调度方式，统一的访问入口</strong>等等。</p><p>微服务的目的是有效的<strong>拆分应用</strong>，实现<strong>敏捷开发和部署</strong>。</p><h2 id="二、微服务认证与授权实现思路"><a href="#二、微服务认证与授权实现思路" class="headerlink" title="二、微服务认证与授权实现思路"></a>二、微服务认证与授权实现思路</h2><h3 id="认证授权过程分析"><a href="#认证授权过程分析" class="headerlink" title="认证授权过程分析"></a>认证授权过程分析</h3><ul><li>基于 Session，那么 Spring-security 会对 cookie 里的 sessionid 进行解析，找到服务器存储的 session 信息，然后判断当前用户是否符合请求的要求。</li><li>如果是 token，则是解析出 token，然后<strong>将当前请求加入到 Spring-security 管理</strong>的权限信息中去</li></ul><img src="/2021/11/28/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/认证授权过程.png" alt="image-20211128182639456" style="zoom:80%;"><p>如果系统的模块众多，每个模块都需要进行授权与认证，所以我们选择<strong>基于 token 的形式进行授权与认证</strong>，用户根据用户名密码认证成功，然后获取当前用户角色的一系列权限值，并以<strong>用户名为 key，权限列表为 value 的形式存入 redis 缓存中</strong>，根据用户名相关信息生成 token 返回，浏览器将 token 记录到 cookie 中，<strong>每次调用 api 接口都默认将 token 携带到 header 请求头中</strong>，Spring-security 解析 header 头获取 token 信息，解析 token 获取当前用户名，根据用户名就可以从 redis 中获取权限列表，这样 Spring-security 就能够判断当前请求是否有权限访问</p><h3 id="权限管理数据模型"><a href="#权限管理数据模型" class="headerlink" title="权限管理数据模型"></a>权限管理数据模型</h3><img src="/2021/11/28/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/权限数据模型.png" alt="image-20211128183700817" style="zoom:80%;"><h3 id="jwt-介绍"><a href="#jwt-介绍" class="headerlink" title="jwt 介绍"></a>jwt 介绍</h3><h4 id="1、访问令牌的类型"><a href="#1、访问令牌的类型" class="headerlink" title="1、访问令牌的类型"></a>1、访问令牌的类型</h4><img src="/2021/11/28/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/访问令牌.png" alt="image-20211128210203594" style="zoom:80%;"><h4 id="2、JWT-的组成"><a href="#2、JWT-的组成" class="headerlink" title="2、JWT 的组成"></a>2、JWT 的组成</h4><p>一个 JWT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGci0iJIUzI1NiIsInR5cCI6IkpxVcJ9. eyJzdWIi0iIxMjMENTY30DkwIiwibmFtZSI6IkpvaG4gRG91IiwiaWFBIjoxNTE2MjM5MDIyfQ.</span><br><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><h5 id="JWT-头"><a href="#JWT-头" class="headerlink" title="JWT 头"></a>JWT 头</h5><p>JWT 头部分是一个描述 JWT 元数据的 JSON 对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line"><span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>alg</code> 属性表示<strong>签名使用的算法</strong>，默认为 HMAC SHA256（写为 HS256）；<code>typ</code> 属性表示令牌的类型，JWT 令牌统一写为 JWT。最后，使用 Base64 URL 算法将上述JSON 对象转换为字符串保存。</p><h5 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h5><p>有效载荷部分，是 <strong>JWT 的主体内容部分</strong>，也是一个 JSON 对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss：发行人</span><br><span class="line">exp：到期时间</span><br><span class="line">sub：主题</span><br><span class="line">aud：用户</span><br><span class="line">nbf：在此之前不可用</span><br><span class="line">iat：发布时间</span><br><span class="line">jti：JWT ID 用于标识该 JWT</span><br></pre></td></tr></table></figure><p>我们还可以自定义私有字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Helen&quot;</span>,</span><br><span class="line"><span class="attr">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，默认情况下 JWT 是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</p><p>JSON 对象也使用 Base64 URL 算法转换为字符串保存。</p><h5 id="签名哈希"><a href="#签名哈希" class="headerlink" title="签名哈希"></a>签名哈希</h5><p>签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以<strong>确保数据不会被篡改。</strong><br>首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为 HMAC SHA256）根据以下公式生成签名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(claims), secret)</span><br></pre></td></tr></table></figure><p>在计算出签名哈希后，<strong>JWT 头，有效载荷和签名哈希的三个部分组合成一个字符串，</strong>每个部分用”.”分隔，就构成整个 JWT 对象。</p><h5 id="Base64URL-算法"><a href="#Base64URL-算法" class="headerlink" title="Base64URL 算法"></a>Base64URL 算法</h5><p>JWT 头和有效载荷序列化的算法都用到了 Base64URL。该算法和常见 Base64 算<br>法类似，稍有差别。</p><p>作为令牌的 JWT 可以放在 URL 中（例如 api.example/?token=xxx）。 Base64 中用的三个字符是<strong>“+”，”/“和”=”</strong>，由于在 URL 中有特殊含义，因此 Base64URL 中对他们做了替换：<strong>“=”去掉，”+”用”-“替换，”/“用”_”替换，这就是 Base64URL 算法。</strong></p><h2 id="三、项目创建"><a href="#三、项目创建" class="headerlink" title="三、项目创建"></a>三、项目创建</h2><h3 id="1-项目工程划分"><a href="#1-项目工程划分" class="headerlink" title="1.项目工程划分"></a>1.项目工程划分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. acl_parent 管理依赖</span><br><span class="line">2. </span><br><span class="line">2.1 common</span><br><span class="line">service_base 工具类</span><br><span class="line">spring_security 权限配置</span><br><span class="line">2.2 infrastructure</span><br><span class="line">api_gateway: 网关</span><br><span class="line">2.3 service</span><br><span class="line">service_acl 权限管理微服务模块</span><br></pre></td></tr></table></figure><p><img src="/2021/11/28/%E6%A1%86%E6%9E%B6/security/SpringSecurity%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/%E6%A8%A1%E5%9D%97%E5%88%92%E5%88%86.png" alt="image-20211212153916188"></p><h3 id="2-依赖"><a href="#2-依赖" class="headerlink" title="2.依赖"></a>2.依赖</h3><ol><li><code>redis</code></li><li><code>nacos</code>: 注册中心，将网关服务和权限管理服务注册</li></ol><h3 id="3-common的编写"><a href="#3-common的编写" class="headerlink" title="3.common的编写"></a>3.common的编写</h3><h4 id="service-base"><a href="#service-base" class="headerlink" title="service_base"></a>service_base</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. exceptionhandler</span><br><span class="line">GlobalExceptionHandler：全局异常处理</span><br><span class="line">GuliException： 自定义异常</span><br><span class="line">2. handler</span><br><span class="line">MyMetaObjectHandler mybatisplus</span><br><span class="line">3. utils </span><br><span class="line">MD5 :md5加密</span><br><span class="line">R： 统一返回对象</span><br><span class="line">responseUtil: 返回工具类</span><br><span class="line"></span><br><span class="line">4. RedisConfig: redis配置类</span><br><span class="line">5. SwaggerConfig: swagger配置类</span><br></pre></td></tr></table></figure><h4 id="spring-security"><a href="#spring-security" class="headerlink" title="spring_security"></a>spring_security</h4><ol><li>工具类</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">security</span><br><span class="line">DefaultPasswordEncoder 密码处理</span><br><span class="line">TokenLogoutHandler 退出处理器</span><br><span class="line">TokenManager token生成工具类</span><br><span class="line">UnauthorizedEntryPoint 未授权统一处理类</span><br></pre></td></tr></table></figure><ol start="2"><li>filter</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter</span><br><span class="line">TokenAuthenticationFilter授权过滤</span><br><span class="line">TokenLoginFilter认证过滤器</span><br></pre></td></tr></table></figure><ol start="3"><li>核心配置类</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config</span><br><span class="line">TokenWebSecurityConfig核心配置类</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.exceptionHandling()</span><br><span class="line">               .authenticationEntryPoint(<span class="keyword">new</span> UnauthorizedEntryPoint()) <span class="comment">//没有权限访问的</span></span><br><span class="line">               .and().csrf().disable()</span><br><span class="line">               .authorizeRequests()</span><br><span class="line">               .anyRequest().authenticated()</span><br><span class="line">               .and().logout().logoutUrl(<span class="string">&quot;/admin/acl/index/logout&quot;</span>)</span><br><span class="line">               .addLogoutHandler(<span class="keyword">new</span> TokenLogoutHandler(tokenManager, redisTemplate))</span><br><span class="line">               .and()</span><br><span class="line">               .addFilter(<span class="keyword">new</span> TokenLoginFilter(tokenManager, redisTemplate, authenticationManager()))</span><br><span class="line">               .addFilter(<span class="keyword">new</span> TokenAuthFilter(tokenManager, redisTemplate ,authenticationManager()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h4><p>解决跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决跨域</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service-acl"><a href="#service-acl" class="headerlink" title="service_acl"></a>service_acl</h4><p>查询用户和权限列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//根据用户名查询数据</span></span><br><span class="line">        User user = userService.selectByUsername(username);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        com.lq.security.entity.User curUser = <span class="keyword">new</span> com.lq.security.entity.User();</span><br><span class="line">        BeanUtils.copyProperties(user,curUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户查询用户权限列表</span></span><br><span class="line">        List&lt;String&gt; permissionValueList = permissionService.selectPermissionValueByUserId(user.getId());</span><br><span class="line">        SecurityUser securityUser = <span class="keyword">new</span> SecurityUser();</span><br><span class="line">        securityUser.setCurrentUserInfo(curUser);</span><br><span class="line">        securityUser.setPermissionValueList(permissionValueList);</span><br><span class="line">        <span class="keyword">return</span> securityUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、微服务是什么&quot;&gt;&lt;a href=&quot;#一、微服务是什么&quot; class=&quot;headerlink&quot; title=&quot;一、微服务是什么&quot;&gt;&lt;/a&gt;一、微服务是什么&lt;/h2&gt;&lt;h3 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h3&gt;&lt;p&gt;微服务架构风格是一种使用一套小服务来开发单个应用的方式途径，&lt;strong&gt;每个服务运行在自己的进程中，并使用轻量级机制通信&lt;/strong&gt;，通常是 HTTP API，这些服务基于业务能力构建，并能够&lt;strong&gt;通过自动化部署机制来独立部署&lt;/strong&gt;，这些服务使用不同的编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理。 &lt;/p&gt;
&lt;h3 id=&quot;微服务优势&quot;&gt;&lt;a href=&quot;#微服务优势&quot; class=&quot;headerlink&quot; title=&quot;微服务优势&quot;&gt;&lt;/a&gt;微服务优势&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;微服务每个模块就相当于一个单独的项目，&lt;strong&gt;代码量明显减少&lt;/strong&gt;，遇到问题也相对来说比较好解决。&lt;/li&gt;
&lt;li&gt;微服务每个模块都可以&lt;strong&gt;使用不同的存储方式&lt;/strong&gt;（比如有的用 redis，有的用 mysql等），数据库也是单个模块对应自己的数据库。&lt;/li&gt;
&lt;li&gt;微服务每个模块都可以使用不同的开发技术，&lt;strong&gt;开发模式更灵活&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;微服务本质&quot;&gt;&lt;a href=&quot;#微服务本质&quot; class=&quot;headerlink&quot; title=&quot;微服务本质&quot;&gt;&lt;/a&gt;微服务本质&lt;/h3&gt;&lt;p&gt;微服务，关键其实不仅仅是微服务本身，而是系统要提供&lt;strong&gt;一套基础的架构&lt;/strong&gt;，这种架构使得微服务可以&lt;strong&gt;独立的部署、运行、升级&lt;/strong&gt;，不仅如此，这个系统架构还&lt;strong&gt;让微服务与微服务之间在结构上“松耦合”&lt;/strong&gt;，而在功能上则表现为一个统一的整体。这种所谓的“统一的整体”表现出来的是&lt;strong&gt;统一风格的界面，统一的权限管理，统一的安全策略，统一的上线过程，统一的日志和审计方法，统一的调度方式，统一的访问入口&lt;/strong&gt;等等。&lt;/p&gt;
&lt;p&gt;微服务的目的是有效的&lt;strong&gt;拆分应用&lt;/strong&gt;，实现&lt;strong&gt;敏捷开发和部署&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;二、微服务认证与授权实现思路&quot;&gt;&lt;a href=&quot;#二、微服务认证与授权实现思路&quot; class=&quot;headerlink&quot; title=&quot;二、微服务认证与授权实现思路&quot;&gt;&lt;/a&gt;二、微服务认证与授权实现思路&lt;/h2&gt;&lt;h3 id=&quot;认证授权过程分析&quot;&gt;&lt;a href=&quot;#认证授权过程分析&quot; class=&quot;headerlink&quot; title=&quot;认证授权过程分析&quot;&gt;&lt;/a&gt;认证授权过程分析&lt;/h3&gt;</summary>
    
    
    
    <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="SpringSecurity" scheme="http://yoursite.com/tags/SpringSecurity/"/>
    
  </entry>
  
</feed>
